// Copyright Euresys 2020
#ifndef CEGRABBER_HEADER_H__
#define CEGRABBER_HEADER_H__

#ifndef GC_USER_DEFINED_TYPES
#  if defined(_WIN32) && !defined _STDINT_H && !defined _STDINT
     typedef char int8_t;
     typedef __int16 int16_t;
     typedef unsigned __int16 uint16_t;
     typedef __int64 int64_t;
#  else
#    include <stdint.h>
#  endif
#endif /* GC_DEFINE_TYPES */

#include <stddef.h>
#include <EuresysImage.h>
#include <EuresysGenapi.h>
#include "../cEGrabberErrorList.h"
#include "../cEGrabberTypes.h"

#if defined (_WIN32)
#  define CEGRABBER_EXPORT __declspec(dllexport)
#  define CEGRABBER_IMPORT __declspec(dllimport)
#elif defined (__GNUC__) && (__GNUC__ >= 4) && (defined (__linux__) || defined (__APPLE__))
#  define CEGRABBER_EXPORT __attribute__((visibility("default")))
#  define CEGRABBER_IMPORT
#else
#  error Unknown platform, file needs adaptation
#endif

#ifdef CEGRABBER_IMPL
#  define CEGRABBER_API(fn) CEGRABBER_EXPORT int fn
#else
#  define CEGRABBER_API(fn) CEGRABBER_IMPORT int fn
#endif

#ifdef __cplusplus
namespace EURESYS_NAMESPACE {
namespace Internal {
namespace cEGrabber {
using namespace GenTL;
using namespace EuresysCustomGenTL;
extern "C" {
#endif

#if defined(CEGRABBER_IMPL)
#define Eur_InfoCommandInfo_get_dataType euEurCINFO_get_dataType
#define Eur_InfoCommandInfo_get_dataSize euEurCINFO_get_dataSize
#define Eur_InfoCommandInfo_destroy euEurCINFO_destroy
#define from_box_Eur_InfoCommandInfo__from__cInfoCommandInfo_p eufrom_box_EurCINFOFcInfoCommandInfo_p
#define Eur_EGrabberInfo_create euEurEGInfo_create
#define Eur_EGrabberInfo_destroy euEurEGInfo_destroy
#define Eur_EGrabberCameraInfo_create euEurEGCameraInfo_create
#define Eur_EGrabberCameraInfo_destroy euEurEGCameraInfo_destroy
#define Eur_GenTLMemory_create__from__size_t__void_p euGenTLMemory_createFsvp
#define Eur_GenTLMemory_create__from__size_t euGenTLMemory_createFs
#define Eur_GenTLMemory_create euGenTLMemory_create
#define Eur_GenTLMemory_destroy euGenTLMemory_destroy
#define Eur_UserMemory_create__from__void_p__size_t__void_p euUserMemory_createFvpsvp
#define Eur_UserMemory_create__from__void_p__size_t euUserMemory_createFvps
#define Eur_UserMemory_destroy euUserMemory_destroy
#define Eur_BusMemory_create__from__uint64_t__size_t__void_p euBusMemory_createFu64svp
#define Eur_BusMemory_create__from__uint64_t__size_t euBusMemory_createFu64s
#define Eur_BusMemory_destroy euBusMemory_destroy
#define Eur_NvidiaRdmaMemory_create__from__void_p__size_t__void_p euNvidiaRdmaMemory_createFvpsvp
#define Eur_NvidiaRdmaMemory_create__from__void_p__size_t euNvidiaRdmaMemory_createFvps
#define Eur_NvidiaRdmaMemory_destroy euNvidiaRdmaMemory_destroy
#define Eur_UserMemoryArray_create__from__Eur_UserMemory__size_t euUserMemoryArray_createFEur_UserMemorys
#define Eur_UserMemoryArray_destroy euUserMemoryArray_destroy
#define Eur_BufferIndexRange_create__from__size_t__size_t__bool8_t euBufferIndexRange_createFssb8
#define Eur_BufferIndexRange_create__from__size_t__size_t euBufferIndexRange_createFss
#define Eur_BufferIndexRange_create__from__size_t euBufferIndexRange_createFs
#define Eur_BufferIndexRange_create euBufferIndexRange_create
#define Eur_BufferIndexRange_create__from__Eur_BufferIndexRange euBufferIndexRange_createFEur_BufferIndexRange
#define Eur_BufferIndexRange_indexAt__from__size_t euBufferIndexRange_indexAtFs
#define Eur_BufferIndexRange_size euBufferIndexRange_size
#define Eur_BufferIndexRange_destroy euBufferIndexRange_destroy
#define Eur_NewBufferData_create euNewBufferData_create
#define Eur_NewBufferData_destroy euNewBufferData_destroy
#define Eur_IoToolboxData_create euIoToolboxData_create
#define Eur_IoToolboxData_destroy euIoToolboxData_destroy
#define Eur_CicData_create euCicData_create
#define Eur_CicData_destroy euCicData_destroy
#define Eur_DataStreamData_create euDataStreamData_create
#define Eur_DataStreamData_destroy euDataStreamData_destroy
#define Eur_CxpInterfaceData_create euCxpInterfaceData_create
#define Eur_CxpInterfaceData_destroy euCxpInterfaceData_destroy
#define Eur_DeviceErrorData_create euDeviceErrorData_create
#define Eur_DeviceErrorData_destroy euDeviceErrorData_destroy
#define Eur_CxpDeviceData_create euCxpDeviceData_create
#define Eur_CxpDeviceData_destroy euCxpDeviceData_destroy
#define Eur_RemoteDeviceData_create euRemoteDeviceData_create
#define Eur_RemoteDeviceData_destroy euRemoteDeviceData_destroy
#define Eur_Coaxlink euCoaxlink
#define Eur_Grablink euGrablink
#define Eur_Gigelink euGigelink
#define Eur_Playlink euPlaylink
#define Eur_query_attributes euquery_attributes
#define Eur_query_features__from__bool8_t euquery_featuresFb8
#define Eur_query_features euquery_features
#define Eur_query_featuresOf__from__const_char_p__bool8_t euquery_featuresOfFccpb8
#define Eur_query_featuresOf__from__const_char_p euquery_featuresOfFccp
#define Eur_query_categories__from__bool8_t euquery_categoriesFb8
#define Eur_query_categories euquery_categories
#define Eur_query_categoriesOf__from__const_char_p__bool8_t euquery_categoriesOfFccpb8
#define Eur_query_categoriesOf__from__const_char_p euquery_categoriesOfFccp
#define Eur_query_enumEntries__from__const_char_p__bool8_t euquery_enumEntriesFccpb8
#define Eur_query_enumEntries__from__const_char_p euquery_enumEntriesFccp
#define Eur_query_available__from__const_char_p euquery_availableFccp
#define Eur_query_readable__from__const_char_p euquery_readableFccp
#define Eur_query_writeable__from__const_char_p euquery_writeableFccp
#define Eur_query_implemented__from__const_char_p euquery_implementedFccp
#define Eur_query_command__from__const_char_p euquery_commandFccp
#define Eur_query_done__from__const_char_p euquery_doneFccp
#define Eur_query_interfaces__from__const_char_p euquery_interfacesFccp
#define Eur_query_source__from__const_char_p euquery_sourceFccp
#define Eur_query_xml euquery_xml
#define Eur_query_info__from__const_char_p__const_char_p euquery_infoFccpccp
#define Eur_query_declared euquery_declared
#define Eur_action_declareInteger euaction_declareInteger
#define Eur_action_declareFloat euaction_declareFloat
#define Eur_action_declareString euaction_declareString
#define Eur_action_undeclare euaction_undeclare
#define Eur_EGenTL_create__from__const_char_p__bool8_t euEGenTL_createFccpb8
#define Eur_EGenTL_create__from__const_char_p euEGenTL_createFccp
#define Eur_EGenTL_create euEGenTL_create
#define Eur_EGenTL_create__from__char_p__bool8_t euEGenTL_createFcpb8
#define Eur_EGenTL_create__from__char_p euEGenTL_createFcp
#define Eur_EGenTL_create__from__bool8_t__const_char_p euEGenTL_createFb8ccp
#define Eur_EGenTL_create__from__bool8_t euEGenTL_createFb8
#define Eur_EGenTL_gcGetInfo__as__size_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAsFTIC
#define Eur_EGenTL_gcGetInfo__as__int8_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAi8FTIC
#define Eur_EGenTL_gcGetInfo__as__int16_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAi16FTIC
#define Eur_EGenTL_gcGetInfo__as__int32_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAi32FTIC
#define Eur_EGenTL_gcGetInfo__as__int64_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAi64FTIC
#define Eur_EGenTL_gcGetInfo__as__uint8_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAu8FTIC
#define Eur_EGenTL_gcGetInfo__as__uint16_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAu16FTIC
#define Eur_EGenTL_gcGetInfo__as__uint32_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAu32FTIC
#define Eur_EGenTL_gcGetInfo__as__uint64_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAu64FTIC
#define Eur_EGenTL_gcGetInfo__as__double__from__TL_INFO_CMD euEGenTL_gcGetInfoAdFTIC
#define Eur_EGenTL_gcGetInfo__as__float__from__TL_INFO_CMD euEGenTL_gcGetInfoAfFTIC
#define Eur_EGenTL_gcGetInfo__as__uint8_t_ptr__from__TL_INFO_CMD euEGenTL_gcGetInfoAu8pFTIC
#define Eur_EGenTL_gcGetInfo__as__std_string__from__TL_INFO_CMD euEGenTL_gcGetInfoASsFTIC
#define Eur_EGenTL_gcGetInfo__as__void_ptr__from__TL_INFO_CMD euEGenTL_gcGetInfoAvptrFTIC
#define Eur_EGenTL_gcGetInfo__as__std_vector_char__from__TL_INFO_CMD euEGenTL_gcGetInfoASvcFTIC
#define Eur_EGenTL_gcGetInfo__as__std_vector_std_string__from__TL_INFO_CMD euEGenTL_gcGetInfoASv_std_stringFTIC
#define Eur_EGenTL_gcGetInfo__as__bool8_t__from__TL_INFO_CMD euEGenTL_gcGetInfoAb8FTIC
#define Eur_EGenTL_gcGetInfo__as__char_ptr__from__TL_INFO_CMD euEGenTL_gcGetInfoAcptrFTIC
#define Eur_EGenTL_gcGetInfo__as__InfoCommandInfo__from__TL_INFO_CMD euEGenTL_gcGetInfoA_CINFOFTIC
#define Eur_EGenTL_gcReadPort__from__PORT_HANDLE__uint64_t__std_vector_char euEGenTL_gcReadPortFPHu64Svc
#define Eur_EGenTL_gcReadPortString__from__PORT_HANDLE__uint64_t__size_t euEGenTL_gcReadPortStringFPHu64s
#define Eur_EGenTL_gcReadPort__from__PORT_HANDLE__uint64_t euEGenTL_gcReadPortFPHu64
#define Eur_EGenTL_gcWritePort__from__PORT_HANDLE__uint64_t__std_vector_char euEGenTL_gcWritePortFPHu64Svc
#define Eur_EGenTL_gcReadPortData__from__PORT_HANDLE__uint64_t__void_p__size_t euEGenTL_gcReadPortDataFPHu64vps
#define Eur_EGenTL_gcWritePortData__from__PORT_HANDLE__uint64_t__void_p__size_t euEGenTL_gcWritePortDataFPHu64vps
#define Eur_EGenTL_gcGetPortURL__from__PORT_HANDLE euEGenTL_gcGetPortURLFPH
#define Eur_EGenTL_gcGetPortInfo__as__size_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAsFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__int8_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAi8FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__int16_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAi16FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__int32_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAi32FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__int64_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAi64FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__uint8_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAu8FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__uint16_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAu16FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__uint32_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAu32FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__uint64_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAu64FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__double__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAdFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__float__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAfFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__uint8_t_ptr__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAu8pFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__std_string__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoASsFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__void_ptr__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAvptrFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__std_vector_char__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoASvcFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__std_vector_std_string__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoASv_std_stringFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__bool8_t__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAb8FPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__char_ptr__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoAcptrFPHPIC
#define Eur_EGenTL_gcGetPortInfo__as__InfoCommandInfo__from__PORT_HANDLE__PORT_INFO_CMD euEGenTL_gcGetPortInfoA_CINFOFPHPIC
#define Eur_EGenTL_gcRegisterEvent__from__EVENTSRC_HANDLE__EVENT_TYPE euEGenTL_gcRegisterEventFEHET
#define Eur_EGenTL_gcUnregisterEvent__from__EVENTSRC_HANDLE__EVENT_TYPE euEGenTL_gcUnregisterEventFEHET
#define Eur_EGenTL_eventGetData__from__EVENT_HANDLE__void_p__size_t__uint64_t euEGenTL_eventGetDataFEHvpsu64
#define Eur_EGenTL_eventsGetData__from__std_vector_EURESYS_EVENT_GET_DATA_ENTRY__uint64_t_p euEGenTL_eventsGetDataFSv_EEGDEu64p
#define Eur_EGenTL_eventGetDataInfo__as__size_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAsFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__int8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAi8FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__int16_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAi16FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__int32_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAi32FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__int64_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAi64FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__uint8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAu8FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__uint16_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAu16FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__uint32_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAu32FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__uint64_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAu64FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__double__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAdFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__float__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAfFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__uint8_t_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAu8pFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__std_string__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoASsFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__void_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAvptrFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__std_vector_char__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoASvcFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__std_vector_std_string__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoASv_std_stringFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__bool8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAb8FEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__char_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoAcptrFEHvpsEDIC
#define Eur_EGenTL_eventGetDataInfo__as__InfoCommandInfo__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD euEGenTL_eventGetDataInfoA_CINFOFEHvpsEDIC
#define Eur_EGenTL_eventGetInfo__as__size_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAsFEHEIC
#define Eur_EGenTL_eventGetInfo__as__int8_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAi8FEHEIC
#define Eur_EGenTL_eventGetInfo__as__int16_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAi16FEHEIC
#define Eur_EGenTL_eventGetInfo__as__int32_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAi32FEHEIC
#define Eur_EGenTL_eventGetInfo__as__int64_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAi64FEHEIC
#define Eur_EGenTL_eventGetInfo__as__uint8_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAu8FEHEIC
#define Eur_EGenTL_eventGetInfo__as__uint16_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAu16FEHEIC
#define Eur_EGenTL_eventGetInfo__as__uint32_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAu32FEHEIC
#define Eur_EGenTL_eventGetInfo__as__uint64_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAu64FEHEIC
#define Eur_EGenTL_eventGetInfo__as__double__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAdFEHEIC
#define Eur_EGenTL_eventGetInfo__as__float__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAfFEHEIC
#define Eur_EGenTL_eventGetInfo__as__uint8_t_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAu8pFEHEIC
#define Eur_EGenTL_eventGetInfo__as__std_string__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoASsFEHEIC
#define Eur_EGenTL_eventGetInfo__as__void_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAvptrFEHEIC
#define Eur_EGenTL_eventGetInfo__as__std_vector_char__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoASvcFEHEIC
#define Eur_EGenTL_eventGetInfo__as__std_vector_std_string__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoASv_std_stringFEHEIC
#define Eur_EGenTL_eventGetInfo__as__bool8_t__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAb8FEHEIC
#define Eur_EGenTL_eventGetInfo__as__char_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoAcptrFEHEIC
#define Eur_EGenTL_eventGetInfo__as__InfoCommandInfo__from__EVENT_HANDLE__EVENT_INFO_CMD euEGenTL_eventGetInfoA_CINFOFEHEIC
#define Eur_EGenTL_eventFlush__from__EVENT_HANDLE euEGenTL_eventFlushFEH
#define Eur_EGenTL_eventKill__from__EVENT_HANDLE euEGenTL_eventKillFEH
#define Eur_EGenTL_tlOpen euEGenTL_tlOpen
#define Eur_EGenTL_tlClose__from__TL_HANDLE euEGenTL_tlCloseFTH
#define Eur_EGenTL_tlGetInfo__as__size_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAsFTHTIC
#define Eur_EGenTL_tlGetInfo__as__int8_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAi8FTHTIC
#define Eur_EGenTL_tlGetInfo__as__int16_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAi16FTHTIC
#define Eur_EGenTL_tlGetInfo__as__int32_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAi32FTHTIC
#define Eur_EGenTL_tlGetInfo__as__int64_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAi64FTHTIC
#define Eur_EGenTL_tlGetInfo__as__uint8_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAu8FTHTIC
#define Eur_EGenTL_tlGetInfo__as__uint16_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAu16FTHTIC
#define Eur_EGenTL_tlGetInfo__as__uint32_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAu32FTHTIC
#define Eur_EGenTL_tlGetInfo__as__uint64_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAu64FTHTIC
#define Eur_EGenTL_tlGetInfo__as__double__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAdFTHTIC
#define Eur_EGenTL_tlGetInfo__as__float__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAfFTHTIC
#define Eur_EGenTL_tlGetInfo__as__uint8_t_ptr__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAu8pFTHTIC
#define Eur_EGenTL_tlGetInfo__as__std_string__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoASsFTHTIC
#define Eur_EGenTL_tlGetInfo__as__void_ptr__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAvptrFTHTIC
#define Eur_EGenTL_tlGetInfo__as__std_vector_char__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoASvcFTHTIC
#define Eur_EGenTL_tlGetInfo__as__std_vector_std_string__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoASv_std_stringFTHTIC
#define Eur_EGenTL_tlGetInfo__as__bool8_t__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAb8FTHTIC
#define Eur_EGenTL_tlGetInfo__as__char_ptr__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoAcptrFTHTIC
#define Eur_EGenTL_tlGetInfo__as__InfoCommandInfo__from__TL_HANDLE__TL_INFO_CMD euEGenTL_tlGetInfoA_CINFOFTHTIC
#define Eur_EGenTL_tlGetNumInterfaces__from__TL_HANDLE euEGenTL_tlGetNumInterfacesFTH
#define Eur_EGenTL_tlGetInterfaceID__from__TL_HANDLE__uint32_t euEGenTL_tlGetInterfaceIDFTHu32
#define Eur_EGenTL_tlGetInterfaceInfo__as__size_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAsFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__int8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAi8FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__int16_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAi16FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__int32_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAi32FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__int64_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAi64FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__uint8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAu8FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__uint16_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAu16FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__uint32_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAu32FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__uint64_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAu64FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__double__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAdFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__float__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAfFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__uint8_t_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAu8pFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__std_string__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoASsFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__void_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAvptrFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__std_vector_char__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoASvcFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__std_vector_std_string__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoASv_std_stringFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__bool8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAb8FTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__char_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoAcptrFTHccpTIC
#define Eur_EGenTL_tlGetInterfaceInfo__as__InfoCommandInfo__from__TL_HANDLE__const_char_p__TL_INFO_CMD euEGenTL_tlGetInterfaceInfoA_CINFOFTHccpTIC
#define Eur_EGenTL_tlOpenInterface__from__TL_HANDLE__const_char_p euEGenTL_tlOpenInterfaceFTHccp
#define Eur_EGenTL_tlUpdateInterfaceList__from__TL_HANDLE__uint64_t euEGenTL_tlUpdateInterfaceListFTHu64
#define Eur_EGenTL_tlUpdateInterfaceList__from__TL_HANDLE euEGenTL_tlUpdateInterfaceListFTH
#define Eur_EGenTL_ifClose__from__IF_HANDLE euEGenTL_ifCloseFIH
#define Eur_EGenTL_ifGetInfo__as__size_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAsFIHIIC
#define Eur_EGenTL_ifGetInfo__as__int8_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAi8FIHIIC
#define Eur_EGenTL_ifGetInfo__as__int16_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAi16FIHIIC
#define Eur_EGenTL_ifGetInfo__as__int32_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAi32FIHIIC
#define Eur_EGenTL_ifGetInfo__as__int64_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAi64FIHIIC
#define Eur_EGenTL_ifGetInfo__as__uint8_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAu8FIHIIC
#define Eur_EGenTL_ifGetInfo__as__uint16_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAu16FIHIIC
#define Eur_EGenTL_ifGetInfo__as__uint32_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAu32FIHIIC
#define Eur_EGenTL_ifGetInfo__as__uint64_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAu64FIHIIC
#define Eur_EGenTL_ifGetInfo__as__double__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAdFIHIIC
#define Eur_EGenTL_ifGetInfo__as__float__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAfFIHIIC
#define Eur_EGenTL_ifGetInfo__as__uint8_t_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAu8pFIHIIC
#define Eur_EGenTL_ifGetInfo__as__std_string__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoASsFIHIIC
#define Eur_EGenTL_ifGetInfo__as__void_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAvptrFIHIIC
#define Eur_EGenTL_ifGetInfo__as__std_vector_char__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoASvcFIHIIC
#define Eur_EGenTL_ifGetInfo__as__std_vector_std_string__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoASv_std_stringFIHIIC
#define Eur_EGenTL_ifGetInfo__as__bool8_t__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAb8FIHIIC
#define Eur_EGenTL_ifGetInfo__as__char_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoAcptrFIHIIC
#define Eur_EGenTL_ifGetInfo__as__InfoCommandInfo__from__IF_HANDLE__INTERFACE_INFO_CMD euEGenTL_ifGetInfoA_CINFOFIHIIC
#define Eur_EGenTL_ifGetNumDevices__from__IF_HANDLE euEGenTL_ifGetNumDevicesFIH
#define Eur_EGenTL_ifGetDeviceID__from__IF_HANDLE__uint32_t euEGenTL_ifGetDeviceIDFIHu32
#define Eur_EGenTL_ifUpdateDeviceList__from__IF_HANDLE__uint64_t euEGenTL_ifUpdateDeviceListFIHu64
#define Eur_EGenTL_ifUpdateDeviceList__from__IF_HANDLE euEGenTL_ifUpdateDeviceListFIH
#define Eur_EGenTL_ifGetDeviceInfo__as__size_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAsFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__int8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAi8FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__int16_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAi16FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__int32_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAi32FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__int64_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAi64FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__uint8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAu8FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__uint16_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAu16FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__uint32_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAu32FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__uint64_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAu64FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__double__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAdFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__float__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAfFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__uint8_t_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAu8pFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__std_string__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoASsFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__void_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAvptrFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__std_vector_char__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoASvcFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__std_vector_std_string__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoASv_std_stringFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__bool8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAb8FIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__char_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoAcptrFIHccpIIC
#define Eur_EGenTL_ifGetDeviceInfo__as__InfoCommandInfo__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD euEGenTL_ifGetDeviceInfoA_CINFOFIHccpIIC
#define Eur_EGenTL_ifOpenDevice__from__IF_HANDLE__const_char_p__DEVICE_ACCESS_FLAGS euEGenTL_ifOpenDeviceFIHccpDAF
#define Eur_EGenTL_ifOpenDevice__from__IF_HANDLE__const_char_p euEGenTL_ifOpenDeviceFIHccp
#define Eur_EGenTL_devGetPort__from__DEV_HANDLE euEGenTL_devGetPortFDH
#define Eur_EGenTL_devGetNumDataStreams__from__DEV_HANDLE euEGenTL_devGetNumDataStreamsFDH
#define Eur_EGenTL_devGetDataStreamID__from__DEV_HANDLE__uint32_t euEGenTL_devGetDataStreamIDFDHu32
#define Eur_EGenTL_devOpenDataStream__from__DEV_HANDLE__const_char_p euEGenTL_devOpenDataStreamFDHccp
#define Eur_EGenTL_devClose__from__DEV_HANDLE euEGenTL_devCloseFDH
#define Eur_EGenTL_devGetInfo__as__size_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAsFDHDIC
#define Eur_EGenTL_devGetInfo__as__int8_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAi8FDHDIC
#define Eur_EGenTL_devGetInfo__as__int16_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAi16FDHDIC
#define Eur_EGenTL_devGetInfo__as__int32_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAi32FDHDIC
#define Eur_EGenTL_devGetInfo__as__int64_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAi64FDHDIC
#define Eur_EGenTL_devGetInfo__as__uint8_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAu8FDHDIC
#define Eur_EGenTL_devGetInfo__as__uint16_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAu16FDHDIC
#define Eur_EGenTL_devGetInfo__as__uint32_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAu32FDHDIC
#define Eur_EGenTL_devGetInfo__as__uint64_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAu64FDHDIC
#define Eur_EGenTL_devGetInfo__as__double__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAdFDHDIC
#define Eur_EGenTL_devGetInfo__as__float__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAfFDHDIC
#define Eur_EGenTL_devGetInfo__as__uint8_t_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAu8pFDHDIC
#define Eur_EGenTL_devGetInfo__as__std_string__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoASsFDHDIC
#define Eur_EGenTL_devGetInfo__as__void_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAvptrFDHDIC
#define Eur_EGenTL_devGetInfo__as__std_vector_char__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoASvcFDHDIC
#define Eur_EGenTL_devGetInfo__as__std_vector_std_string__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoASv_std_stringFDHDIC
#define Eur_EGenTL_devGetInfo__as__bool8_t__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAb8FDHDIC
#define Eur_EGenTL_devGetInfo__as__char_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoAcptrFDHDIC
#define Eur_EGenTL_devGetInfo__as__InfoCommandInfo__from__DEV_HANDLE__DEVICE_INFO_CMD euEGenTL_devGetInfoA_CINFOFDHDIC
#define Eur_EGenTL_dsAnnounceBuffer__from__DS_HANDLE__void_p__size_t__void_p euEGenTL_dsAnnounceBufferFDHvpsvp
#define Eur_EGenTL_dsAnnounceBuffer__from__DS_HANDLE__void_p__size_t euEGenTL_dsAnnounceBufferFDHvps
#define Eur_EGenTL_dsAllocAndAnnounceBuffer__from__DS_HANDLE__size_t__void_p euEGenTL_dsAllocAndAnnounceBufferFDHsvp
#define Eur_EGenTL_dsAllocAndAnnounceBuffer__from__DS_HANDLE__size_t euEGenTL_dsAllocAndAnnounceBufferFDHs
#define Eur_EGenTL_dsAnnounceBusBuffer__from__DS_HANDLE__uint64_t__size_t__void_p euEGenTL_dsAnnounceBusBufferFDHu64svp
#define Eur_EGenTL_dsAnnounceBusBuffer__from__DS_HANDLE__uint64_t__size_t euEGenTL_dsAnnounceBusBufferFDHu64s
#define Eur_EGenTL_dsAnnounceDeviceBuffer__from__DS_HANDLE__void_p__size_t__MEMORY_TYPE__void_p euEGenTL_dsAnnounceDeviceBufferFDHvpsMTvp
#define Eur_EGenTL_dsAnnounceDeviceBuffer__from__DS_HANDLE__void_p__size_t__MEMORY_TYPE euEGenTL_dsAnnounceDeviceBufferFDHvpsMT
#define Eur_EGenTL_dsAllocAndAnnounceBuffers__from__DS_HANDLE__size_t__std_vector_BUFFER_HANDLE euEGenTL_dsAllocAndAnnounceBuffersFDHsSv_BH
#define Eur_EGenTL_dsFlushQueue__from__DS_HANDLE__ACQ_QUEUE_TYPE euEGenTL_dsFlushQueueFDHAQT
#define Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE__ACQ_START_FLAGS__uint64_t euEGenTL_dsStartAcquisitionFDHASFu64
#define Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE__ACQ_START_FLAGS euEGenTL_dsStartAcquisitionFDHASF
#define Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE euEGenTL_dsStartAcquisitionFDH
#define Eur_EGenTL_dsStopAcquisition__from__DS_HANDLE__ACQ_STOP_FLAGS euEGenTL_dsStopAcquisitionFDHASF
#define Eur_EGenTL_dsStopAcquisition__from__DS_HANDLE euEGenTL_dsStopAcquisitionFDH
#define Eur_EGenTL_dsClose__from__DS_HANDLE euEGenTL_dsCloseFDH
#define Eur_EGenTL_dsGetInfo__as__size_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAsFDHSIC
#define Eur_EGenTL_dsGetInfo__as__int8_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAi8FDHSIC
#define Eur_EGenTL_dsGetInfo__as__int16_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAi16FDHSIC
#define Eur_EGenTL_dsGetInfo__as__int32_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAi32FDHSIC
#define Eur_EGenTL_dsGetInfo__as__int64_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAi64FDHSIC
#define Eur_EGenTL_dsGetInfo__as__uint8_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAu8FDHSIC
#define Eur_EGenTL_dsGetInfo__as__uint16_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAu16FDHSIC
#define Eur_EGenTL_dsGetInfo__as__uint32_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAu32FDHSIC
#define Eur_EGenTL_dsGetInfo__as__uint64_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAu64FDHSIC
#define Eur_EGenTL_dsGetInfo__as__double__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAdFDHSIC
#define Eur_EGenTL_dsGetInfo__as__float__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAfFDHSIC
#define Eur_EGenTL_dsGetInfo__as__uint8_t_ptr__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAu8pFDHSIC
#define Eur_EGenTL_dsGetInfo__as__std_string__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoASsFDHSIC
#define Eur_EGenTL_dsGetInfo__as__void_ptr__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAvptrFDHSIC
#define Eur_EGenTL_dsGetInfo__as__std_vector_char__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoASvcFDHSIC
#define Eur_EGenTL_dsGetInfo__as__std_vector_std_string__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoASv_std_stringFDHSIC
#define Eur_EGenTL_dsGetInfo__as__bool8_t__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAb8FDHSIC
#define Eur_EGenTL_dsGetInfo__as__char_ptr__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoAcptrFDHSIC
#define Eur_EGenTL_dsGetInfo__as__InfoCommandInfo__from__DS_HANDLE__STREAM_INFO_CMD euEGenTL_dsGetInfoA_CINFOFDHSIC
#define Eur_EGenTL_dsGetBufferID__from__DS_HANDLE__uint32_t euEGenTL_dsGetBufferIDFDHu32
#define Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE__void_pp__void_pp euEGenTL_dsRevokeBufferFDHBHvppvpp
#define Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE__void_pp euEGenTL_dsRevokeBufferFDHBHvpp
#define Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE euEGenTL_dsRevokeBufferFDHBH
#define Eur_EGenTL_dsRevokeBuffers__from__DS_HANDLE__std_vector_BUFFER_HANDLE euEGenTL_dsRevokeBuffersFDHSv_BH
#define Eur_EGenTL_dsQueueBuffer__from__DS_HANDLE__BUFFER_HANDLE euEGenTL_dsQueueBufferFDHBH
#define Eur_EGenTL_dsQueueBuffers__from__DS_HANDLE__std_vector_BUFFER_HANDLE euEGenTL_dsQueueBuffersFDHSv_BH
#define Eur_EGenTL_dsGetBufferInfo__as__size_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAsFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__int8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAi8FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__int16_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAi16FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__int32_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAi32FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__int64_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAi64FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__uint8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAu8FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__uint16_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAu16FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__uint32_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAu32FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__uint64_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAu64FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__double__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAdFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__float__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAfFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__uint8_t_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAu8pFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__std_string__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoASsFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__void_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAvptrFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__std_vector_char__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoASvcFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__std_vector_std_string__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoASv_std_stringFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__bool8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAb8FDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__char_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoAcptrFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__as__InfoCommandInfo__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD euEGenTL_dsGetBufferInfoA_CINFOFDHBHBIC
#define Eur_EGenTL_dsGetBufferInfo__from__DS_HANDLE__BUFFER_HANDLE euEGenTL_dsGetBufferInfoFDHBH
#define Eur_EGenTL_dsGetNumBufferParts__from__DS_HANDLE__BUFFER_HANDLE euEGenTL_dsGetNumBufferPartsFDHBH
#define Eur_EGenTL_dsGetBufferPartInfo__as__size_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAsFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__int8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAi8FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__int16_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAi16FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__int32_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAi32FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__int64_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAi64FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__uint8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAu8FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__uint16_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAu16FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__uint32_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAu32FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__uint64_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAu64FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__double__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAdFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__float__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAfFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__uint8_t_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAu8pFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__std_string__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoASsFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__void_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAvptrFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__std_vector_char__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoASvcFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__std_vector_std_string__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoASv_std_stringFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__bool8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAb8FDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__char_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoAcptrFDHBHu32BPIC
#define Eur_EGenTL_dsGetBufferPartInfo__as__InfoCommandInfo__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD euEGenTL_dsGetBufferPartInfoA_CINFOFDHBHu32BPIC
#define Eur_EGenTL_gcGetNumPortURLs__from__PORT_HANDLE euEGenTL_gcGetNumPortURLsFPH
#define Eur_EGenTL_gcGetPortURLInfo__as__size_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAsFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__int8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAi8FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__int16_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAi16FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__int32_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAi32FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__int64_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAi64FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__uint8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAu8FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__uint16_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAu16FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__uint32_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAu32FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__uint64_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAu64FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__double__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAdFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__float__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAfFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__uint8_t_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAu8pFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__std_string__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoASsFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__void_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAvptrFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__std_vector_char__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoASvcFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__std_vector_std_string__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoASv_std_stringFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__bool8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAb8FPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__char_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoAcptrFPHu32UIC
#define Eur_EGenTL_gcGetPortURLInfo__as__InfoCommandInfo__from__PORT_HANDLE__uint32_t__URL_INFO_CMD euEGenTL_gcGetPortURLInfoA_CINFOFPHu32UIC
#define Eur_EGenTL_gcReadPortStacked__from__PORT_HANDLE__std_vector_PORT_REGISTER_STACK_ENTRY euEGenTL_gcReadPortStackedFPHSv_PRSE
#define Eur_EGenTL_gcWritePortStacked__from__PORT_HANDLE__std_vector_PORT_REGISTER_STACK_ENTRY euEGenTL_gcWritePortStackedFPHSv_PRSE
#define Eur_EGenTL_ifGetParent__from__IF_HANDLE euEGenTL_ifGetParentFIH
#define Eur_EGenTL_devGetParent__from__DEV_HANDLE euEGenTL_devGetParentFDH
#define Eur_EGenTL_dsGetParent__from__DS_HANDLE euEGenTL_dsGetParentFDH
#define Eur_EGenTL_memento__from__const_char_p euEGenTL_mementoFccp
#define Eur_EGenTL_memento__from__unsigned_char__unsigned_char__const_char_p euEGenTL_mementoFucucccp
#define Eur_EGenTL_mementoWaveUp__from__unsigned_char__unsigned_char euEGenTL_mementoWaveUpFucuc
#define Eur_EGenTL_mementoWaveDown__from__unsigned_char__unsigned_char euEGenTL_mementoWaveDownFucuc
#define Eur_EGenTL_mementoWaveReset__from__unsigned_char__unsigned_char euEGenTL_mementoWaveResetFucuc
#define Eur_EGenTL_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t euEGenTL_mementoWaveValueFucucu64
#define Eur_EGenTL_mementoWaveNoValue__from__unsigned_char__unsigned_char euEGenTL_mementoWaveNoValueFucuc
#define Eur_EGenTL_getTimestampUs euEGenTL_getTimestampUs
#define Eur_EGenTL_genapiSetString__from__PORT_HANDLE__const_char_p__const_char_p euEGenTL_genapiSetStringFPHccpccp
#define Eur_EGenTL_genapiGetString__from__PORT_HANDLE__const_char_p euEGenTL_genapiGetStringFPHccp
#define Eur_EGenTL_genapiGetStringData__from__PORT_HANDLE__const_char_p__std_vector_char euEGenTL_genapiGetStringDataFPHccpSvc
#define Eur_EGenTL_genapiGetStringList__from__PORT_HANDLE__const_char_p euEGenTL_genapiGetStringListFPHccp
#define Eur_EGenTL_genapiSetInteger__from__PORT_HANDLE__const_char_p__int64_t euEGenTL_genapiSetIntegerFPHccpi64
#define Eur_EGenTL_genapiGetInteger__from__PORT_HANDLE__const_char_p euEGenTL_genapiGetIntegerFPHccp
#define Eur_EGenTL_genapiGetIntegerWithDefault__from__PORT_HANDLE__const_char_p__int64_t euEGenTL_genapiGetIntegerWithDefaultFPHccpi64
#define Eur_EGenTL_genapiSetFloat__from__PORT_HANDLE__const_char_p__double euEGenTL_genapiSetFloatFPHccpd
#define Eur_EGenTL_genapiGetFloat__from__PORT_HANDLE__const_char_p euEGenTL_genapiGetFloatFPHccp
#define Eur_EGenTL_genapiGetFloatWithDefault__from__PORT_HANDLE__const_char_p__double euEGenTL_genapiGetFloatWithDefaultFPHccpd
#define Eur_EGenTL_genapiSetRegister__from__PORT_HANDLE__const_char_p__void_p__size_t euEGenTL_genapiSetRegisterFPHccpvps
#define Eur_EGenTL_genapiGetRegister__from__PORT_HANDLE__const_char_p__void_p__size_t euEGenTL_genapiGetRegisterFPHccpvps
#define Eur_EGenTL_genapiExecuteCommand__from__PORT_HANDLE__const_char_p euEGenTL_genapiExecuteCommandFPHccp
#define Eur_EGenTL_genapiAttachEvent__from__PORT_HANDLE__uint64_t__void_p__size_t euEGenTL_genapiAttachEventFPHu64vps
#define Eur_EGenTL_genapiInvalidate__from__PORT_HANDLE__const_char_p euEGenTL_genapiInvalidateFPHccp
#define Eur_EGenTL_genapiRunScript__from__PORT_HANDLE__const_char_p__GENAPI_UI_SCRIPT_CONTEXT_p euEGenTL_genapiRunScriptFPHccpGENAPI_UI_SCRIPT_CONTEXT_p
#define Eur_EGenTL_genapiRunScript__from__PORT_HANDLE__const_char_p euEGenTL_genapiRunScriptFPHccp
#define Eur_EGenTL_genapiRunScript__from__std_vector_PORT_HANDLE__const_char_p__GENAPI_UI_SCRIPT_CONTEXT_p euEGenTL_genapiRunScriptFSv_PHccpGENAPI_UI_SCRIPT_CONTEXT_p
#define Eur_EGenTL_genapiRunScript__from__std_vector_PORT_HANDLE__const_char_p euEGenTL_genapiRunScriptFSv_PHccp
#define Eur_EGenTL_genapiInterruptScript__from__const_char_p euEGenTL_genapiInterruptScriptFccp
#define Eur_EGenTL_imageGetPixelFormatValue__from__const_char_p__unsigned_int euEGenTL_imageGetPixelFormatValueFccpui
#define Eur_EGenTL_imageGetPixelFormat__from__uint64_t euEGenTL_imageGetPixelFormatFu64
#define Eur_EGenTL_imageGetBytesPerPixel__from__const_char_p euEGenTL_imageGetBytesPerPixelFccp
#define Eur_EGenTL_imageGetBitsPerPixel__from__const_char_p euEGenTL_imageGetBitsPerPixelFccp
#define Eur_EGenTL_imageConvert__from__ImageConvertInput_p__ImageConvertOutput_p__ImageConvertROI_p euEGenTL_imageConvertF_ICI_p_ICO_pImageConvertROI_p
#define Eur_EGenTL_imageConvert__from__ImageConvertInput_p__ImageConvertOutput_p euEGenTL_imageConvertF_ICI_p_ICO_p
#define Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p__int64_t__ImageSaveToDiskParams_p euEGenTL_imageSaveToDiskF_ICI_pccpi64_ISTDP_p
#define Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p__int64_t euEGenTL_imageSaveToDiskF_ICI_pccpi64
#define Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p euEGenTL_imageSaveToDiskF_ICI_pccp
#define Eur_EGenTL_imageGet__from__ImageId__size_t_p euEGenTL_imageGetFImageIdsp
#define Eur_EGenTL_imageGet__from__ImageId euEGenTL_imageGetFImageId
#define Eur_EGenTL_imageRelease__from__ImageId euEGenTL_imageReleaseFImageId
#define Eur_EGenTL_imagePrepareBuffers__from__size_t__size_t euEGenTL_imagePrepareBuffersFss
#define Eur_EGenTL_imageTrimBuffers euEGenTL_imageTrimBuffers
#define Eur_EGenTL_isShared euEGenTL_isShared
#define Eur_EGenTL_eventKillQuiet__from__EVENT_HANDLE euEGenTL_eventKillQuietFEH
#define Eur_EGenTL_lockUpdates euEGenTL_lockUpdates
#define Eur_EGenTL_unlockUpdates euEGenTL_unlockUpdates
#define Eur_EGenTL_destroy euEGenTL_destroy
#define Eur_EGrabberDiscovery_create__from__Eur_EGenTL euEurEGDiscovery_createFEur_EGenTL
#define Eur_EGrabberDiscovery_discover__from__bool8_t euEurEGDiscovery_discoverFb8
#define Eur_EGrabberDiscovery_discover euEurEGDiscovery_discover
#define Eur_EGrabberDiscovery_egrabberCount euEurEGDiscovery_egrabberCount
#define Eur_EGrabberDiscovery_egrabbers__from__int euEurEGDiscovery_egrabbersFi
#define Eur_EGrabberDiscovery_cameraCount euEurEGDiscovery_cameraCount
#define Eur_EGrabberDiscovery_cameras__from__int__int euEurEGDiscovery_camerasFii
#define Eur_EGrabberDiscovery_cameras__from__int euEurEGDiscovery_camerasFi
#define Eur_EGrabberDiscovery_cameras__from__const_char_p__int euEurEGDiscovery_camerasFccpi
#define Eur_EGrabberDiscovery_cameras__from__const_char_p euEurEGDiscovery_camerasFccp
#define Eur_EGrabberDiscovery_interfaceCount euEurEGDiscovery_interfaceCount
#define Eur_EGrabberDiscovery_interfaceInfo__from__int euEurEGDiscovery_interfaceInfoFi
#define Eur_EGrabberDiscovery_deviceCount__from__int euEurEGDiscovery_deviceCountFi
#define Eur_EGrabberDiscovery_deviceInfo__from__int__int euEurEGDiscovery_deviceInfoFii
#define Eur_EGrabberDiscovery_streamCount__from__int__int euEurEGDiscovery_streamCountFii
#define Eur_EGrabberDiscovery_streamInfo__from__int__int__int euEurEGDiscovery_streamInfoFiii
#define Eur_EGrabberDiscovery_destroy euEurEGDiscovery_destroy
#define Eur_getEventDescription__from__EVENT_DATA_NUMID_CUSTOM eugetEventDescriptionFEDNC
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t euEGCOD_createFEur_EGenTLiiiDAFb8
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS euEGCOD_createFEur_EGenTLiiiDAF
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int euEGCOD_createFEur_EGenTLiii
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int euEGCOD_createFEur_EGenTLii
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int euEGCOD_createFEur_EGenTLi
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL euEGCOD_createFEur_EGenTL
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t euEGCOD_createFEurEGInfoDAFb8
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS euEGCOD_createFEurEGInfoDAF
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo euEGCOD_createFEurEGInfo
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS euEGCOD_createFEurEGCameraInfoDAF
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberCameraInfo euEGCOD_createFEurEGCameraInfo
#define Eur_EGrabber_CallbackOnDemand_reallocBuffers__from__size_t__size_t euEGCOD_reallocBuffersFss
#define Eur_EGrabber_CallbackOnDemand_reallocBuffers__from__size_t euEGCOD_reallocBuffersFs
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_GenTLMemory__size_t euEGCOD_announceAndQueueFEur_GenTLMemorys
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_GenTLMemory euEGCOD_announceAndQueueFEur_GenTLMemory
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemory euEGCOD_announceAndQueueFEur_UserMemory
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemoryArray euEGCOD_announceAndQueueFEur_UserMemoryArray
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemoryArray__bool8_t euEGCOD_announceAndQueueFEur_UserMemoryArrayb8
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_BusMemory euEGCOD_announceAndQueueFEur_BusMemory
#define Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_NvidiaRdmaMemory euEGCOD_announceAndQueueFEur_NvidiaRdmaMemory
#define Eur_EGrabber_CallbackOnDemand_flushBuffers__from__ACQ_QUEUE_TYPE euEGCOD_flushBuffersFAQT
#define Eur_EGrabber_CallbackOnDemand_flushBuffers euEGCOD_flushBuffers
#define Eur_EGrabber_CallbackOnDemand_resetBufferQueue euEGCOD_resetBufferQueue
#define Eur_EGrabber_CallbackOnDemand_resetBufferQueue__from__Eur_BufferIndexRange euEGCOD_resetBufferQueueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackOnDemand_queue__from__Eur_BufferIndexRange euEGCOD_queueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackOnDemand_revoke__from__Eur_BufferIndexRange euEGCOD_revokeFEur_BufferIndexRange
#define Eur_EGrabber_CallbackOnDemand_shouldReannounceBuffers euEGCOD_shouldReannounceBuffers
#define Eur_EGrabber_CallbackOnDemand_shouldReallocBuffers euEGCOD_shouldReallocBuffers
#define Eur_EGrabber_CallbackOnDemand_start__from__uint64_t__bool8_t euEGCOD_startFu64b8
#define Eur_EGrabber_CallbackOnDemand_start__from__uint64_t euEGCOD_startFu64
#define Eur_EGrabber_CallbackOnDemand_start euEGCOD_start
#define Eur_EGrabber_CallbackOnDemand_stop euEGCOD_stop
#define Eur_EGrabber_CallbackOnDemand_getWidth euEGCOD_getWidth
#define Eur_EGrabber_CallbackOnDemand_getHeight euEGCOD_getHeight
#define Eur_EGrabber_CallbackOnDemand_getPayloadSize euEGCOD_getPayloadSize
#define Eur_EGrabber_CallbackOnDemand_getPixelFormat euEGCOD_getPixelFormat
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__SystemModule__from__int32_t euEGCOD_getInfoAsOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__SystemModule__from__int32_t euEGCOD_getInfoAi8OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__SystemModule__from__int32_t euEGCOD_getInfoAi16OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__SystemModule__from__int32_t euEGCOD_getInfoAi32OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__SystemModule__from__int32_t euEGCOD_getInfoAi64OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__SystemModule__from__int32_t euEGCOD_getInfoAu8OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__SystemModule__from__int32_t euEGCOD_getInfoAu16OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__SystemModule__from__int32_t euEGCOD_getInfoAu32OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__SystemModule__from__int32_t euEGCOD_getInfoAu64OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__SystemModule__from__int32_t euEGCOD_getInfoAdOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__SystemModule__from__int32_t euEGCOD_getInfoAfOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t euEGCOD_getInfoAu8pOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__SystemModule__from__int32_t euEGCOD_getInfoASsOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__SystemModule__from__int32_t euEGCOD_getInfoAvptrOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__SystemModule__from__int32_t euEGCOD_getInfoASvcOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t euEGCOD_getInfoASv_std_stringOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__SystemModule__from__int32_t euEGCOD_getInfoAb8OSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__SystemModule__from__int32_t euEGCOD_getInfoAcptrOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t euEGCOD_getInfoA_CINFOOSystemModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAi8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAi16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAi32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAi64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAu8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAu16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAu32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAu64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__InterfaceModule__from__int32_t euEGCOD_getInfoAdOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__InterfaceModule__from__int32_t euEGCOD_getInfoAfOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t euEGCOD_getInfoAu8pOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__InterfaceModule__from__int32_t euEGCOD_getInfoASsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t euEGCOD_getInfoAvptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t euEGCOD_getInfoASvcOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t euEGCOD_getInfoASv_std_stringOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t euEGCOD_getInfoAb8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t euEGCOD_getInfoAcptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t euEGCOD_getInfoA_CINFOOInterfaceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAsODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAi8ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAi16ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAi32ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAi64ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAu8ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAu16ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAu32ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAu64ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__DeviceModule__from__int32_t euEGCOD_getInfoAdODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__DeviceModule__from__int32_t euEGCOD_getInfoAfODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t euEGCOD_getInfoAu8pODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__DeviceModule__from__int32_t euEGCOD_getInfoASsODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__DeviceModule__from__int32_t euEGCOD_getInfoAvptrODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t euEGCOD_getInfoASvcODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t euEGCOD_getInfoASv_std_stringODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__DeviceModule__from__int32_t euEGCOD_getInfoAb8ODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__DeviceModule__from__int32_t euEGCOD_getInfoAcptrODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t euEGCOD_getInfoA_CINFOODeviceModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__StreamModule__from__int32_t euEGCOD_getInfoAsOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__StreamModule__from__int32_t euEGCOD_getInfoAi8OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__StreamModule__from__int32_t euEGCOD_getInfoAi16OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__StreamModule__from__int32_t euEGCOD_getInfoAi32OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__StreamModule__from__int32_t euEGCOD_getInfoAi64OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__StreamModule__from__int32_t euEGCOD_getInfoAu8OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__StreamModule__from__int32_t euEGCOD_getInfoAu16OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__StreamModule__from__int32_t euEGCOD_getInfoAu32OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__StreamModule__from__int32_t euEGCOD_getInfoAu64OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__StreamModule__from__int32_t euEGCOD_getInfoAdOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__StreamModule__from__int32_t euEGCOD_getInfoAfOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t euEGCOD_getInfoAu8pOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__StreamModule__from__int32_t euEGCOD_getInfoASsOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__StreamModule__from__int32_t euEGCOD_getInfoAvptrOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__StreamModule__from__int32_t euEGCOD_getInfoASvcOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t euEGCOD_getInfoASv_std_stringOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__StreamModule__from__int32_t euEGCOD_getInfoAb8OStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__StreamModule__from__int32_t euEGCOD_getInfoAcptrOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t euEGCOD_getInfoA_CINFOOStreamModuleFi32
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAsFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAi8FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAi16FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAi32FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAi64FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAu8FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAu16FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAu32FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAu64FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAdFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAfFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAu8pFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoASsFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAvptrFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoASvcFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoASv_std_stringFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAb8FsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoAcptrFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD euEGCOD_getBufferInfoA_CINFOFsBIC
#define Eur_EGrabber_CallbackOnDemand_getBufferData__from__size_t euEGCOD_getBufferDataFs
#define Eur_EGrabber_CallbackOnDemand_isOpen__on__SystemModule euEGCOD_isOpenOSystemModule
#define Eur_EGrabber_CallbackOnDemand_isOpen__on__InterfaceModule euEGCOD_isOpenOInterfaceModule
#define Eur_EGrabber_CallbackOnDemand_isOpen__on__DeviceModule euEGCOD_isOpenODeviceModule
#define Eur_EGrabber_CallbackOnDemand_isOpen__on__StreamModule euEGCOD_isOpenOStreamModule
#define Eur_EGrabber_CallbackOnDemand_isOpen__on__RemoteModule euEGCOD_isOpenORemoteModule
#define Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t euEGCOD_gcReadPortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGCOD_gcReadPortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGCOD_gcReadPortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t euEGCOD_gcReadPortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGCOD_gcReadPortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t euEGCOD_gcWritePortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGCOD_gcWritePortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGCOD_gcWritePortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t euEGCOD_gcWritePortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGCOD_gcWritePortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_gcReadPort__on__SystemModule__from__uint64_t__size_t euEGCOD_gcReadPortOSystemModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPort__on__InterfaceModule__from__uint64_t__size_t euEGCOD_gcReadPortOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPort__on__DeviceModule__from__uint64_t__size_t euEGCOD_gcReadPortODeviceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPort__on__StreamModule__from__uint64_t__size_t euEGCOD_gcReadPortOStreamModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPort__on__RemoteModule__from__uint64_t__size_t euEGCOD_gcReadPortORemoteModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char euEGCOD_gcWritePortOSystemModuleFu64Svc
#define Eur_EGrabber_CallbackOnDemand_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char euEGCOD_gcWritePortOInterfaceModuleFu64Svc
#define Eur_EGrabber_CallbackOnDemand_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char euEGCOD_gcWritePortODeviceModuleFu64Svc
#define Eur_EGrabber_CallbackOnDemand_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char euEGCOD_gcWritePortOStreamModuleFu64Svc
#define Eur_EGrabber_CallbackOnDemand_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char euEGCOD_gcWritePortORemoteModuleFu64Svc
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAsOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAi8OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAi16OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAi32OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAi64OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAu8OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAu16OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAu32OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAu64OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAdOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAfOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAu8pOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueASsOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAvptrOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueASvcOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueASv_std_stringOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAb8OSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueAcptrOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t euEGCOD_gcReadPortValueA_CINFOOSystemModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAi8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAi16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAi32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAi64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAu8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAu16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAu32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAu64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAdOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAfOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAu8pOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueASsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAvptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueASvcOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueASv_std_stringOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAb8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueAcptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t euEGCOD_gcReadPortValueA_CINFOOInterfaceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAsODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAi8ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAi16ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAi32ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAi64ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAu8ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAu16ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAu32ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAu64ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAdODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAfODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAu8pODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueASsODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAvptrODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueASvcODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueASv_std_stringODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAb8ODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueAcptrODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t euEGCOD_gcReadPortValueA_CINFOODeviceModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAsOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAi8OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAi16OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAi32OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAi64OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAu8OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAu16OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAu32OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAu64OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAdOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAfOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAu8pOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueASsOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAvptrOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueASvcOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueASv_std_stringOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAb8OStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueAcptrOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t euEGCOD_gcReadPortValueA_CINFOOStreamModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAsORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAi8ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAi16ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAi32ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAi64ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAu8ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAu16ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAu32ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAu64ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAdORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAfORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAu8pORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueASsORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAvptrORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueASvcORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueASv_std_stringORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAb8ORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueAcptrORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t euEGCOD_gcReadPortValueA_CINFOORemoteModuleFu64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t euEGCOD_gcWritePortValueWsOSystemModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t euEGCOD_gcWritePortValueWi8OSystemModuleFu64i8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t euEGCOD_gcWritePortValueWi16OSystemModuleFu64i16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t euEGCOD_gcWritePortValueWi32OSystemModuleFu64i32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t euEGCOD_gcWritePortValueWi64OSystemModuleFu64i64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t euEGCOD_gcWritePortValueWu8OSystemModuleFu64u8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t euEGCOD_gcWritePortValueWu16OSystemModuleFu64u16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t euEGCOD_gcWritePortValueWu32OSystemModuleFu64u32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t euEGCOD_gcWritePortValueWu64OSystemModuleFu64u64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double euEGCOD_gcWritePortValueWdOSystemModuleFu64d
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float euEGCOD_gcWritePortValueWfOSystemModuleFu64f
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t euEGCOD_gcWritePortValueWsOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t euEGCOD_gcWritePortValueWi8OInterfaceModuleFu64i8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t euEGCOD_gcWritePortValueWi16OInterfaceModuleFu64i16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t euEGCOD_gcWritePortValueWi32OInterfaceModuleFu64i32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t euEGCOD_gcWritePortValueWi64OInterfaceModuleFu64i64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t euEGCOD_gcWritePortValueWu8OInterfaceModuleFu64u8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t euEGCOD_gcWritePortValueWu16OInterfaceModuleFu64u16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t euEGCOD_gcWritePortValueWu32OInterfaceModuleFu64u32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t euEGCOD_gcWritePortValueWu64OInterfaceModuleFu64u64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double euEGCOD_gcWritePortValueWdOInterfaceModuleFu64d
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float euEGCOD_gcWritePortValueWfOInterfaceModuleFu64f
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t euEGCOD_gcWritePortValueWsODeviceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t euEGCOD_gcWritePortValueWi8ODeviceModuleFu64i8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t euEGCOD_gcWritePortValueWi16ODeviceModuleFu64i16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t euEGCOD_gcWritePortValueWi32ODeviceModuleFu64i32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t euEGCOD_gcWritePortValueWi64ODeviceModuleFu64i64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t euEGCOD_gcWritePortValueWu8ODeviceModuleFu64u8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t euEGCOD_gcWritePortValueWu16ODeviceModuleFu64u16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t euEGCOD_gcWritePortValueWu32ODeviceModuleFu64u32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t euEGCOD_gcWritePortValueWu64ODeviceModuleFu64u64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double euEGCOD_gcWritePortValueWdODeviceModuleFu64d
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float euEGCOD_gcWritePortValueWfODeviceModuleFu64f
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t euEGCOD_gcWritePortValueWsOStreamModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t euEGCOD_gcWritePortValueWi8OStreamModuleFu64i8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t euEGCOD_gcWritePortValueWi16OStreamModuleFu64i16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t euEGCOD_gcWritePortValueWi32OStreamModuleFu64i32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t euEGCOD_gcWritePortValueWi64OStreamModuleFu64i64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t euEGCOD_gcWritePortValueWu8OStreamModuleFu64u8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t euEGCOD_gcWritePortValueWu16OStreamModuleFu64u16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t euEGCOD_gcWritePortValueWu32OStreamModuleFu64u32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t euEGCOD_gcWritePortValueWu64OStreamModuleFu64u64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double euEGCOD_gcWritePortValueWdOStreamModuleFu64d
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float euEGCOD_gcWritePortValueWfOStreamModuleFu64f
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t euEGCOD_gcWritePortValueWsORemoteModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t euEGCOD_gcWritePortValueWi8ORemoteModuleFu64i8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t euEGCOD_gcWritePortValueWi16ORemoteModuleFu64i16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t euEGCOD_gcWritePortValueWi32ORemoteModuleFu64i32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t euEGCOD_gcWritePortValueWi64ORemoteModuleFu64i64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t euEGCOD_gcWritePortValueWu8ORemoteModuleFu64u8
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t euEGCOD_gcWritePortValueWu16ORemoteModuleFu64u16
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t euEGCOD_gcWritePortValueWu32ORemoteModuleFu64u32
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t euEGCOD_gcWritePortValueWu64ORemoteModuleFu64u64
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double euEGCOD_gcWritePortValueWdORemoteModuleFu64d
#define Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float euEGCOD_gcWritePortValueWfORemoteModuleFu64f
#define Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__SystemModule__from__uint64_t__size_t euEGCOD_gcReadPortStringOSystemModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t euEGCOD_gcReadPortStringOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__DeviceModule__from__uint64_t__size_t euEGCOD_gcReadPortStringODeviceModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__StreamModule__from__uint64_t__size_t euEGCOD_gcReadPortStringOStreamModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__RemoteModule__from__uint64_t__size_t euEGCOD_gcReadPortStringORemoteModuleFu64s
#define Eur_EGrabber_CallbackOnDemand_getInteger__on__SystemModule__from__const_char_p euEGCOD_getIntegerOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getInteger__on__InterfaceModule__from__const_char_p euEGCOD_getIntegerOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getInteger__on__DeviceModule__from__const_char_p euEGCOD_getIntegerODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getInteger__on__StreamModule__from__const_char_p euEGCOD_getIntegerOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getInteger__on__RemoteModule__from__const_char_p euEGCOD_getIntegerORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getFloat__on__SystemModule__from__const_char_p euEGCOD_getFloatOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getFloat__on__InterfaceModule__from__const_char_p euEGCOD_getFloatOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getFloat__on__DeviceModule__from__const_char_p euEGCOD_getFloatODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getFloat__on__StreamModule__from__const_char_p euEGCOD_getFloatOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getFloat__on__RemoteModule__from__const_char_p euEGCOD_getFloatORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getString__on__SystemModule__from__const_char_p euEGCOD_getStringOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getString__on__InterfaceModule__from__const_char_p euEGCOD_getStringOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getString__on__DeviceModule__from__const_char_p euEGCOD_getStringODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getString__on__StreamModule__from__const_char_p euEGCOD_getStringOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getString__on__RemoteModule__from__const_char_p euEGCOD_getStringORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getStringData__on__SystemModule__from__const_char_p__std_vector_char euEGCOD_getStringDataOSystemModuleFccpSvc
#define Eur_EGrabber_CallbackOnDemand_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char euEGCOD_getStringDataOInterfaceModuleFccpSvc
#define Eur_EGrabber_CallbackOnDemand_getStringData__on__DeviceModule__from__const_char_p__std_vector_char euEGCOD_getStringDataODeviceModuleFccpSvc
#define Eur_EGrabber_CallbackOnDemand_getStringData__on__StreamModule__from__const_char_p__std_vector_char euEGCOD_getStringDataOStreamModuleFccpSvc
#define Eur_EGrabber_CallbackOnDemand_getStringData__on__RemoteModule__from__const_char_p__std_vector_char euEGCOD_getStringDataORemoteModuleFccpSvc
#define Eur_EGrabber_CallbackOnDemand_getStringList__on__SystemModule__from__const_char_p euEGCOD_getStringListOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getStringList__on__InterfaceModule__from__const_char_p euEGCOD_getStringListOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getStringList__on__DeviceModule__from__const_char_p euEGCOD_getStringListODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getStringList__on__StreamModule__from__const_char_p euEGCOD_getStringListOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getStringList__on__RemoteModule__from__const_char_p euEGCOD_getStringListORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_getRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGCOD_getRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGCOD_getRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGCOD_getRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_getRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGCOD_getRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGCOD_getRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_setInteger__on__SystemModule__from__const_char_p__int64_t euEGCOD_setIntegerOSystemModuleFccpi64
#define Eur_EGrabber_CallbackOnDemand_setInteger__on__InterfaceModule__from__const_char_p__int64_t euEGCOD_setIntegerOInterfaceModuleFccpi64
#define Eur_EGrabber_CallbackOnDemand_setInteger__on__DeviceModule__from__const_char_p__int64_t euEGCOD_setIntegerODeviceModuleFccpi64
#define Eur_EGrabber_CallbackOnDemand_setInteger__on__StreamModule__from__const_char_p__int64_t euEGCOD_setIntegerOStreamModuleFccpi64
#define Eur_EGrabber_CallbackOnDemand_setInteger__on__RemoteModule__from__const_char_p__int64_t euEGCOD_setIntegerORemoteModuleFccpi64
#define Eur_EGrabber_CallbackOnDemand_setFloat__on__SystemModule__from__const_char_p__double euEGCOD_setFloatOSystemModuleFccpd
#define Eur_EGrabber_CallbackOnDemand_setFloat__on__InterfaceModule__from__const_char_p__double euEGCOD_setFloatOInterfaceModuleFccpd
#define Eur_EGrabber_CallbackOnDemand_setFloat__on__DeviceModule__from__const_char_p__double euEGCOD_setFloatODeviceModuleFccpd
#define Eur_EGrabber_CallbackOnDemand_setFloat__on__StreamModule__from__const_char_p__double euEGCOD_setFloatOStreamModuleFccpd
#define Eur_EGrabber_CallbackOnDemand_setFloat__on__RemoteModule__from__const_char_p__double euEGCOD_setFloatORemoteModuleFccpd
#define Eur_EGrabber_CallbackOnDemand_setString__on__SystemModule__from__const_char_p__const_char_p euEGCOD_setStringOSystemModuleFccpccp
#define Eur_EGrabber_CallbackOnDemand_setString__on__InterfaceModule__from__const_char_p__const_char_p euEGCOD_setStringOInterfaceModuleFccpccp
#define Eur_EGrabber_CallbackOnDemand_setString__on__DeviceModule__from__const_char_p__const_char_p euEGCOD_setStringODeviceModuleFccpccp
#define Eur_EGrabber_CallbackOnDemand_setString__on__StreamModule__from__const_char_p__const_char_p euEGCOD_setStringOStreamModuleFccpccp
#define Eur_EGrabber_CallbackOnDemand_setString__on__RemoteModule__from__const_char_p__const_char_p euEGCOD_setStringORemoteModuleFccpccp
#define Eur_EGrabber_CallbackOnDemand_setRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGCOD_setRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGCOD_setRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGCOD_setRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_setRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGCOD_setRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGCOD_setRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackOnDemand_execute__on__SystemModule__from__const_char_p euEGCOD_executeOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_execute__on__InterfaceModule__from__const_char_p euEGCOD_executeOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_execute__on__DeviceModule__from__const_char_p euEGCOD_executeODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_execute__on__StreamModule__from__const_char_p euEGCOD_executeOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_execute__on__RemoteModule__from__const_char_p euEGCOD_executeORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t euEGCOD_attachEventOSystemModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t euEGCOD_attachEventOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t euEGCOD_attachEventODeviceModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t euEGCOD_attachEventOStreamModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t euEGCOD_attachEventORemoteModuleFu64vps
#define Eur_EGrabber_CallbackOnDemand_invalidate__on__SystemModule__from__const_char_p euEGCOD_invalidateOSystemModuleFccp
#define Eur_EGrabber_CallbackOnDemand_invalidate__on__InterfaceModule__from__const_char_p euEGCOD_invalidateOInterfaceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_invalidate__on__DeviceModule__from__const_char_p euEGCOD_invalidateODeviceModuleFccp
#define Eur_EGrabber_CallbackOnDemand_invalidate__on__StreamModule__from__const_char_p euEGCOD_invalidateOStreamModuleFccp
#define Eur_EGrabber_CallbackOnDemand_invalidate__on__RemoteModule__from__const_char_p euEGCOD_invalidateORemoteModuleFccp
#define Eur_EGrabber_CallbackOnDemand_runScript__from__const_char_p__void_p euEGCOD_runScriptFccpvp
#define Eur_EGrabber_CallbackOnDemand_runScript__from__const_char_p euEGCOD_runScriptFccp
#define Eur_EGrabber_CallbackOnDemand_interruptScript__from__const_char_p euEGCOD_interruptScriptFccp
#define Eur_EGrabber_CallbackOnDemand_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string euEGCOD_onScriptUiCallbackFccpvpSm_std_string_std_stringSs
#define Eur_EGrabber_CallbackOnDemand_memento__from__const_char_p euEGCOD_mementoFccp
#define Eur_EGrabber_CallbackOnDemand_memento__from__unsigned_char__unsigned_char__const_char_p euEGCOD_mementoFucucccp
#define Eur_EGrabber_CallbackOnDemand_mementoWaveUp__from__unsigned_char__unsigned_char euEGCOD_mementoWaveUpFucuc
#define Eur_EGrabber_CallbackOnDemand_mementoWaveDown__from__unsigned_char__unsigned_char euEGCOD_mementoWaveDownFucuc
#define Eur_EGrabber_CallbackOnDemand_mementoWaveReset__from__unsigned_char__unsigned_char euEGCOD_mementoWaveResetFucuc
#define Eur_EGrabber_CallbackOnDemand_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t euEGCOD_mementoWaveValueFucucu64
#define Eur_EGrabber_CallbackOnDemand_mementoWaveNoValue__from__unsigned_char__unsigned_char euEGCOD_mementoWaveNoValueFucuc
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__NewBufferData euEGCOD_enableEventWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__IoToolboxData euEGCOD_enableEventWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__CicData euEGCOD_enableEventWCicData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__DataStreamData euEGCOD_enableEventWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__CxpInterfaceData euEGCOD_enableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__DeviceErrorData euEGCOD_enableEventWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__CxpDeviceData euEGCOD_enableEventWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__RemoteDeviceData euEGCOD_enableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_enableEvent__with__All euEGCOD_enableEventWAll
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__NewBufferData euEGCOD_disableEventWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__IoToolboxData euEGCOD_disableEventWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__CicData euEGCOD_disableEventWCicData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__DataStreamData euEGCOD_disableEventWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__CxpInterfaceData euEGCOD_disableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__DeviceErrorData euEGCOD_disableEventWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__CxpDeviceData euEGCOD_disableEventWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__RemoteDeviceData euEGCOD_disableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_disableEvent__with__All euEGCOD_disableEventWAll
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__NewBufferData euEGCOD_flushEventWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__IoToolboxData euEGCOD_flushEventWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__CicData euEGCOD_flushEventWCicData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__DataStreamData euEGCOD_flushEventWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__CxpInterfaceData euEGCOD_flushEventWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__DeviceErrorData euEGCOD_flushEventWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__CxpDeviceData euEGCOD_flushEventWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__RemoteDeviceData euEGCOD_flushEventWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_flushEvent__with__All euEGCOD_flushEventWAll
#define Eur_EGrabber_CallbackOnDemand_pop__from__uint64_t euEGCOD_popFu64
#define Eur_EGrabber_CallbackOnDemand_pop euEGCOD_pop
#define Eur_EGrabber_CallbackOnDemand_cancelPop euEGCOD_cancelPop
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__NewBufferData__from__uint64_t euEGCOD_processEventWNewBufferDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__IoToolboxData__from__uint64_t euEGCOD_processEventWIoToolboxDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CicData__from__uint64_t euEGCOD_processEventWCicDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__DataStreamData__from__uint64_t euEGCOD_processEventWDataStreamDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpInterfaceData__from__uint64_t euEGCOD_processEventWCxpInterfaceDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__DeviceErrorData__from__uint64_t euEGCOD_processEventWDeviceErrorDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpDeviceData__from__uint64_t euEGCOD_processEventWCxpDeviceDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__RemoteDeviceData__from__uint64_t euEGCOD_processEventWRemoteDeviceDataFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__Any__from__uint64_t euEGCOD_processEventWAnyFu64
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__NewBufferData euEGCOD_processEventWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__IoToolboxData euEGCOD_processEventWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CicData euEGCOD_processEventWCicData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__DataStreamData euEGCOD_processEventWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpInterfaceData euEGCOD_processEventWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__DeviceErrorData euEGCOD_processEventWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpDeviceData euEGCOD_processEventWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__RemoteDeviceData euEGCOD_processEventWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_processEvent__with__Any euEGCOD_processEventWAny
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__NewBufferData euEGCOD_cancelEventWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__IoToolboxData euEGCOD_cancelEventWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CicData euEGCOD_cancelEventWCicData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__DataStreamData euEGCOD_cancelEventWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CxpInterfaceData euEGCOD_cancelEventWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__DeviceErrorData euEGCOD_cancelEventWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CxpDeviceData euEGCOD_cancelEventWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__RemoteDeviceData euEGCOD_cancelEventWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_cancelEvent__with__Any euEGCOD_cancelEventWAny
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__NewBufferData euEGCOD_getPendingEventCountWNewBufferData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__IoToolboxData euEGCOD_getPendingEventCountWIoToolboxData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CicData euEGCOD_getPendingEventCountWCicData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__DataStreamData euEGCOD_getPendingEventCountWDataStreamData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CxpInterfaceData euEGCOD_getPendingEventCountWCxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__DeviceErrorData euEGCOD_getPendingEventCountWDeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CxpDeviceData euEGCOD_getPendingEventCountWCxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__RemoteDeviceData euEGCOD_getPendingEventCountWRemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__Any euEGCOD_getPendingEventCountWAny
#define Eur_EGrabber_CallbackOnDemand_onNewBufferEvent__from__Eur_NewBufferData euEGCOD_onNewBufferEventFEur_NewBufferData
#define Eur_EGrabber_CallbackOnDemand_onIoToolboxEvent__from__Eur_IoToolboxData euEGCOD_onIoToolboxEventFEur_IoToolboxData
#define Eur_EGrabber_CallbackOnDemand_onCicEvent__from__Eur_CicData euEGCOD_onCicEventFEur_CicData
#define Eur_EGrabber_CallbackOnDemand_onDataStreamEvent__from__Eur_DataStreamData euEGCOD_onDataStreamEventFEur_DataStreamData
#define Eur_EGrabber_CallbackOnDemand_onCxpInterfaceEvent__from__Eur_CxpInterfaceData euEGCOD_onCxpInterfaceEventFEur_CxpInterfaceData
#define Eur_EGrabber_CallbackOnDemand_onDeviceErrorEvent__from__Eur_DeviceErrorData euEGCOD_onDeviceErrorEventFEur_DeviceErrorData
#define Eur_EGrabber_CallbackOnDemand_onCxpDeviceEvent__from__Eur_CxpDeviceData euEGCOD_onCxpDeviceEventFEur_CxpDeviceData
#define Eur_EGrabber_CallbackOnDemand_onRemoteDeviceEvent__from__Eur_RemoteDeviceData euEGCOD_onRemoteDeviceEventFEur_RemoteDeviceData
#define Eur_EGrabber_CallbackOnDemand_getLastEventGrabberIndex euEGCOD_getLastEventGrabberIndex
#define Eur_EGrabber_CallbackOnDemand_shutdown euEGCOD_shutdown
#define Eur_EGrabber_CallbackOnDemand_push__from__Eur_NewBufferData euEGCOD_pushFEur_NewBufferData
#define Eur_EGrabber_CallbackOnDemand_popEventFilter__from__size_t__uint64_t__Eur_OneOfAll__int_p euEGCOD_popEventFilterFsu64EurOOAi_p
#define Eur_EGrabber_CallbackOnDemand_processEventFilter__from__size_t__uint64_t euEGCOD_processEventFilterFsu64
#define Eur_EGrabber_CallbackOnDemand_processEventFilter__from__size_t euEGCOD_processEventFilterFs
#define Eur_EGrabber_CallbackOnDemand_cancelEventFilter__from__size_t euEGCOD_cancelEventFilterFs
#define Eur_EGrabber_CallbackOnDemand_getPendingEventCountFilter__from__size_t euEGCOD_getPendingEventCountFilterFs
#define Eur_EGrabber_CallbackOnDemand_announceBusBuffer__from__uint64_t__size_t__void_p euEGCOD_announceBusBufferFu64svp
#define Eur_EGrabber_CallbackOnDemand_announceBusBuffer__from__uint64_t__size_t euEGCOD_announceBusBufferFu64s
#define Eur_EGrabber_CallbackOnDemand_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p euEGCOD_announceNvidiaRdmaBufferFvpsvp
#define Eur_EGrabber_CallbackOnDemand_announceNvidiaRdmaBuffer__from__void_p__size_t euEGCOD_announceNvidiaRdmaBufferFvps
#define Eur_EGrabber_CallbackOnDemand_getSystemPort__from__int euEGCOD_getSystemPortFi
#define Eur_EGrabber_CallbackOnDemand_getInterfacePort__from__int euEGCOD_getInterfacePortFi
#define Eur_EGrabber_CallbackOnDemand_getDevicePort__from__int euEGCOD_getDevicePortFi
#define Eur_EGrabber_CallbackOnDemand_getStreamPort__from__int euEGCOD_getStreamPortFi
#define Eur_EGrabber_CallbackOnDemand_getRemotePort__from__int euEGCOD_getRemotePortFi
#define Eur_EGrabber_CallbackOnDemand_destroy euEGCOD_destroy
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t euEGST_createFEur_EGenTLiiiDAFb8
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS euEGST_createFEur_EGenTLiiiDAF
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int euEGST_createFEur_EGenTLiii
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int euEGST_createFEur_EGenTLii
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int euEGST_createFEur_EGenTLi
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL euEGST_createFEur_EGenTL
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t euEGST_createFEurEGInfoDAFb8
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS euEGST_createFEurEGInfoDAF
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo euEGST_createFEurEGInfo
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS euEGST_createFEurEGCameraInfoDAF
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberCameraInfo euEGST_createFEurEGCameraInfo
#define Eur_EGrabber_CallbackSingleThread_reallocBuffers__from__size_t__size_t euEGST_reallocBuffersFss
#define Eur_EGrabber_CallbackSingleThread_reallocBuffers__from__size_t euEGST_reallocBuffersFs
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_GenTLMemory__size_t euEGST_announceAndQueueFEur_GenTLMemorys
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_GenTLMemory euEGST_announceAndQueueFEur_GenTLMemory
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemory euEGST_announceAndQueueFEur_UserMemory
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemoryArray euEGST_announceAndQueueFEur_UserMemoryArray
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemoryArray__bool8_t euEGST_announceAndQueueFEur_UserMemoryArrayb8
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_BusMemory euEGST_announceAndQueueFEur_BusMemory
#define Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_NvidiaRdmaMemory euEGST_announceAndQueueFEur_NvidiaRdmaMemory
#define Eur_EGrabber_CallbackSingleThread_flushBuffers__from__ACQ_QUEUE_TYPE euEGST_flushBuffersFAQT
#define Eur_EGrabber_CallbackSingleThread_flushBuffers euEGST_flushBuffers
#define Eur_EGrabber_CallbackSingleThread_resetBufferQueue euEGST_resetBufferQueue
#define Eur_EGrabber_CallbackSingleThread_resetBufferQueue__from__Eur_BufferIndexRange euEGST_resetBufferQueueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackSingleThread_queue__from__Eur_BufferIndexRange euEGST_queueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackSingleThread_revoke__from__Eur_BufferIndexRange euEGST_revokeFEur_BufferIndexRange
#define Eur_EGrabber_CallbackSingleThread_shouldReannounceBuffers euEGST_shouldReannounceBuffers
#define Eur_EGrabber_CallbackSingleThread_shouldReallocBuffers euEGST_shouldReallocBuffers
#define Eur_EGrabber_CallbackSingleThread_start__from__uint64_t__bool8_t euEGST_startFu64b8
#define Eur_EGrabber_CallbackSingleThread_start__from__uint64_t euEGST_startFu64
#define Eur_EGrabber_CallbackSingleThread_start euEGST_start
#define Eur_EGrabber_CallbackSingleThread_stop euEGST_stop
#define Eur_EGrabber_CallbackSingleThread_getWidth euEGST_getWidth
#define Eur_EGrabber_CallbackSingleThread_getHeight euEGST_getHeight
#define Eur_EGrabber_CallbackSingleThread_getPayloadSize euEGST_getPayloadSize
#define Eur_EGrabber_CallbackSingleThread_getPixelFormat euEGST_getPixelFormat
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__SystemModule__from__int32_t euEGST_getInfoAsOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__SystemModule__from__int32_t euEGST_getInfoAi8OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__SystemModule__from__int32_t euEGST_getInfoAi16OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__SystemModule__from__int32_t euEGST_getInfoAi32OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__SystemModule__from__int32_t euEGST_getInfoAi64OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__SystemModule__from__int32_t euEGST_getInfoAu8OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__SystemModule__from__int32_t euEGST_getInfoAu16OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__SystemModule__from__int32_t euEGST_getInfoAu32OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__SystemModule__from__int32_t euEGST_getInfoAu64OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__SystemModule__from__int32_t euEGST_getInfoAdOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__SystemModule__from__int32_t euEGST_getInfoAfOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t euEGST_getInfoAu8pOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__SystemModule__from__int32_t euEGST_getInfoASsOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__SystemModule__from__int32_t euEGST_getInfoAvptrOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__SystemModule__from__int32_t euEGST_getInfoASvcOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t euEGST_getInfoASv_std_stringOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__SystemModule__from__int32_t euEGST_getInfoAb8OSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__SystemModule__from__int32_t euEGST_getInfoAcptrOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t euEGST_getInfoA_CINFOOSystemModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__InterfaceModule__from__int32_t euEGST_getInfoAsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__InterfaceModule__from__int32_t euEGST_getInfoAi8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__InterfaceModule__from__int32_t euEGST_getInfoAi16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__InterfaceModule__from__int32_t euEGST_getInfoAi32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__InterfaceModule__from__int32_t euEGST_getInfoAi64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t euEGST_getInfoAu8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t euEGST_getInfoAu16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t euEGST_getInfoAu32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t euEGST_getInfoAu64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__InterfaceModule__from__int32_t euEGST_getInfoAdOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__InterfaceModule__from__int32_t euEGST_getInfoAfOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t euEGST_getInfoAu8pOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__InterfaceModule__from__int32_t euEGST_getInfoASsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t euEGST_getInfoAvptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t euEGST_getInfoASvcOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t euEGST_getInfoASv_std_stringOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t euEGST_getInfoAb8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t euEGST_getInfoAcptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t euEGST_getInfoA_CINFOOInterfaceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__DeviceModule__from__int32_t euEGST_getInfoAsODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__DeviceModule__from__int32_t euEGST_getInfoAi8ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__DeviceModule__from__int32_t euEGST_getInfoAi16ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__DeviceModule__from__int32_t euEGST_getInfoAi32ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__DeviceModule__from__int32_t euEGST_getInfoAi64ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__DeviceModule__from__int32_t euEGST_getInfoAu8ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__DeviceModule__from__int32_t euEGST_getInfoAu16ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__DeviceModule__from__int32_t euEGST_getInfoAu32ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__DeviceModule__from__int32_t euEGST_getInfoAu64ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__DeviceModule__from__int32_t euEGST_getInfoAdODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__DeviceModule__from__int32_t euEGST_getInfoAfODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t euEGST_getInfoAu8pODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__DeviceModule__from__int32_t euEGST_getInfoASsODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__DeviceModule__from__int32_t euEGST_getInfoAvptrODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t euEGST_getInfoASvcODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t euEGST_getInfoASv_std_stringODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__DeviceModule__from__int32_t euEGST_getInfoAb8ODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__DeviceModule__from__int32_t euEGST_getInfoAcptrODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t euEGST_getInfoA_CINFOODeviceModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__StreamModule__from__int32_t euEGST_getInfoAsOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__StreamModule__from__int32_t euEGST_getInfoAi8OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__StreamModule__from__int32_t euEGST_getInfoAi16OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__StreamModule__from__int32_t euEGST_getInfoAi32OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__StreamModule__from__int32_t euEGST_getInfoAi64OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__StreamModule__from__int32_t euEGST_getInfoAu8OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__StreamModule__from__int32_t euEGST_getInfoAu16OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__StreamModule__from__int32_t euEGST_getInfoAu32OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__StreamModule__from__int32_t euEGST_getInfoAu64OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__StreamModule__from__int32_t euEGST_getInfoAdOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__StreamModule__from__int32_t euEGST_getInfoAfOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t euEGST_getInfoAu8pOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__StreamModule__from__int32_t euEGST_getInfoASsOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__StreamModule__from__int32_t euEGST_getInfoAvptrOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__StreamModule__from__int32_t euEGST_getInfoASvcOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t euEGST_getInfoASv_std_stringOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__StreamModule__from__int32_t euEGST_getInfoAb8OStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__StreamModule__from__int32_t euEGST_getInfoAcptrOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t euEGST_getInfoA_CINFOOStreamModuleFi32
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAsFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAi8FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAi16FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAi32FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAi64FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAu8FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAu16FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAu32FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAu64FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAdFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAfFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAu8pFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoASsFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAvptrFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoASvcFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoASv_std_stringFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAb8FsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoAcptrFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD euEGST_getBufferInfoA_CINFOFsBIC
#define Eur_EGrabber_CallbackSingleThread_getBufferData__from__size_t euEGST_getBufferDataFs
#define Eur_EGrabber_CallbackSingleThread_isOpen__on__SystemModule euEGST_isOpenOSystemModule
#define Eur_EGrabber_CallbackSingleThread_isOpen__on__InterfaceModule euEGST_isOpenOInterfaceModule
#define Eur_EGrabber_CallbackSingleThread_isOpen__on__DeviceModule euEGST_isOpenODeviceModule
#define Eur_EGrabber_CallbackSingleThread_isOpen__on__StreamModule euEGST_isOpenOStreamModule
#define Eur_EGrabber_CallbackSingleThread_isOpen__on__RemoteModule euEGST_isOpenORemoteModule
#define Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t euEGST_gcReadPortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGST_gcReadPortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGST_gcReadPortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t euEGST_gcReadPortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGST_gcReadPortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t euEGST_gcWritePortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGST_gcWritePortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGST_gcWritePortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t euEGST_gcWritePortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGST_gcWritePortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_gcReadPort__on__SystemModule__from__uint64_t__size_t euEGST_gcReadPortOSystemModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPort__on__InterfaceModule__from__uint64_t__size_t euEGST_gcReadPortOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPort__on__DeviceModule__from__uint64_t__size_t euEGST_gcReadPortODeviceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPort__on__StreamModule__from__uint64_t__size_t euEGST_gcReadPortOStreamModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPort__on__RemoteModule__from__uint64_t__size_t euEGST_gcReadPortORemoteModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char euEGST_gcWritePortOSystemModuleFu64Svc
#define Eur_EGrabber_CallbackSingleThread_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char euEGST_gcWritePortOInterfaceModuleFu64Svc
#define Eur_EGrabber_CallbackSingleThread_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char euEGST_gcWritePortODeviceModuleFu64Svc
#define Eur_EGrabber_CallbackSingleThread_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char euEGST_gcWritePortOStreamModuleFu64Svc
#define Eur_EGrabber_CallbackSingleThread_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char euEGST_gcWritePortORemoteModuleFu64Svc
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAsOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAi8OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAi16OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAi32OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAi64OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAu8OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAu16OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAu32OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAu64OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAdOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAfOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAu8pOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t euEGST_gcReadPortValueASsOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAvptrOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t euEGST_gcReadPortValueASvcOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t euEGST_gcReadPortValueASv_std_stringOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAb8OSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t euEGST_gcReadPortValueAcptrOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t euEGST_gcReadPortValueA_CINFOOSystemModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAi8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAi16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAi32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAi64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAu8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAu16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAu32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAu64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAdOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAfOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAu8pOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueASsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAvptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueASvcOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueASv_std_stringOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAb8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueAcptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t euEGST_gcReadPortValueA_CINFOOInterfaceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAsODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAi8ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAi16ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAi32ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAi64ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAu8ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAu16ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAu32ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAu64ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAdODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAfODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAu8pODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueASsODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAvptrODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueASvcODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueASv_std_stringODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAb8ODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueAcptrODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t euEGST_gcReadPortValueA_CINFOODeviceModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAsOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAi8OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAi16OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAi32OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAi64OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAu8OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAu16OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAu32OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAu64OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAdOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAfOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAu8pOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t euEGST_gcReadPortValueASsOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAvptrOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t euEGST_gcReadPortValueASvcOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t euEGST_gcReadPortValueASv_std_stringOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAb8OStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t euEGST_gcReadPortValueAcptrOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t euEGST_gcReadPortValueA_CINFOOStreamModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAsORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAi8ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAi16ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAi32ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAi64ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAu8ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAu16ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAu32ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAu64ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAdORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAfORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAu8pORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueASsORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAvptrORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueASvcORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueASv_std_stringORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAb8ORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueAcptrORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t euEGST_gcReadPortValueA_CINFOORemoteModuleFu64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t euEGST_gcWritePortValueWsOSystemModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t euEGST_gcWritePortValueWi8OSystemModuleFu64i8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t euEGST_gcWritePortValueWi16OSystemModuleFu64i16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t euEGST_gcWritePortValueWi32OSystemModuleFu64i32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t euEGST_gcWritePortValueWi64OSystemModuleFu64i64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t euEGST_gcWritePortValueWu8OSystemModuleFu64u8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t euEGST_gcWritePortValueWu16OSystemModuleFu64u16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t euEGST_gcWritePortValueWu32OSystemModuleFu64u32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t euEGST_gcWritePortValueWu64OSystemModuleFu64u64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double euEGST_gcWritePortValueWdOSystemModuleFu64d
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float euEGST_gcWritePortValueWfOSystemModuleFu64f
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t euEGST_gcWritePortValueWsOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t euEGST_gcWritePortValueWi8OInterfaceModuleFu64i8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t euEGST_gcWritePortValueWi16OInterfaceModuleFu64i16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t euEGST_gcWritePortValueWi32OInterfaceModuleFu64i32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t euEGST_gcWritePortValueWi64OInterfaceModuleFu64i64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t euEGST_gcWritePortValueWu8OInterfaceModuleFu64u8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t euEGST_gcWritePortValueWu16OInterfaceModuleFu64u16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t euEGST_gcWritePortValueWu32OInterfaceModuleFu64u32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t euEGST_gcWritePortValueWu64OInterfaceModuleFu64u64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double euEGST_gcWritePortValueWdOInterfaceModuleFu64d
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float euEGST_gcWritePortValueWfOInterfaceModuleFu64f
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t euEGST_gcWritePortValueWsODeviceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t euEGST_gcWritePortValueWi8ODeviceModuleFu64i8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t euEGST_gcWritePortValueWi16ODeviceModuleFu64i16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t euEGST_gcWritePortValueWi32ODeviceModuleFu64i32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t euEGST_gcWritePortValueWi64ODeviceModuleFu64i64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t euEGST_gcWritePortValueWu8ODeviceModuleFu64u8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t euEGST_gcWritePortValueWu16ODeviceModuleFu64u16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t euEGST_gcWritePortValueWu32ODeviceModuleFu64u32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t euEGST_gcWritePortValueWu64ODeviceModuleFu64u64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double euEGST_gcWritePortValueWdODeviceModuleFu64d
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float euEGST_gcWritePortValueWfODeviceModuleFu64f
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t euEGST_gcWritePortValueWsOStreamModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t euEGST_gcWritePortValueWi8OStreamModuleFu64i8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t euEGST_gcWritePortValueWi16OStreamModuleFu64i16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t euEGST_gcWritePortValueWi32OStreamModuleFu64i32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t euEGST_gcWritePortValueWi64OStreamModuleFu64i64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t euEGST_gcWritePortValueWu8OStreamModuleFu64u8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t euEGST_gcWritePortValueWu16OStreamModuleFu64u16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t euEGST_gcWritePortValueWu32OStreamModuleFu64u32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t euEGST_gcWritePortValueWu64OStreamModuleFu64u64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double euEGST_gcWritePortValueWdOStreamModuleFu64d
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float euEGST_gcWritePortValueWfOStreamModuleFu64f
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t euEGST_gcWritePortValueWsORemoteModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t euEGST_gcWritePortValueWi8ORemoteModuleFu64i8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t euEGST_gcWritePortValueWi16ORemoteModuleFu64i16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t euEGST_gcWritePortValueWi32ORemoteModuleFu64i32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t euEGST_gcWritePortValueWi64ORemoteModuleFu64i64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t euEGST_gcWritePortValueWu8ORemoteModuleFu64u8
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t euEGST_gcWritePortValueWu16ORemoteModuleFu64u16
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t euEGST_gcWritePortValueWu32ORemoteModuleFu64u32
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t euEGST_gcWritePortValueWu64ORemoteModuleFu64u64
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double euEGST_gcWritePortValueWdORemoteModuleFu64d
#define Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float euEGST_gcWritePortValueWfORemoteModuleFu64f
#define Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__SystemModule__from__uint64_t__size_t euEGST_gcReadPortStringOSystemModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t euEGST_gcReadPortStringOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__DeviceModule__from__uint64_t__size_t euEGST_gcReadPortStringODeviceModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__StreamModule__from__uint64_t__size_t euEGST_gcReadPortStringOStreamModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__RemoteModule__from__uint64_t__size_t euEGST_gcReadPortStringORemoteModuleFu64s
#define Eur_EGrabber_CallbackSingleThread_getInteger__on__SystemModule__from__const_char_p euEGST_getIntegerOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getInteger__on__InterfaceModule__from__const_char_p euEGST_getIntegerOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getInteger__on__DeviceModule__from__const_char_p euEGST_getIntegerODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getInteger__on__StreamModule__from__const_char_p euEGST_getIntegerOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getInteger__on__RemoteModule__from__const_char_p euEGST_getIntegerORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getFloat__on__SystemModule__from__const_char_p euEGST_getFloatOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getFloat__on__InterfaceModule__from__const_char_p euEGST_getFloatOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getFloat__on__DeviceModule__from__const_char_p euEGST_getFloatODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getFloat__on__StreamModule__from__const_char_p euEGST_getFloatOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getFloat__on__RemoteModule__from__const_char_p euEGST_getFloatORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getString__on__SystemModule__from__const_char_p euEGST_getStringOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getString__on__InterfaceModule__from__const_char_p euEGST_getStringOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getString__on__DeviceModule__from__const_char_p euEGST_getStringODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getString__on__StreamModule__from__const_char_p euEGST_getStringOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getString__on__RemoteModule__from__const_char_p euEGST_getStringORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getStringData__on__SystemModule__from__const_char_p__std_vector_char euEGST_getStringDataOSystemModuleFccpSvc
#define Eur_EGrabber_CallbackSingleThread_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char euEGST_getStringDataOInterfaceModuleFccpSvc
#define Eur_EGrabber_CallbackSingleThread_getStringData__on__DeviceModule__from__const_char_p__std_vector_char euEGST_getStringDataODeviceModuleFccpSvc
#define Eur_EGrabber_CallbackSingleThread_getStringData__on__StreamModule__from__const_char_p__std_vector_char euEGST_getStringDataOStreamModuleFccpSvc
#define Eur_EGrabber_CallbackSingleThread_getStringData__on__RemoteModule__from__const_char_p__std_vector_char euEGST_getStringDataORemoteModuleFccpSvc
#define Eur_EGrabber_CallbackSingleThread_getStringList__on__SystemModule__from__const_char_p euEGST_getStringListOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getStringList__on__InterfaceModule__from__const_char_p euEGST_getStringListOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getStringList__on__DeviceModule__from__const_char_p euEGST_getStringListODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getStringList__on__StreamModule__from__const_char_p euEGST_getStringListOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getStringList__on__RemoteModule__from__const_char_p euEGST_getStringListORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_getRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGST_getRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGST_getRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGST_getRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_getRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGST_getRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGST_getRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_setInteger__on__SystemModule__from__const_char_p__int64_t euEGST_setIntegerOSystemModuleFccpi64
#define Eur_EGrabber_CallbackSingleThread_setInteger__on__InterfaceModule__from__const_char_p__int64_t euEGST_setIntegerOInterfaceModuleFccpi64
#define Eur_EGrabber_CallbackSingleThread_setInteger__on__DeviceModule__from__const_char_p__int64_t euEGST_setIntegerODeviceModuleFccpi64
#define Eur_EGrabber_CallbackSingleThread_setInteger__on__StreamModule__from__const_char_p__int64_t euEGST_setIntegerOStreamModuleFccpi64
#define Eur_EGrabber_CallbackSingleThread_setInteger__on__RemoteModule__from__const_char_p__int64_t euEGST_setIntegerORemoteModuleFccpi64
#define Eur_EGrabber_CallbackSingleThread_setFloat__on__SystemModule__from__const_char_p__double euEGST_setFloatOSystemModuleFccpd
#define Eur_EGrabber_CallbackSingleThread_setFloat__on__InterfaceModule__from__const_char_p__double euEGST_setFloatOInterfaceModuleFccpd
#define Eur_EGrabber_CallbackSingleThread_setFloat__on__DeviceModule__from__const_char_p__double euEGST_setFloatODeviceModuleFccpd
#define Eur_EGrabber_CallbackSingleThread_setFloat__on__StreamModule__from__const_char_p__double euEGST_setFloatOStreamModuleFccpd
#define Eur_EGrabber_CallbackSingleThread_setFloat__on__RemoteModule__from__const_char_p__double euEGST_setFloatORemoteModuleFccpd
#define Eur_EGrabber_CallbackSingleThread_setString__on__SystemModule__from__const_char_p__const_char_p euEGST_setStringOSystemModuleFccpccp
#define Eur_EGrabber_CallbackSingleThread_setString__on__InterfaceModule__from__const_char_p__const_char_p euEGST_setStringOInterfaceModuleFccpccp
#define Eur_EGrabber_CallbackSingleThread_setString__on__DeviceModule__from__const_char_p__const_char_p euEGST_setStringODeviceModuleFccpccp
#define Eur_EGrabber_CallbackSingleThread_setString__on__StreamModule__from__const_char_p__const_char_p euEGST_setStringOStreamModuleFccpccp
#define Eur_EGrabber_CallbackSingleThread_setString__on__RemoteModule__from__const_char_p__const_char_p euEGST_setStringORemoteModuleFccpccp
#define Eur_EGrabber_CallbackSingleThread_setRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGST_setRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGST_setRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGST_setRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_setRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGST_setRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGST_setRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackSingleThread_execute__on__SystemModule__from__const_char_p euEGST_executeOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_execute__on__InterfaceModule__from__const_char_p euEGST_executeOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_execute__on__DeviceModule__from__const_char_p euEGST_executeODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_execute__on__StreamModule__from__const_char_p euEGST_executeOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_execute__on__RemoteModule__from__const_char_p euEGST_executeORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t euEGST_attachEventOSystemModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t euEGST_attachEventOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t euEGST_attachEventODeviceModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t euEGST_attachEventOStreamModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t euEGST_attachEventORemoteModuleFu64vps
#define Eur_EGrabber_CallbackSingleThread_invalidate__on__SystemModule__from__const_char_p euEGST_invalidateOSystemModuleFccp
#define Eur_EGrabber_CallbackSingleThread_invalidate__on__InterfaceModule__from__const_char_p euEGST_invalidateOInterfaceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_invalidate__on__DeviceModule__from__const_char_p euEGST_invalidateODeviceModuleFccp
#define Eur_EGrabber_CallbackSingleThread_invalidate__on__StreamModule__from__const_char_p euEGST_invalidateOStreamModuleFccp
#define Eur_EGrabber_CallbackSingleThread_invalidate__on__RemoteModule__from__const_char_p euEGST_invalidateORemoteModuleFccp
#define Eur_EGrabber_CallbackSingleThread_runScript__from__const_char_p__void_p euEGST_runScriptFccpvp
#define Eur_EGrabber_CallbackSingleThread_runScript__from__const_char_p euEGST_runScriptFccp
#define Eur_EGrabber_CallbackSingleThread_interruptScript__from__const_char_p euEGST_interruptScriptFccp
#define Eur_EGrabber_CallbackSingleThread_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string euEGST_onScriptUiCallbackFccpvpSm_std_string_std_stringSs
#define Eur_EGrabber_CallbackSingleThread_memento__from__const_char_p euEGST_mementoFccp
#define Eur_EGrabber_CallbackSingleThread_memento__from__unsigned_char__unsigned_char__const_char_p euEGST_mementoFucucccp
#define Eur_EGrabber_CallbackSingleThread_mementoWaveUp__from__unsigned_char__unsigned_char euEGST_mementoWaveUpFucuc
#define Eur_EGrabber_CallbackSingleThread_mementoWaveDown__from__unsigned_char__unsigned_char euEGST_mementoWaveDownFucuc
#define Eur_EGrabber_CallbackSingleThread_mementoWaveReset__from__unsigned_char__unsigned_char euEGST_mementoWaveResetFucuc
#define Eur_EGrabber_CallbackSingleThread_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t euEGST_mementoWaveValueFucucu64
#define Eur_EGrabber_CallbackSingleThread_mementoWaveNoValue__from__unsigned_char__unsigned_char euEGST_mementoWaveNoValueFucuc
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__NewBufferData euEGST_enableEventWNewBufferData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__IoToolboxData euEGST_enableEventWIoToolboxData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__CicData euEGST_enableEventWCicData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__DataStreamData euEGST_enableEventWDataStreamData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__CxpInterfaceData euEGST_enableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__DeviceErrorData euEGST_enableEventWDeviceErrorData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__CxpDeviceData euEGST_enableEventWCxpDeviceData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__RemoteDeviceData euEGST_enableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackSingleThread_enableEvent__with__All euEGST_enableEventWAll
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__NewBufferData euEGST_disableEventWNewBufferData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__IoToolboxData euEGST_disableEventWIoToolboxData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__CicData euEGST_disableEventWCicData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__DataStreamData euEGST_disableEventWDataStreamData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__CxpInterfaceData euEGST_disableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__DeviceErrorData euEGST_disableEventWDeviceErrorData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__CxpDeviceData euEGST_disableEventWCxpDeviceData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__RemoteDeviceData euEGST_disableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackSingleThread_disableEvent__with__All euEGST_disableEventWAll
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__NewBufferData euEGST_flushEventWNewBufferData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__IoToolboxData euEGST_flushEventWIoToolboxData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__CicData euEGST_flushEventWCicData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__DataStreamData euEGST_flushEventWDataStreamData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__CxpInterfaceData euEGST_flushEventWCxpInterfaceData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__DeviceErrorData euEGST_flushEventWDeviceErrorData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__CxpDeviceData euEGST_flushEventWCxpDeviceData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__RemoteDeviceData euEGST_flushEventWRemoteDeviceData
#define Eur_EGrabber_CallbackSingleThread_flushEvent__with__All euEGST_flushEventWAll
#define Eur_EGrabber_CallbackSingleThread_onNewBufferEvent__from__Eur_NewBufferData euEGST_onNewBufferEventFEur_NewBufferData
#define Eur_EGrabber_CallbackSingleThread_onIoToolboxEvent__from__Eur_IoToolboxData euEGST_onIoToolboxEventFEur_IoToolboxData
#define Eur_EGrabber_CallbackSingleThread_onCicEvent__from__Eur_CicData euEGST_onCicEventFEur_CicData
#define Eur_EGrabber_CallbackSingleThread_onDataStreamEvent__from__Eur_DataStreamData euEGST_onDataStreamEventFEur_DataStreamData
#define Eur_EGrabber_CallbackSingleThread_onCxpInterfaceEvent__from__Eur_CxpInterfaceData euEGST_onCxpInterfaceEventFEur_CxpInterfaceData
#define Eur_EGrabber_CallbackSingleThread_onDeviceErrorEvent__from__Eur_DeviceErrorData euEGST_onDeviceErrorEventFEur_DeviceErrorData
#define Eur_EGrabber_CallbackSingleThread_onCxpDeviceEvent__from__Eur_CxpDeviceData euEGST_onCxpDeviceEventFEur_CxpDeviceData
#define Eur_EGrabber_CallbackSingleThread_onRemoteDeviceEvent__from__Eur_RemoteDeviceData euEGST_onRemoteDeviceEventFEur_RemoteDeviceData
#define Eur_EGrabber_CallbackSingleThread_getLastEventGrabberIndex euEGST_getLastEventGrabberIndex
#define Eur_EGrabber_CallbackSingleThread_shutdown euEGST_shutdown
#define Eur_EGrabber_CallbackSingleThread_push__from__Eur_NewBufferData euEGST_pushFEur_NewBufferData
#define Eur_EGrabber_CallbackSingleThread_announceBusBuffer__from__uint64_t__size_t__void_p euEGST_announceBusBufferFu64svp
#define Eur_EGrabber_CallbackSingleThread_announceBusBuffer__from__uint64_t__size_t euEGST_announceBusBufferFu64s
#define Eur_EGrabber_CallbackSingleThread_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p euEGST_announceNvidiaRdmaBufferFvpsvp
#define Eur_EGrabber_CallbackSingleThread_announceNvidiaRdmaBuffer__from__void_p__size_t euEGST_announceNvidiaRdmaBufferFvps
#define Eur_EGrabber_CallbackSingleThread_getSystemPort__from__int euEGST_getSystemPortFi
#define Eur_EGrabber_CallbackSingleThread_getInterfacePort__from__int euEGST_getInterfacePortFi
#define Eur_EGrabber_CallbackSingleThread_getDevicePort__from__int euEGST_getDevicePortFi
#define Eur_EGrabber_CallbackSingleThread_getStreamPort__from__int euEGST_getStreamPortFi
#define Eur_EGrabber_CallbackSingleThread_getRemotePort__from__int euEGST_getRemotePortFi
#define Eur_EGrabber_CallbackSingleThread_destroy euEGST_destroy
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t euEGMT_createFEur_EGenTLiiiDAFb8
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS euEGMT_createFEur_EGenTLiiiDAF
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int euEGMT_createFEur_EGenTLiii
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int euEGMT_createFEur_EGenTLii
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int euEGMT_createFEur_EGenTLi
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL euEGMT_createFEur_EGenTL
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t euEGMT_createFEurEGInfoDAFb8
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS euEGMT_createFEurEGInfoDAF
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo euEGMT_createFEurEGInfo
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS euEGMT_createFEurEGCameraInfoDAF
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberCameraInfo euEGMT_createFEurEGCameraInfo
#define Eur_EGrabber_CallbackMultiThread_reallocBuffers__from__size_t__size_t euEGMT_reallocBuffersFss
#define Eur_EGrabber_CallbackMultiThread_reallocBuffers__from__size_t euEGMT_reallocBuffersFs
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_GenTLMemory__size_t euEGMT_announceAndQueueFEur_GenTLMemorys
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_GenTLMemory euEGMT_announceAndQueueFEur_GenTLMemory
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemory euEGMT_announceAndQueueFEur_UserMemory
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemoryArray euEGMT_announceAndQueueFEur_UserMemoryArray
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemoryArray__bool8_t euEGMT_announceAndQueueFEur_UserMemoryArrayb8
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_BusMemory euEGMT_announceAndQueueFEur_BusMemory
#define Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_NvidiaRdmaMemory euEGMT_announceAndQueueFEur_NvidiaRdmaMemory
#define Eur_EGrabber_CallbackMultiThread_flushBuffers__from__ACQ_QUEUE_TYPE euEGMT_flushBuffersFAQT
#define Eur_EGrabber_CallbackMultiThread_flushBuffers euEGMT_flushBuffers
#define Eur_EGrabber_CallbackMultiThread_resetBufferQueue euEGMT_resetBufferQueue
#define Eur_EGrabber_CallbackMultiThread_resetBufferQueue__from__Eur_BufferIndexRange euEGMT_resetBufferQueueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackMultiThread_queue__from__Eur_BufferIndexRange euEGMT_queueFEur_BufferIndexRange
#define Eur_EGrabber_CallbackMultiThread_revoke__from__Eur_BufferIndexRange euEGMT_revokeFEur_BufferIndexRange
#define Eur_EGrabber_CallbackMultiThread_shouldReannounceBuffers euEGMT_shouldReannounceBuffers
#define Eur_EGrabber_CallbackMultiThread_shouldReallocBuffers euEGMT_shouldReallocBuffers
#define Eur_EGrabber_CallbackMultiThread_start__from__uint64_t__bool8_t euEGMT_startFu64b8
#define Eur_EGrabber_CallbackMultiThread_start__from__uint64_t euEGMT_startFu64
#define Eur_EGrabber_CallbackMultiThread_start euEGMT_start
#define Eur_EGrabber_CallbackMultiThread_stop euEGMT_stop
#define Eur_EGrabber_CallbackMultiThread_getWidth euEGMT_getWidth
#define Eur_EGrabber_CallbackMultiThread_getHeight euEGMT_getHeight
#define Eur_EGrabber_CallbackMultiThread_getPayloadSize euEGMT_getPayloadSize
#define Eur_EGrabber_CallbackMultiThread_getPixelFormat euEGMT_getPixelFormat
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__SystemModule__from__int32_t euEGMT_getInfoAsOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__SystemModule__from__int32_t euEGMT_getInfoAi8OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__SystemModule__from__int32_t euEGMT_getInfoAi16OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__SystemModule__from__int32_t euEGMT_getInfoAi32OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__SystemModule__from__int32_t euEGMT_getInfoAi64OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__SystemModule__from__int32_t euEGMT_getInfoAu8OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__SystemModule__from__int32_t euEGMT_getInfoAu16OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__SystemModule__from__int32_t euEGMT_getInfoAu32OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__SystemModule__from__int32_t euEGMT_getInfoAu64OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__SystemModule__from__int32_t euEGMT_getInfoAdOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__SystemModule__from__int32_t euEGMT_getInfoAfOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t euEGMT_getInfoAu8pOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__SystemModule__from__int32_t euEGMT_getInfoASsOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__SystemModule__from__int32_t euEGMT_getInfoAvptrOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__SystemModule__from__int32_t euEGMT_getInfoASvcOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t euEGMT_getInfoASv_std_stringOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__SystemModule__from__int32_t euEGMT_getInfoAb8OSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__SystemModule__from__int32_t euEGMT_getInfoAcptrOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t euEGMT_getInfoA_CINFOOSystemModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAi8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAi16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAi32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAi64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAu8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAu16OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAu32OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAu64OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__InterfaceModule__from__int32_t euEGMT_getInfoAdOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__InterfaceModule__from__int32_t euEGMT_getInfoAfOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t euEGMT_getInfoAu8pOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__InterfaceModule__from__int32_t euEGMT_getInfoASsOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t euEGMT_getInfoAvptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t euEGMT_getInfoASvcOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t euEGMT_getInfoASv_std_stringOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t euEGMT_getInfoAb8OInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t euEGMT_getInfoAcptrOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t euEGMT_getInfoA_CINFOOInterfaceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__DeviceModule__from__int32_t euEGMT_getInfoAsODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__DeviceModule__from__int32_t euEGMT_getInfoAi8ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__DeviceModule__from__int32_t euEGMT_getInfoAi16ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__DeviceModule__from__int32_t euEGMT_getInfoAi32ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__DeviceModule__from__int32_t euEGMT_getInfoAi64ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__DeviceModule__from__int32_t euEGMT_getInfoAu8ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__DeviceModule__from__int32_t euEGMT_getInfoAu16ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__DeviceModule__from__int32_t euEGMT_getInfoAu32ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__DeviceModule__from__int32_t euEGMT_getInfoAu64ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__DeviceModule__from__int32_t euEGMT_getInfoAdODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__DeviceModule__from__int32_t euEGMT_getInfoAfODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t euEGMT_getInfoAu8pODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__DeviceModule__from__int32_t euEGMT_getInfoASsODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__DeviceModule__from__int32_t euEGMT_getInfoAvptrODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t euEGMT_getInfoASvcODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t euEGMT_getInfoASv_std_stringODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__DeviceModule__from__int32_t euEGMT_getInfoAb8ODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__DeviceModule__from__int32_t euEGMT_getInfoAcptrODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t euEGMT_getInfoA_CINFOODeviceModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__StreamModule__from__int32_t euEGMT_getInfoAsOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__StreamModule__from__int32_t euEGMT_getInfoAi8OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__StreamModule__from__int32_t euEGMT_getInfoAi16OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__StreamModule__from__int32_t euEGMT_getInfoAi32OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__StreamModule__from__int32_t euEGMT_getInfoAi64OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__StreamModule__from__int32_t euEGMT_getInfoAu8OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__StreamModule__from__int32_t euEGMT_getInfoAu16OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__StreamModule__from__int32_t euEGMT_getInfoAu32OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__StreamModule__from__int32_t euEGMT_getInfoAu64OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__StreamModule__from__int32_t euEGMT_getInfoAdOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__StreamModule__from__int32_t euEGMT_getInfoAfOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t euEGMT_getInfoAu8pOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__StreamModule__from__int32_t euEGMT_getInfoASsOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__StreamModule__from__int32_t euEGMT_getInfoAvptrOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__StreamModule__from__int32_t euEGMT_getInfoASvcOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t euEGMT_getInfoASv_std_stringOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__StreamModule__from__int32_t euEGMT_getInfoAb8OStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__StreamModule__from__int32_t euEGMT_getInfoAcptrOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t euEGMT_getInfoA_CINFOOStreamModuleFi32
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAsFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAi8FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAi16FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAi32FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAi64FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAu8FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAu16FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAu32FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAu64FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAdFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAfFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAu8pFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoASsFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAvptrFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoASvcFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoASv_std_stringFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAb8FsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoAcptrFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD euEGMT_getBufferInfoA_CINFOFsBIC
#define Eur_EGrabber_CallbackMultiThread_getBufferData__from__size_t euEGMT_getBufferDataFs
#define Eur_EGrabber_CallbackMultiThread_isOpen__on__SystemModule euEGMT_isOpenOSystemModule
#define Eur_EGrabber_CallbackMultiThread_isOpen__on__InterfaceModule euEGMT_isOpenOInterfaceModule
#define Eur_EGrabber_CallbackMultiThread_isOpen__on__DeviceModule euEGMT_isOpenODeviceModule
#define Eur_EGrabber_CallbackMultiThread_isOpen__on__StreamModule euEGMT_isOpenOStreamModule
#define Eur_EGrabber_CallbackMultiThread_isOpen__on__RemoteModule euEGMT_isOpenORemoteModule
#define Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t euEGMT_gcReadPortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGMT_gcReadPortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGMT_gcReadPortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t euEGMT_gcReadPortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGMT_gcReadPortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t euEGMT_gcWritePortDataOSystemModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t euEGMT_gcWritePortDataOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t euEGMT_gcWritePortDataODeviceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t euEGMT_gcWritePortDataOStreamModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t euEGMT_gcWritePortDataORemoteModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_gcReadPort__on__SystemModule__from__uint64_t__size_t euEGMT_gcReadPortOSystemModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPort__on__InterfaceModule__from__uint64_t__size_t euEGMT_gcReadPortOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPort__on__DeviceModule__from__uint64_t__size_t euEGMT_gcReadPortODeviceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPort__on__StreamModule__from__uint64_t__size_t euEGMT_gcReadPortOStreamModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPort__on__RemoteModule__from__uint64_t__size_t euEGMT_gcReadPortORemoteModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char euEGMT_gcWritePortOSystemModuleFu64Svc
#define Eur_EGrabber_CallbackMultiThread_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char euEGMT_gcWritePortOInterfaceModuleFu64Svc
#define Eur_EGrabber_CallbackMultiThread_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char euEGMT_gcWritePortODeviceModuleFu64Svc
#define Eur_EGrabber_CallbackMultiThread_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char euEGMT_gcWritePortOStreamModuleFu64Svc
#define Eur_EGrabber_CallbackMultiThread_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char euEGMT_gcWritePortORemoteModuleFu64Svc
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAsOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAi8OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAi16OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAi32OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAi64OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAu8OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAu16OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAu32OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAu64OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAdOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAfOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAu8pOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueASsOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAvptrOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueASvcOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueASv_std_stringOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAb8OSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueAcptrOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t euEGMT_gcReadPortValueA_CINFOOSystemModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAi8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAi16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAi32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAi64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAu8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAu16OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAu32OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAu64OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAdOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAfOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAu8pOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueASsOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAvptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueASvcOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueASv_std_stringOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAb8OInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueAcptrOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t euEGMT_gcReadPortValueA_CINFOOInterfaceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAsODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAi8ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAi16ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAi32ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAi64ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAu8ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAu16ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAu32ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAu64ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAdODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAfODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAu8pODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueASsODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAvptrODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueASvcODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueASv_std_stringODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAb8ODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueAcptrODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t euEGMT_gcReadPortValueA_CINFOODeviceModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAsOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAi8OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAi16OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAi32OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAi64OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAu8OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAu16OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAu32OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAu64OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAdOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAfOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAu8pOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueASsOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAvptrOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueASvcOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueASv_std_stringOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAb8OStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueAcptrOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t euEGMT_gcReadPortValueA_CINFOOStreamModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAsORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAi8ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAi16ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAi32ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAi64ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAu8ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAu16ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAu32ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAu64ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAdORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAfORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAu8pORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueASsORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAvptrORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueASvcORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueASv_std_stringORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAb8ORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueAcptrORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t euEGMT_gcReadPortValueA_CINFOORemoteModuleFu64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t euEGMT_gcWritePortValueWsOSystemModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t euEGMT_gcWritePortValueWi8OSystemModuleFu64i8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t euEGMT_gcWritePortValueWi16OSystemModuleFu64i16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t euEGMT_gcWritePortValueWi32OSystemModuleFu64i32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t euEGMT_gcWritePortValueWi64OSystemModuleFu64i64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t euEGMT_gcWritePortValueWu8OSystemModuleFu64u8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t euEGMT_gcWritePortValueWu16OSystemModuleFu64u16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t euEGMT_gcWritePortValueWu32OSystemModuleFu64u32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t euEGMT_gcWritePortValueWu64OSystemModuleFu64u64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double euEGMT_gcWritePortValueWdOSystemModuleFu64d
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float euEGMT_gcWritePortValueWfOSystemModuleFu64f
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t euEGMT_gcWritePortValueWsOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t euEGMT_gcWritePortValueWi8OInterfaceModuleFu64i8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t euEGMT_gcWritePortValueWi16OInterfaceModuleFu64i16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t euEGMT_gcWritePortValueWi32OInterfaceModuleFu64i32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t euEGMT_gcWritePortValueWi64OInterfaceModuleFu64i64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t euEGMT_gcWritePortValueWu8OInterfaceModuleFu64u8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t euEGMT_gcWritePortValueWu16OInterfaceModuleFu64u16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t euEGMT_gcWritePortValueWu32OInterfaceModuleFu64u32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t euEGMT_gcWritePortValueWu64OInterfaceModuleFu64u64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double euEGMT_gcWritePortValueWdOInterfaceModuleFu64d
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float euEGMT_gcWritePortValueWfOInterfaceModuleFu64f
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t euEGMT_gcWritePortValueWsODeviceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t euEGMT_gcWritePortValueWi8ODeviceModuleFu64i8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t euEGMT_gcWritePortValueWi16ODeviceModuleFu64i16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t euEGMT_gcWritePortValueWi32ODeviceModuleFu64i32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t euEGMT_gcWritePortValueWi64ODeviceModuleFu64i64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t euEGMT_gcWritePortValueWu8ODeviceModuleFu64u8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t euEGMT_gcWritePortValueWu16ODeviceModuleFu64u16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t euEGMT_gcWritePortValueWu32ODeviceModuleFu64u32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t euEGMT_gcWritePortValueWu64ODeviceModuleFu64u64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double euEGMT_gcWritePortValueWdODeviceModuleFu64d
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float euEGMT_gcWritePortValueWfODeviceModuleFu64f
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t euEGMT_gcWritePortValueWsOStreamModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t euEGMT_gcWritePortValueWi8OStreamModuleFu64i8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t euEGMT_gcWritePortValueWi16OStreamModuleFu64i16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t euEGMT_gcWritePortValueWi32OStreamModuleFu64i32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t euEGMT_gcWritePortValueWi64OStreamModuleFu64i64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t euEGMT_gcWritePortValueWu8OStreamModuleFu64u8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t euEGMT_gcWritePortValueWu16OStreamModuleFu64u16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t euEGMT_gcWritePortValueWu32OStreamModuleFu64u32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t euEGMT_gcWritePortValueWu64OStreamModuleFu64u64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double euEGMT_gcWritePortValueWdOStreamModuleFu64d
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float euEGMT_gcWritePortValueWfOStreamModuleFu64f
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t euEGMT_gcWritePortValueWsORemoteModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t euEGMT_gcWritePortValueWi8ORemoteModuleFu64i8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t euEGMT_gcWritePortValueWi16ORemoteModuleFu64i16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t euEGMT_gcWritePortValueWi32ORemoteModuleFu64i32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t euEGMT_gcWritePortValueWi64ORemoteModuleFu64i64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t euEGMT_gcWritePortValueWu8ORemoteModuleFu64u8
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t euEGMT_gcWritePortValueWu16ORemoteModuleFu64u16
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t euEGMT_gcWritePortValueWu32ORemoteModuleFu64u32
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t euEGMT_gcWritePortValueWu64ORemoteModuleFu64u64
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double euEGMT_gcWritePortValueWdORemoteModuleFu64d
#define Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float euEGMT_gcWritePortValueWfORemoteModuleFu64f
#define Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__SystemModule__from__uint64_t__size_t euEGMT_gcReadPortStringOSystemModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t euEGMT_gcReadPortStringOInterfaceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__DeviceModule__from__uint64_t__size_t euEGMT_gcReadPortStringODeviceModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__StreamModule__from__uint64_t__size_t euEGMT_gcReadPortStringOStreamModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__RemoteModule__from__uint64_t__size_t euEGMT_gcReadPortStringORemoteModuleFu64s
#define Eur_EGrabber_CallbackMultiThread_getInteger__on__SystemModule__from__const_char_p euEGMT_getIntegerOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getInteger__on__InterfaceModule__from__const_char_p euEGMT_getIntegerOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getInteger__on__DeviceModule__from__const_char_p euEGMT_getIntegerODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getInteger__on__StreamModule__from__const_char_p euEGMT_getIntegerOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getInteger__on__RemoteModule__from__const_char_p euEGMT_getIntegerORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getFloat__on__SystemModule__from__const_char_p euEGMT_getFloatOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getFloat__on__InterfaceModule__from__const_char_p euEGMT_getFloatOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getFloat__on__DeviceModule__from__const_char_p euEGMT_getFloatODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getFloat__on__StreamModule__from__const_char_p euEGMT_getFloatOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getFloat__on__RemoteModule__from__const_char_p euEGMT_getFloatORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getString__on__SystemModule__from__const_char_p euEGMT_getStringOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getString__on__InterfaceModule__from__const_char_p euEGMT_getStringOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getString__on__DeviceModule__from__const_char_p euEGMT_getStringODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getString__on__StreamModule__from__const_char_p euEGMT_getStringOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getString__on__RemoteModule__from__const_char_p euEGMT_getStringORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getStringData__on__SystemModule__from__const_char_p__std_vector_char euEGMT_getStringDataOSystemModuleFccpSvc
#define Eur_EGrabber_CallbackMultiThread_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char euEGMT_getStringDataOInterfaceModuleFccpSvc
#define Eur_EGrabber_CallbackMultiThread_getStringData__on__DeviceModule__from__const_char_p__std_vector_char euEGMT_getStringDataODeviceModuleFccpSvc
#define Eur_EGrabber_CallbackMultiThread_getStringData__on__StreamModule__from__const_char_p__std_vector_char euEGMT_getStringDataOStreamModuleFccpSvc
#define Eur_EGrabber_CallbackMultiThread_getStringData__on__RemoteModule__from__const_char_p__std_vector_char euEGMT_getStringDataORemoteModuleFccpSvc
#define Eur_EGrabber_CallbackMultiThread_getStringList__on__SystemModule__from__const_char_p euEGMT_getStringListOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getStringList__on__InterfaceModule__from__const_char_p euEGMT_getStringListOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getStringList__on__DeviceModule__from__const_char_p euEGMT_getStringListODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getStringList__on__StreamModule__from__const_char_p euEGMT_getStringListOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getStringList__on__RemoteModule__from__const_char_p euEGMT_getStringListORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_getRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGMT_getRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGMT_getRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGMT_getRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_getRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGMT_getRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGMT_getRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_setInteger__on__SystemModule__from__const_char_p__int64_t euEGMT_setIntegerOSystemModuleFccpi64
#define Eur_EGrabber_CallbackMultiThread_setInteger__on__InterfaceModule__from__const_char_p__int64_t euEGMT_setIntegerOInterfaceModuleFccpi64
#define Eur_EGrabber_CallbackMultiThread_setInteger__on__DeviceModule__from__const_char_p__int64_t euEGMT_setIntegerODeviceModuleFccpi64
#define Eur_EGrabber_CallbackMultiThread_setInteger__on__StreamModule__from__const_char_p__int64_t euEGMT_setIntegerOStreamModuleFccpi64
#define Eur_EGrabber_CallbackMultiThread_setInteger__on__RemoteModule__from__const_char_p__int64_t euEGMT_setIntegerORemoteModuleFccpi64
#define Eur_EGrabber_CallbackMultiThread_setFloat__on__SystemModule__from__const_char_p__double euEGMT_setFloatOSystemModuleFccpd
#define Eur_EGrabber_CallbackMultiThread_setFloat__on__InterfaceModule__from__const_char_p__double euEGMT_setFloatOInterfaceModuleFccpd
#define Eur_EGrabber_CallbackMultiThread_setFloat__on__DeviceModule__from__const_char_p__double euEGMT_setFloatODeviceModuleFccpd
#define Eur_EGrabber_CallbackMultiThread_setFloat__on__StreamModule__from__const_char_p__double euEGMT_setFloatOStreamModuleFccpd
#define Eur_EGrabber_CallbackMultiThread_setFloat__on__RemoteModule__from__const_char_p__double euEGMT_setFloatORemoteModuleFccpd
#define Eur_EGrabber_CallbackMultiThread_setString__on__SystemModule__from__const_char_p__const_char_p euEGMT_setStringOSystemModuleFccpccp
#define Eur_EGrabber_CallbackMultiThread_setString__on__InterfaceModule__from__const_char_p__const_char_p euEGMT_setStringOInterfaceModuleFccpccp
#define Eur_EGrabber_CallbackMultiThread_setString__on__DeviceModule__from__const_char_p__const_char_p euEGMT_setStringODeviceModuleFccpccp
#define Eur_EGrabber_CallbackMultiThread_setString__on__StreamModule__from__const_char_p__const_char_p euEGMT_setStringOStreamModuleFccpccp
#define Eur_EGrabber_CallbackMultiThread_setString__on__RemoteModule__from__const_char_p__const_char_p euEGMT_setStringORemoteModuleFccpccp
#define Eur_EGrabber_CallbackMultiThread_setRegister__on__SystemModule__from__const_char_p__void_p__size_t euEGMT_setRegisterOSystemModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t euEGMT_setRegisterOInterfaceModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t euEGMT_setRegisterODeviceModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_setRegister__on__StreamModule__from__const_char_p__void_p__size_t euEGMT_setRegisterOStreamModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t euEGMT_setRegisterORemoteModuleFccpvps
#define Eur_EGrabber_CallbackMultiThread_execute__on__SystemModule__from__const_char_p euEGMT_executeOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_execute__on__InterfaceModule__from__const_char_p euEGMT_executeOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_execute__on__DeviceModule__from__const_char_p euEGMT_executeODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_execute__on__StreamModule__from__const_char_p euEGMT_executeOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_execute__on__RemoteModule__from__const_char_p euEGMT_executeORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t euEGMT_attachEventOSystemModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t euEGMT_attachEventOInterfaceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t euEGMT_attachEventODeviceModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t euEGMT_attachEventOStreamModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t euEGMT_attachEventORemoteModuleFu64vps
#define Eur_EGrabber_CallbackMultiThread_invalidate__on__SystemModule__from__const_char_p euEGMT_invalidateOSystemModuleFccp
#define Eur_EGrabber_CallbackMultiThread_invalidate__on__InterfaceModule__from__const_char_p euEGMT_invalidateOInterfaceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_invalidate__on__DeviceModule__from__const_char_p euEGMT_invalidateODeviceModuleFccp
#define Eur_EGrabber_CallbackMultiThread_invalidate__on__StreamModule__from__const_char_p euEGMT_invalidateOStreamModuleFccp
#define Eur_EGrabber_CallbackMultiThread_invalidate__on__RemoteModule__from__const_char_p euEGMT_invalidateORemoteModuleFccp
#define Eur_EGrabber_CallbackMultiThread_runScript__from__const_char_p__void_p euEGMT_runScriptFccpvp
#define Eur_EGrabber_CallbackMultiThread_runScript__from__const_char_p euEGMT_runScriptFccp
#define Eur_EGrabber_CallbackMultiThread_interruptScript__from__const_char_p euEGMT_interruptScriptFccp
#define Eur_EGrabber_CallbackMultiThread_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string euEGMT_onScriptUiCallbackFccpvpSm_std_string_std_stringSs
#define Eur_EGrabber_CallbackMultiThread_memento__from__const_char_p euEGMT_mementoFccp
#define Eur_EGrabber_CallbackMultiThread_memento__from__unsigned_char__unsigned_char__const_char_p euEGMT_mementoFucucccp
#define Eur_EGrabber_CallbackMultiThread_mementoWaveUp__from__unsigned_char__unsigned_char euEGMT_mementoWaveUpFucuc
#define Eur_EGrabber_CallbackMultiThread_mementoWaveDown__from__unsigned_char__unsigned_char euEGMT_mementoWaveDownFucuc
#define Eur_EGrabber_CallbackMultiThread_mementoWaveReset__from__unsigned_char__unsigned_char euEGMT_mementoWaveResetFucuc
#define Eur_EGrabber_CallbackMultiThread_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t euEGMT_mementoWaveValueFucucu64
#define Eur_EGrabber_CallbackMultiThread_mementoWaveNoValue__from__unsigned_char__unsigned_char euEGMT_mementoWaveNoValueFucuc
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__NewBufferData euEGMT_enableEventWNewBufferData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__IoToolboxData euEGMT_enableEventWIoToolboxData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__CicData euEGMT_enableEventWCicData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__DataStreamData euEGMT_enableEventWDataStreamData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__CxpInterfaceData euEGMT_enableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__DeviceErrorData euEGMT_enableEventWDeviceErrorData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__CxpDeviceData euEGMT_enableEventWCxpDeviceData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__RemoteDeviceData euEGMT_enableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackMultiThread_enableEvent__with__All euEGMT_enableEventWAll
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__NewBufferData euEGMT_disableEventWNewBufferData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__IoToolboxData euEGMT_disableEventWIoToolboxData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__CicData euEGMT_disableEventWCicData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__DataStreamData euEGMT_disableEventWDataStreamData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__CxpInterfaceData euEGMT_disableEventWCxpInterfaceData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__DeviceErrorData euEGMT_disableEventWDeviceErrorData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__CxpDeviceData euEGMT_disableEventWCxpDeviceData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__RemoteDeviceData euEGMT_disableEventWRemoteDeviceData
#define Eur_EGrabber_CallbackMultiThread_disableEvent__with__All euEGMT_disableEventWAll
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__NewBufferData euEGMT_flushEventWNewBufferData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__IoToolboxData euEGMT_flushEventWIoToolboxData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__CicData euEGMT_flushEventWCicData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__DataStreamData euEGMT_flushEventWDataStreamData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__CxpInterfaceData euEGMT_flushEventWCxpInterfaceData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__DeviceErrorData euEGMT_flushEventWDeviceErrorData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__CxpDeviceData euEGMT_flushEventWCxpDeviceData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__RemoteDeviceData euEGMT_flushEventWRemoteDeviceData
#define Eur_EGrabber_CallbackMultiThread_flushEvent__with__All euEGMT_flushEventWAll
#define Eur_EGrabber_CallbackMultiThread_onNewBufferEvent__from__Eur_NewBufferData euEGMT_onNewBufferEventFEur_NewBufferData
#define Eur_EGrabber_CallbackMultiThread_onIoToolboxEvent__from__Eur_IoToolboxData euEGMT_onIoToolboxEventFEur_IoToolboxData
#define Eur_EGrabber_CallbackMultiThread_onCicEvent__from__Eur_CicData euEGMT_onCicEventFEur_CicData
#define Eur_EGrabber_CallbackMultiThread_onDataStreamEvent__from__Eur_DataStreamData euEGMT_onDataStreamEventFEur_DataStreamData
#define Eur_EGrabber_CallbackMultiThread_onCxpInterfaceEvent__from__Eur_CxpInterfaceData euEGMT_onCxpInterfaceEventFEur_CxpInterfaceData
#define Eur_EGrabber_CallbackMultiThread_onDeviceErrorEvent__from__Eur_DeviceErrorData euEGMT_onDeviceErrorEventFEur_DeviceErrorData
#define Eur_EGrabber_CallbackMultiThread_onCxpDeviceEvent__from__Eur_CxpDeviceData euEGMT_onCxpDeviceEventFEur_CxpDeviceData
#define Eur_EGrabber_CallbackMultiThread_onRemoteDeviceEvent__from__Eur_RemoteDeviceData euEGMT_onRemoteDeviceEventFEur_RemoteDeviceData
#define Eur_EGrabber_CallbackMultiThread_getLastEventGrabberIndex euEGMT_getLastEventGrabberIndex
#define Eur_EGrabber_CallbackMultiThread_shutdown euEGMT_shutdown
#define Eur_EGrabber_CallbackMultiThread_push__from__Eur_NewBufferData euEGMT_pushFEur_NewBufferData
#define Eur_EGrabber_CallbackMultiThread_announceBusBuffer__from__uint64_t__size_t__void_p euEGMT_announceBusBufferFu64svp
#define Eur_EGrabber_CallbackMultiThread_announceBusBuffer__from__uint64_t__size_t euEGMT_announceBusBufferFu64s
#define Eur_EGrabber_CallbackMultiThread_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p euEGMT_announceNvidiaRdmaBufferFvpsvp
#define Eur_EGrabber_CallbackMultiThread_announceNvidiaRdmaBuffer__from__void_p__size_t euEGMT_announceNvidiaRdmaBufferFvps
#define Eur_EGrabber_CallbackMultiThread_getSystemPort__from__int euEGMT_getSystemPortFi
#define Eur_EGrabber_CallbackMultiThread_getInterfacePort__from__int euEGMT_getInterfacePortFi
#define Eur_EGrabber_CallbackMultiThread_getDevicePort__from__int euEGMT_getDevicePortFi
#define Eur_EGrabber_CallbackMultiThread_getStreamPort__from__int euEGMT_getStreamPortFi
#define Eur_EGrabber_CallbackMultiThread_getRemotePort__from__int euEGMT_getRemotePortFi
#define Eur_EGrabber_CallbackMultiThread_destroy euEGMT_destroy
#define Eur_Buffer_create__from__Eur_NewBufferData euBuffer_createFEur_NewBufferData
#define Eur_Buffer_push__from__Eur_EGrabberBase euBuffer_pushFEurEGBase
#define Eur_Buffer_getInfo__as__size_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAsFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__int8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAi8FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__int16_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAi16FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__int32_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAi32FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__int64_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAi64FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__uint8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAu8FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__uint16_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAu16FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__uint32_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAu32FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__uint64_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAu64FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__double__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAdFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__float__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAfFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__uint8_t_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAu8pFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__std_string__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoASsFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__void_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAvptrFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__std_vector_char__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoASvcFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__std_vector_std_string__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoASv_std_stringFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__bool8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAb8FEurEGBaseBIC
#define Eur_Buffer_getInfo__as__char_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoAcptrFEurEGBaseBIC
#define Eur_Buffer_getInfo__as__InfoCommandInfo__from__Eur_EGrabberBase__BUFFER_INFO_CMD euBuffer_getInfoA_CINFOFEurEGBaseBIC
#define Eur_Buffer_getUserPointer euBuffer_getUserPointer
#define Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p__int64_t__ImageSaveToDiskParams_p euBuffer_saveToDiskFEurEGBaseccpi64_ISTDP_p
#define Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p__int64_t euBuffer_saveToDiskFEurEGBaseccpi64
#define Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p euBuffer_saveToDiskFEurEGBaseccp
#define Eur_Buffer_getInfo__from__Eur_EGrabberBase euBuffer_getInfoFEurEGBase
#define Eur_Buffer_destroy euBuffer_destroy
#define Eur_cti_loading_error_create__from__const_char_p eucti_loading_error_createFccp
#define Eur_cti_loading_error_destroy eucti_loading_error_destroy
#define Eur_missing_gentl_symbol_create__from__const_char_p__const_char_p eumissing_gentl_symbol_createFccpccp
#define Eur_missing_gentl_symbol_destroy eumissing_gentl_symbol_destroy
#define Eur_unexpected_data_type_create__from__INFO_DATATYPE euunexpected_data_type_createFID
#define Eur_unexpected_data_type_destroy euunexpected_data_type_destroy
#define Eur_unexpected_data_size_create__from__size_t__size_t euunexpected_data_size_createFss
#define Eur_unexpected_data_size_destroy euunexpected_data_size_destroy
#define Eur_client_error_create__from__const_char_p euclient_error_createFccp
#define Eur_client_error_destroy euclient_error_destroy
#define Eur_gentl_error_create__from__GC_ERROR eugentl_error_createFGE
#define Eur_gentl_error_create__from__GC_ERROR__const_char_p eugentl_error_createFGEccp
#define Eur_gentl_error_destroy eugentl_error_destroy
#define Eur_genapi_error_create__from__GENAPI_ERROR_CODE eugenapi_error_createFGEC
#define Eur_genapi_error_parameter_count eugenapi_error_parameter_count
#define Eur_genapi_error_parameter_type__from__size_t eugenapi_error_parameter_typeFs
#define Eur_genapi_error_string_parameter__from__size_t eugenapi_error_string_parameterFs
#define Eur_genapi_error_integer_parameter__from__size_t eugenapi_error_integer_parameterFs
#define Eur_genapi_error_float_parameter__from__size_t eugenapi_error_float_parameterFs
#define Eur_genapi_error_add_string_parameter__from__char_p eugenapi_error_add_string_parameterFcp
#define Eur_genapi_error_add_integer_parameter__from__int64_t eugenapi_error_add_integer_parameterFi64
#define Eur_genapi_error_add_float_parameter__from__double eugenapi_error_add_float_parameterFd
#define Eur_genapi_error_destroy eugenapi_error_destroy
#define Eur_thread_error_create__from__const_char_p euthread_error_createFccp
#define Eur_thread_error_destroy euthread_error_destroy
#define Eur_internal_error_create euinternal_error_create
#define Eur_internal_error_destroy euinternal_error_destroy
#define Eur_not_allowed_create eunot_allowed_create
#define Eur_not_allowed_destroy eunot_allowed_destroy
#define Eur_OneOfAll_create euEurOOA_create
#define Eur_OneOfAll_destroy euEurOOA_destroy
#define Eur_OneOfAll_at_position_1 euEurOOA_at_position_1
#define Eur_OneOfAll_at_position_2 euEurOOA_at_position_2
#define Eur_OneOfAll_at_position_3 euEurOOA_at_position_3
#define Eur_OneOfAll_at_position_4 euEurOOA_at_position_4
#define Eur_OneOfAll_at_position_5 euEurOOA_at_position_5
#define Eur_OneOfAll_at_position_6 euEurOOA_at_position_6
#define Eur_OneOfAll_at_position_7 euEurOOA_at_position_7
#define Eur_OneOfAll_at_position_8 euEurOOA_at_position_8
#define Eur_getEventFilter__on__NewBufferData eugetEventFilterONewBufferData
#define Eur_getEventFilter__on__IoToolboxData eugetEventFilterOIoToolboxData
#define Eur_getEventFilter__on__CicData eugetEventFilterOCicData
#define Eur_getEventFilter__on__DataStreamData eugetEventFilterODataStreamData
#define Eur_getEventFilter__on__CxpInterfaceData eugetEventFilterOCxpInterfaceData
#define Eur_getEventFilter__on__DeviceErrorData eugetEventFilterODeviceErrorData
#define Eur_getEventFilter__on__CxpDeviceData eugetEventFilterOCxpDeviceData
#define Eur_getEventFilter__on__RemoteDeviceData eugetEventFilterORemoteDeviceData
#define Eur_EGrabberInfo_get_interfaceIndex euEurEGInfo_get_interfaceIndex
#define Eur_EGrabberInfo_get_deviceIndex euEurEGInfo_get_deviceIndex
#define Eur_EGrabberInfo_get_streamIndex euEurEGInfo_get_streamIndex
#define Eur_EGrabberInfo_get_interfaceID euEurEGInfo_get_interfaceID
#define Eur_EGrabberInfo_get_deviceID euEurEGInfo_get_deviceID
#define Eur_EGrabberInfo_get_streamID euEurEGInfo_get_streamID
#define Eur_EGrabberInfo_get_deviceVendorName euEurEGInfo_get_deviceVendorName
#define Eur_EGrabberInfo_get_deviceModelName euEurEGInfo_get_deviceModelName
#define Eur_EGrabberInfo_get_deviceDescription euEurEGInfo_get_deviceDescription
#define Eur_EGrabberInfo_get_streamDescription euEurEGInfo_get_streamDescription
#define Eur_EGrabberInfo_get_deviceUserID euEurEGInfo_get_deviceUserID
#define Eur_EGrabberInfo_get_deviceSerialNumber euEurEGInfo_get_deviceSerialNumber
#define Eur_EGrabberInfo_get_deviceLicenseStatus euEurEGInfo_get_deviceLicenseStatus
#define Eur_EGrabberInfo_get_tlType euEurEGInfo_get_tlType
#define Eur_EGrabberInfo_get_firmwareStatus euEurEGInfo_get_firmwareStatus
#define Eur_EGrabberInfo_get_fanStatus euEurEGInfo_get_fanStatus
#define Eur_EGrabberInfo_get_licenseStatus euEurEGInfo_get_licenseStatus
#define Eur_EGrabberInfo_get_isRemoteAvailable euEurEGInfo_get_isRemoteAvailable
#define Eur_EGrabberInfo_get_isDeviceReadOnly euEurEGInfo_get_isDeviceReadOnly
#define Eur_EGrabberCameraInfo_grabber_count euEurEGCameraInfo_grabber_count
#define Eur_EGrabberCameraInfo_grabber_at__from__size_t euEurEGCameraInfo_grabber_atFs
#define Eur_EGrabberCameraInfo_grabbers_push_back__from__Eur_EGrabberInfo euEurEGCameraInfo_grabbers_push_backFEurEGInfo
#define Eur_EGrabberCameraInfo_get_script euEurEGCameraInfo_get_script
#define Eur_EGrabber_CallbackOnDemand_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p euEGCOD_setNewBufferEventCallbackF_NBECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p euEGCOD_setIoToolboxEventCallbackF_ITECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setCicEventCallback__from__Euresys_CicEventCallback__void_p euEGCOD_setCicEventCallbackF_CECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p euEGCOD_setDataStreamEventCallbackF_DSECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p euEGCOD_setCxpInterfaceEventCallbackF_CIECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p euEGCOD_setDeviceErrorEventCallbackF_DEECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p euEGCOD_setCxpDeviceEventCallbackF_CDECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p euEGCOD_setRemoteDeviceEventCallbackF_RDECallbackvp
#define Eur_EGrabber_CallbackOnDemand_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p euEGCOD_setScriptUiCallbackFScriptUiCallbackvp
#define Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE euEGCOD_createFEur_EGenTLTHIHDHDH
#define Eur_EGrabber_CallbackSingleThread_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p euEGST_setNewBufferEventCallbackF_NBECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p euEGST_setIoToolboxEventCallbackF_ITECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setCicEventCallback__from__Euresys_CicEventCallback__void_p euEGST_setCicEventCallbackF_CECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p euEGST_setDataStreamEventCallbackF_DSECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p euEGST_setCxpInterfaceEventCallbackF_CIECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p euEGST_setDeviceErrorEventCallbackF_DEECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p euEGST_setCxpDeviceEventCallbackF_CDECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p euEGST_setRemoteDeviceEventCallbackF_RDECallbackvp
#define Eur_EGrabber_CallbackSingleThread_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p euEGST_setScriptUiCallbackFScriptUiCallbackvp
#define Eur_EGrabber_CallbackSingleThread_setThreadStartCallback__from__Euresys_ThreadStartCallback__void_p euEGST_setThreadStartCallbackF_TStartCvp
#define Eur_EGrabber_CallbackSingleThread_setThreadStopCallback__from__Euresys_ThreadStopCallback__void_p euEGST_setThreadStopCallbackF_TStopCvp
#define Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE euEGST_createFEur_EGenTLTHIHDHDH
#define Eur_EGrabber_CallbackMultiThread_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p euEGMT_setNewBufferEventCallbackF_NBECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p euEGMT_setIoToolboxEventCallbackF_ITECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setCicEventCallback__from__Euresys_CicEventCallback__void_p euEGMT_setCicEventCallbackF_CECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p euEGMT_setDataStreamEventCallbackF_DSECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p euEGMT_setCxpInterfaceEventCallbackF_CIECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p euEGMT_setDeviceErrorEventCallbackF_DEECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p euEGMT_setCxpDeviceEventCallbackF_CDECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p euEGMT_setRemoteDeviceEventCallbackF_RDECallbackvp
#define Eur_EGrabber_CallbackMultiThread_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p euEGMT_setScriptUiCallbackFScriptUiCallbackvp
#define Eur_EGrabber_CallbackMultiThread_setThreadStartCallback__from__Euresys_ThreadStartCallback__void_p euEGMT_setThreadStartCallbackF_TStartCvp
#define Eur_EGrabber_CallbackMultiThread_setThreadStopCallback__from__Euresys_ThreadStopCallback__void_p euEGMT_setThreadStopCallbackF_TStopCvp
#define Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE euEGMT_createFEur_EGenTLTHIHDHDH
#define Eur_ECameraBufferPush_CallbackOnDemand__from__Eur_NewBufferData euECameraBufferPush_CallbackOnDemandFEur_NewBufferData
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAi8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAi16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAi32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAi64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAu8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAu16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAu32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAu64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAdFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAfFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAu8pFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandASsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAvptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandASvcFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandASv_std_stringFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAb8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandAcptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackOnDemandA_CINFOFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackOnDemand__from__Eur_NewBufferData euECameraBufferGetInfo_CallbackOnDemandFEur_NewBufferData
#define Eur_ECameraBufferPush_CallbackSingleThread__from__Eur_NewBufferData euECameraBufferPush_CallbackSingleThreadFEur_NewBufferData
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAi8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAi16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAi32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAi64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAu8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAu16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAu32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAu64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAdFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAfFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAu8pFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadASsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAvptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadASvcFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadASv_std_stringFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAb8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadAcptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackSingleThreadA_CINFOFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackSingleThread__from__Eur_NewBufferData euECameraBufferGetInfo_CallbackSingleThreadFEur_NewBufferData
#define Eur_ECameraBufferPush_CallbackMultiThread__from__Eur_NewBufferData euECameraBufferPush_CallbackMultiThreadFEur_NewBufferData
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAi8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAi16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAi32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAi64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAu8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAu16FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAu32FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAu64FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAdFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAfFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAu8pFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadASsFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAvptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadASvcFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadASv_std_stringFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAb8FEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadAcptrFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD euECameraBufferGetInfo_CallbackMultiThreadA_CINFOFEur_NewBufferDataBIC
#define Eur_ECameraBufferGetInfo_CallbackMultiThread__from__Eur_NewBufferData euECameraBufferGetInfo_CallbackMultiThreadFEur_NewBufferData
#define Eur_action_GenApiActionyBuilder_destroy euaction_GenApiActionyBuilder_destroy
#define Eur_action_GenApiActionBuilder_destroy euaction_GenApiActionBuilder_destroy
#define Eur_action_GenApiActionBuilder_string euaction_GenApiActionBuilder_string
#define Eur_query_GenApiQueryBuilder_destroy euquery_GenApiQueryBuilder_destroy
#define Eur_query_GenApiQueryBuilder_string euquery_GenApiQueryBuilder_string
#define Eur_query_GenApiQueryBuilder_glob__from__const_char_p euquery_GenApiQueryBuilder_globFccp
#define Eur_query_GenApiQueryBuilder_regex__from__const_char_p euquery_GenApiQueryBuilder_regexFccp
#define Eur_getEuresysCtiPath eugetEuresysCtiPath
#define Eur_BufferInfo_destroy euBufferInfo_destroy
#define from_box_Eur_BufferInfo__from__cBufferInfo_p eufrom_box_Eur_BufferInfoFcBufferInfo_p
#define std_string_create eustd_string_create
#define std_string_destroy eustd_string_destroy
#define std_const_string_create eustd_const_string_create
#define std_const_string_destroy eustd_const_string_destroy
#define std_string_c_str eustd_string_c_str
#define std_string_assign__from__const_char_p eustd_string_assignFccp
#define to_box_std_string__from__const_char_p__size_t euto_box_std_stringFccps
#define from_box_std_string__from__const_char_pp__size_t_p eufrom_box_std_stringFccppsp
#define std_string_assign_operator__from__std_string eustd_string_assign_operatorFSs
#define std_vector_char_create eustd_vector_char_create
#define std_vector_char_size eustd_vector_char_size
#define std_vector_char_destroy eustd_vector_char_destroy
#define std_vector_char_at__from__size_t eustd_vector_char_atFs
#define std_vector_char_push_back__from__char eustd_vector_char_push_backFc
#define to_box_std_vector_char__from__const_char_p__size_t euto_box_std_vector_charFccps
#define from_box_std_vector_char__from__const_char_pp__size_t_p eufrom_box_std_vector_charFccppsp
#define std_vector_std_string_create eustd_vector_std_string_create
#define std_vector_std_string_size eustd_vector_std_string_size
#define std_vector_std_string_destroy eustd_vector_std_string_destroy
#define std_vector_std_string_at__from__size_t eustd_vector_std_string_atFs
#define std_vector_EURESYS_EVENT_GET_DATA_ENTRY_create eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_create
#define std_vector_EURESYS_EVENT_GET_DATA_ENTRY_size eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_size
#define std_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy
#define std_vector_EURESYS_EVENT_GET_DATA_ENTRY_at__from__size_t eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_atFs
#define std_vector_EURESYS_EVENT_GET_DATA_ENTRY_push_back__from__EURESYS_EVENT_GET_DATA_ENTRY eustd_vector_EEGDE_push_backFEEGDE
#define to_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRY__from__const_EURESYS_EVENT_GET_DATA_ENTRY_p__size_t euto_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ps
#define from_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRY__from__const_EURESYS_EVENT_GET_DATA_ENTRY_pp__size_t_p eufrom_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ppsp
#define std_vector_BUFFER_HANDLE_create eustd_vector_BUFFER_HANDLE_create
#define std_vector_BUFFER_HANDLE_size eustd_vector_BUFFER_HANDLE_size
#define std_vector_BUFFER_HANDLE_destroy eustd_vector_BUFFER_HANDLE_destroy
#define std_vector_BUFFER_HANDLE_at__from__size_t eustd_vector_BUFFER_HANDLE_atFs
#define std_vector_BUFFER_HANDLE_push_back__from__BUFFER_HANDLE eustd_vector_BH_push_backFBH
#define to_box_std_vector_BUFFER_HANDLE__from__const_BUFFER_HANDLE_p__size_t euto_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ps
#define from_box_std_vector_BUFFER_HANDLE__from__const_BUFFER_HANDLE_pp__size_t_p eufrom_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ppsp
#define std_vector_PORT_REGISTER_STACK_ENTRY_create eustd_vector_PORT_REGISTER_STACK_ENTRY_create
#define std_vector_PORT_REGISTER_STACK_ENTRY_size eustd_vector_PORT_REGISTER_STACK_ENTRY_size
#define std_vector_PORT_REGISTER_STACK_ENTRY_destroy eustd_vector_PORT_REGISTER_STACK_ENTRY_destroy
#define std_vector_PORT_REGISTER_STACK_ENTRY_at__from__size_t eustd_vector_PORT_REGISTER_STACK_ENTRY_atFs
#define std_vector_PORT_REGISTER_STACK_ENTRY_push_back__from__PORT_REGISTER_STACK_ENTRY eustd_vector_PRSE_push_backFPRSE
#define to_box_std_vector_PORT_REGISTER_STACK_ENTRY__from__const_PORT_REGISTER_STACK_ENTRY_p__size_t euto_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ps
#define from_box_std_vector_PORT_REGISTER_STACK_ENTRY__from__const_PORT_REGISTER_STACK_ENTRY_pp__size_t_p eufrom_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ppsp
#define std_vector_PORT_HANDLE_create eustd_vector_PORT_HANDLE_create
#define std_vector_PORT_HANDLE_size eustd_vector_PORT_HANDLE_size
#define std_vector_PORT_HANDLE_destroy eustd_vector_PORT_HANDLE_destroy
#define std_vector_PORT_HANDLE_at__from__size_t eustd_vector_PORT_HANDLE_atFs
#define std_vector_PORT_HANDLE_push_back__from__PORT_HANDLE eustd_vector_PH_push_backFPH
#define to_box_std_vector_PORT_HANDLE__from__const_PORT_HANDLE_p__size_t euto_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ps
#define from_box_std_vector_PORT_HANDLE__from__const_PORT_HANDLE_pp__size_t_p eufrom_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ppsp
#define std_map_std_string_std_string_create eustd_map_std_string_std_string_create
#define std_map_std_string_std_string_destroy eustd_map_std_string_std_string_destroy
#define std_map_std_string_std_string_size eustd_map_std_string_std_string_size
#define std_map_std_string_std_string_at__from__std_map_std_string_std_string__std_string eustd_map_std_string_std_string_atFSm_std_string_std_stringSs
#define std_map_std_string_std_string_at__from__std_string eustd_map_std_string_std_string_atFSs
#define std_map_std_string_std_string_at__from__size_t__std_string_p__std_string_p eustd_map_std_string_std_string_atFsSs_pSs_p
#define std_runtime_error_create__from__const_char_p eustd_runtime_error_createFccp
#define std_runtime_error_destroy eustd_runtime_error_destroy
#define std_runtime_error_what eustd_runtime_error_what
#define std_logic_error_create__from__const_char_p eustd_logic_error_createFccp
#define std_logic_error_destroy eustd_logic_error_destroy
#define std_logic_error_what eustd_logic_error_what
#define std_exception_create__from__const_char_p eustd_exception_createFccp
#define std_exception_destroy eustd_exception_destroy
#define std_exception_what eustd_exception_what
#define from_box_Eur_BufferIndexRange__from__size_t_p__size_t_p__bool8_t_p eufrom_box_Eur_BufferIndexRangeFspspb8_p
#define Eur_NewBufferData__as__Euresys_NewBufferData euNewBufferDataANewBufferData
#define Eur_IoToolboxData__as__Euresys_IoToolboxData euIoToolboxDataAIoToolboxData
#define Eur_CicData__as__Euresys_CicData euCicDataACicData
#define Eur_DataStreamData__as__Euresys_DataStreamData euDataStreamDataADataStreamData
#define Eur_CxpInterfaceData__as__Euresys_CxpInterfaceData euCxpInterfaceDataACxpInterfaceData
#define Eur_DeviceErrorData__as__Euresys_DeviceErrorData euDeviceErrorDataADeviceErrorData
#define Eur_CxpDeviceData__as__Euresys_CxpDeviceData euCxpDeviceDataACxpDeviceData
#define Eur_RemoteDeviceData__as__Euresys_RemoteDeviceData euRemoteDeviceDataARemoteDeviceData
#define to_box_Eur_NewBufferData__from__const_struct_Euresys_NewBufferData_s_p euto_box_Eur_NewBufferDataFcst_NewBufferData_s_p
#define to_box_Eur_EGrabberInfo__from__cEGrabberInfo euto_box_EurEGInfoFcEGrabberInfo
#define from_box_Eur_EGrabberInfo__from__cEGrabberInfo_p eufrom_box_EurEGInfoFcEGrabberInfo_p
#define to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt1_p euto_box_EurEGInfoFcEGrabberInfoExt1_p
#define from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt1_p eufrom_box_EurEGInfoFcEGrabberInfoExt1_p
#define to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt2_p euto_box_EurEGInfoFcEGrabberInfoExt2_p
#define from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt2_p eufrom_box_EurEGInfoFcEGrabberInfoExt2_p
#define to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt3_p euto_box_EurEGInfoFcEGrabberInfoExt3_p
#define from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt3_p eufrom_box_EurEGInfoFcEGrabberInfoExt3_p
#define to_box_Eur_EGrabberCameraInfo__from__cEGrabberCameraInfoExt1_p euto_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p
#define from_box_Eur_EGrabberCameraInfo__from__cEGrabberCameraInfoExt1_p eufrom_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p
#define Eur_Internal_lastError_get__as__Eur_genapi_error euInternal_lastError_getAEur_genapi_error
#define Eur_Internal_lastCallbackError_set__from__Eur_genapi_error euInternal_lastCallbackError_setFEur_genapi_error
#define Eur_Internal_lastError_get__as__Eur_cti_loading_error euInternal_lastError_getAEur_cti_loading_error
#define Eur_Internal_lastCallbackError_set__from__Eur_cti_loading_error euInternal_lastCallbackError_setFEur_cti_loading_error
#define Eur_Internal_lastError_get__as__Eur_missing_gentl_symbol euInternal_lastError_getAEur_missing_gentl_symbol
#define Eur_Internal_lastCallbackError_set__from__Eur_missing_gentl_symbol euInternal_lastCallbackError_setFEur_missing_gentl_symbol
#define Eur_Internal_lastError_get__as__Eur_unexpected_data_type euInternal_lastError_getAEur_unexpected_data_type
#define Eur_Internal_lastCallbackError_set__from__Eur_unexpected_data_type euInternal_lastCallbackError_setFEur_unexpected_data_type
#define Eur_Internal_lastError_get__as__Eur_unexpected_data_size euInternal_lastError_getAEur_unexpected_data_size
#define Eur_Internal_lastCallbackError_set__from__Eur_unexpected_data_size euInternal_lastCallbackError_setFEur_unexpected_data_size
#define Eur_Internal_lastError_get__as__Eur_client_error euInternal_lastError_getAEur_client_error
#define Eur_Internal_lastCallbackError_set__from__Eur_client_error euInternal_lastCallbackError_setFEur_client_error
#define Eur_Internal_lastError_get__as__Eur_gentl_error euInternal_lastError_getAEur_gentl_error
#define Eur_Internal_lastCallbackError_set__from__Eur_gentl_error euInternal_lastCallbackError_setFEur_gentl_error
#define Eur_Internal_lastError_get__as__Eur_thread_error euInternal_lastError_getAEur_thread_error
#define Eur_Internal_lastCallbackError_set__from__Eur_thread_error euInternal_lastCallbackError_setFEur_thread_error
#define Eur_Internal_lastError_get__as__Eur_internal_error euInternal_lastError_getAEur_internal_error
#define Eur_Internal_lastCallbackError_set__from__Eur_internal_error euInternal_lastCallbackError_setFEur_internal_error
#define Eur_Internal_lastError_get__as__Eur_not_allowed euInternal_lastError_getAEur_not_allowed
#define Eur_Internal_lastCallbackError_set__from__Eur_not_allowed euInternal_lastCallbackError_setFEur_not_allowed
#define Eur_Internal_lastError_get__as__std_runtime_error euInternal_lastError_getAstd_runtime_error
#define Eur_Internal_lastCallbackError_set__from__std_runtime_error euInternal_lastCallbackError_setFstd_runtime_error
#define Eur_Internal_lastError_get__as__std_logic_error euInternal_lastError_getAstd_logic_error
#define Eur_Internal_lastCallbackError_set__from__std_logic_error euInternal_lastCallbackError_setFstd_logic_error
#define Eur_Internal_lastError_get__as__std_exception euInternal_lastError_getAstd_exception
#define Eur_Internal_lastCallbackError_set__from__std_exception euInternal_lastCallbackError_setFstd_exception
#define Eur_Internal_lastError_getCode euInternal_lastError_getCode
#define Eur_Internal_lastCallbackError_setCallbackCriticalError euInternal_lastCallbackError_setCallbackCriticalError
#define from_box_Eur_cti_loading_error_path eufrom_box_Eur_cti_loading_error_path
#define from_box_Eur_missing_gentl_symbol_path eufrom_box_Eur_missing_gentl_symbol_path
#define from_box_Eur_missing_gentl_symbol_symbol eufrom_box_Eur_missing_gentl_symbol_symbol
#define from_box_Eur_unexpected_data_type eufrom_box_Eur_unexpected_data_type
#define from_box_Eur_unexpected_data_size__from__size_t_p__size_t_p eufrom_box_Eur_unexpected_data_sizeFspsp
#define from_box_Eur_gentl_error_gc_err eufrom_box_Eur_gentl_error_gc_err
#define from_box_Eur_gentl_error_description eufrom_box_Eur_gentl_error_description
#define from_box_Eur_genapi_error eufrom_box_Eur_genapi_error
#define Eur_genapi_error_string_parameter__as__std_string__from__size_t eugenapi_error_string_parameterASsFs
#define checkAllBoxedTypeCount eucheckAllBoxedTypeCount
#endif

CEGRABBER_API(euBufferIndexRange_create(Eur_BufferIndexRange *bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_createFEur_BufferIndexRange(Eur_BufferIndexRange ref_range, Eur_BufferIndexRange *bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_createFs(size_t begin /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_createFss(size_t begin /* def=0 */, size_t end /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_createFssb8(size_t begin /* def=0 */, size_t end /* def=0 */, bool8_t reverse /* def=false */, Eur_BufferIndexRange *bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_destroy(Eur_BufferIndexRange bufferindexrangeBox));
CEGRABBER_API(euBufferIndexRange_indexAtFs(Eur_BufferIndexRange bufferindexrangeBox, size_t offset, size_t *returnValue));
CEGRABBER_API(euBufferIndexRange_size(Eur_BufferIndexRange bufferindexrangeBox, size_t *returnValue));
CEGRABBER_API(euBufferInfo_destroy(Eur_BufferInfo info));
CEGRABBER_API(euBuffer_createFEur_NewBufferData(Eur_NewBufferData ref_data, Eur_Buffer *bufferBox));
CEGRABBER_API(euBuffer_destroy(Eur_Buffer bufferBox));
CEGRABBER_API(euBuffer_getInfoASsFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euBuffer_getInfoASv_std_stringFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euBuffer_getInfoASvcFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euBuffer_getInfoA_CINFOFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euBuffer_getInfoAb8FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAcptrFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euBuffer_getInfoAdFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euBuffer_getInfoAfFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euBuffer_getInfoAi16FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAi32FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAi64FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAi8FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAsFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAu16FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAu32FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAu64FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAu8FEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euBuffer_getInfoAu8pFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euBuffer_getInfoAvptrFEurEGBaseBIC(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euBuffer_getInfoFEurEGBase(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, Eur_BufferInfo *returnValue));
CEGRABBER_API(euBuffer_getUserPointer(Eur_Buffer bufferBox, void * *returnValue));
CEGRABBER_API(euBuffer_pushFEurEGBase(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber));
CEGRABBER_API(euBuffer_saveToDiskFEurEGBaseccp(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath));
CEGRABBER_API(euBuffer_saveToDiskFEurEGBaseccpi64(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */));
CEGRABBER_API(euBuffer_saveToDiskFEurEGBaseccpi64_ISTDP_p(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */));
CEGRABBER_API(euBusMemory_createFu64s(uint64_t busAddress, size_t size, Eur_BusMemory *busmemoryBox));
CEGRABBER_API(euBusMemory_createFu64svp(uint64_t busAddress, size_t size, void *userPointer /* def=0 */, Eur_BusMemory *busmemoryBox));
CEGRABBER_API(euBusMemory_destroy(Eur_BusMemory busmemoryBox));
CEGRABBER_API(euCicDataACicData(Eur_CicData data, const struct Euresys_CicData_s * *returnValue));
CEGRABBER_API(euCicData_create(Eur_CicData *cicdataBox));
CEGRABBER_API(euCicData_destroy(Eur_CicData cicdataBox));
CEGRABBER_API(euCoaxlink(std_string *returnValue));
CEGRABBER_API(euCxpDeviceDataACxpDeviceData(Eur_CxpDeviceData data, const struct Euresys_CxpDeviceData_s * *returnValue));
CEGRABBER_API(euCxpDeviceData_create(Eur_CxpDeviceData *cxpdevicedataBox));
CEGRABBER_API(euCxpDeviceData_destroy(Eur_CxpDeviceData cxpdevicedataBox));
CEGRABBER_API(euCxpInterfaceDataACxpInterfaceData(Eur_CxpInterfaceData data, const struct Euresys_CxpInterfaceData_s * *returnValue));
CEGRABBER_API(euCxpInterfaceData_create(Eur_CxpInterfaceData *cxpinterfacedataBox));
CEGRABBER_API(euCxpInterfaceData_destroy(Eur_CxpInterfaceData cxpinterfacedataBox));
CEGRABBER_API(euDataStreamDataADataStreamData(Eur_DataStreamData data, const struct Euresys_DataStreamData_s * *returnValue));
CEGRABBER_API(euDataStreamData_create(Eur_DataStreamData *datastreamdataBox));
CEGRABBER_API(euDataStreamData_destroy(Eur_DataStreamData datastreamdataBox));
CEGRABBER_API(euDeviceErrorDataADeviceErrorData(Eur_DeviceErrorData data, const struct Euresys_DeviceErrorData_s * *returnValue));
CEGRABBER_API(euDeviceErrorData_create(Eur_DeviceErrorData *deviceerrordataBox));
CEGRABBER_API(euDeviceErrorData_destroy(Eur_DeviceErrorData deviceerrordataBox));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadASsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadASv_std_stringFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadASvcFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadA_CINFOFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAb8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAcptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAdFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAfFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAi16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAi32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAi64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAi8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAu16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAu32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAu64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAu8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAu8pFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadAvptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackMultiThreadFEur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandASsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandASv_std_stringFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandASvcFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandA_CINFOFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAb8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAcptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAdFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAfFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAi16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAi32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAi64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAi8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAu16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAu32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAu64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAu8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAu8pFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandAvptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackOnDemandFEur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadASsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadASv_std_stringFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadASvcFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadA_CINFOFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAb8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAcptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAdFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAfFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAi16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAi32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAi64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAi8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAsFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAu16FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAu32FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAu64FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAu8FEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAu8pFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadAvptrFEur_NewBufferDataBIC(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euECameraBufferGetInfo_CallbackSingleThreadFEur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue));
CEGRABBER_API(euECameraBufferPush_CallbackMultiThreadFEur_NewBufferData(Eur_NewBufferData ref_data));
CEGRABBER_API(euECameraBufferPush_CallbackOnDemandFEur_NewBufferData(Eur_NewBufferData ref_data));
CEGRABBER_API(euECameraBufferPush_CallbackSingleThreadFEur_NewBufferData(Eur_NewBufferData ref_data));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_BusMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_GenTLMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_GenTLMemorys(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_NvidiaRdmaMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_UserMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_UserMemoryArray(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceAndQueueFEur_UserMemoryArrayb8(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_announceBusBufferFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGCOD_announceBusBufferFu64svp(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGCOD_announceNvidiaRdmaBufferFvps(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGCOD_announceNvidiaRdmaBufferFvpsvp(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGCOD_attachEventODeviceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGCOD_attachEventOInterfaceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGCOD_attachEventORemoteModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGCOD_attachEventOStreamModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGCOD_attachEventOSystemModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGCOD_cancelEventFilterFs(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter));
CEGRABBER_API(euEGCOD_cancelEventWAny(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelEventWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_cancelPop(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_createFEurEGCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEurEGCameraInfoDAF(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEurEGInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEurEGInfoDAF(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEurEGInfoDAFb8(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTLTHIHDHDH(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackOnDemand *egrabber));
CEGRABBER_API(euEGCOD_createFEur_EGenTLi(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTLii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTLiii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTLiiiDAF(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_createFEur_EGenTLiiiDAFb8(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox));
CEGRABBER_API(euEGCOD_destroy(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWAll(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_disableEventWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWAll(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_enableEventWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_executeODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command));
CEGRABBER_API(euEGCOD_executeOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command));
CEGRABBER_API(euEGCOD_executeORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command));
CEGRABBER_API(euEGCOD_executeOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command));
CEGRABBER_API(euEGCOD_executeOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command));
CEGRABBER_API(euEGCOD_flushBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushBuffersFAQT(Eur_EGrabber_CallbackOnDemand egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */));
CEGRABBER_API(euEGCOD_flushEventWAll(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_flushEventWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_gcReadPortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGCOD_gcReadPortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGCOD_gcReadPortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGCOD_gcReadPortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGCOD_gcReadPortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGCOD_gcReadPortODeviceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortOInterfaceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortORemoteModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortOStreamModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortOSystemModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortStringODeviceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortStringOInterfaceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortStringORemoteModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortStringOStreamModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortStringOSystemModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASsODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASsOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASsORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASsOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASsOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASv_std_stringODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASv_std_stringOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASv_std_stringORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASv_std_stringOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASv_std_stringOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASvcODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASvcOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASvcORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASvcOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueASvcOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueA_CINFOODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueA_CINFOOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueA_CINFOORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueA_CINFOOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueA_CINFOOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAb8ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAb8OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAb8ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAb8OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAb8OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAcptrODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAcptrOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAcptrORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAcptrOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAcptrOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAdODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAdOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAdORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAdOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAdOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAfODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAfOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAfORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAfOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAfOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi16ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi16OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi16ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi16OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi16OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi32ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi32OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi32ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi32OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi32OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi64ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi64OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi64ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi64OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi64OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi8ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi8OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi8ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi8OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAi8OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAsODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAsOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAsORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAsOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAsOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu16ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu16OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu16ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu16OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu16OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu32ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu32OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu32ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu32OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu32OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu64ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu64OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu64ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu64OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu64OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8ODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8OInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8ORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8OStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8OSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8pODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8pOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8pORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8pOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAu8pOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAvptrODeviceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAvptrOInterfaceModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAvptrORemoteModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAvptrOStreamModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGCOD_gcReadPortValueAvptrOSystemModuleFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGCOD_gcWritePortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGCOD_gcWritePortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGCOD_gcWritePortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGCOD_gcWritePortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGCOD_gcWritePortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGCOD_gcWritePortODeviceModuleFu64Svc(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_gcWritePortOInterfaceModuleFu64Svc(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_gcWritePortORemoteModuleFu64Svc(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_gcWritePortOStreamModuleFu64Svc(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_gcWritePortOSystemModuleFu64Svc(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_gcWritePortValueWdODeviceModuleFu64d(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGCOD_gcWritePortValueWdOInterfaceModuleFu64d(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGCOD_gcWritePortValueWdORemoteModuleFu64d(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGCOD_gcWritePortValueWdOStreamModuleFu64d(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGCOD_gcWritePortValueWdOSystemModuleFu64d(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGCOD_gcWritePortValueWfODeviceModuleFu64f(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGCOD_gcWritePortValueWfOInterfaceModuleFu64f(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGCOD_gcWritePortValueWfORemoteModuleFu64f(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGCOD_gcWritePortValueWfOStreamModuleFu64f(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGCOD_gcWritePortValueWfOSystemModuleFu64f(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi16ODeviceModuleFu64i16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi16OInterfaceModuleFu64i16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi16ORemoteModuleFu64i16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi16OStreamModuleFu64i16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi16OSystemModuleFu64i16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi32ODeviceModuleFu64i32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi32OInterfaceModuleFu64i32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi32ORemoteModuleFu64i32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi32OStreamModuleFu64i32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi32OSystemModuleFu64i32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi64ODeviceModuleFu64i64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi64OInterfaceModuleFu64i64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi64ORemoteModuleFu64i64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi64OStreamModuleFu64i64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi64OSystemModuleFu64i64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi8ODeviceModuleFu64i8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi8OInterfaceModuleFu64i8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi8ORemoteModuleFu64i8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi8OStreamModuleFu64i8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWi8OSystemModuleFu64i8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWsODeviceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWsOInterfaceModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWsORemoteModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWsOStreamModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWsOSystemModuleFu64s(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu16ODeviceModuleFu64u16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu16OInterfaceModuleFu64u16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu16ORemoteModuleFu64u16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu16OStreamModuleFu64u16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu16OSystemModuleFu64u16(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu32ODeviceModuleFu64u32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu32OInterfaceModuleFu64u32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu32ORemoteModuleFu64u32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu32OStreamModuleFu64u32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu32OSystemModuleFu64u32(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu64ODeviceModuleFu64u64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu64OInterfaceModuleFu64u64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu64ORemoteModuleFu64u64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu64OStreamModuleFu64u64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu64OSystemModuleFu64u64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu8ODeviceModuleFu64u8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu8OInterfaceModuleFu64u8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu8ORemoteModuleFu64u8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu8OStreamModuleFu64u8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGCOD_gcWritePortValueWu8OSystemModuleFu64u8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGCOD_getBufferDataFs(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoASsFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoASv_std_stringFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoASvcFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoA_CINFOFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAb8FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAcptrFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAdFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAfFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAi16FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAi32FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAi64FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAi8FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAsFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAu16FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAu32FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAu64FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAu8FsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAu8pFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_getBufferInfoAvptrFsBIC(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGCOD_getDevicePortFi(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGCOD_getFloatODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGCOD_getFloatOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGCOD_getFloatORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGCOD_getFloatOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGCOD_getFloatOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGCOD_getHeight(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoASsODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASsOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASsOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASsOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASv_std_stringODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASv_std_stringOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASv_std_stringOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASv_std_stringOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getInfoASvcODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_getInfoASvcOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_getInfoASvcOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_getInfoASvcOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGCOD_getInfoA_CINFOODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_getInfoA_CINFOOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_getInfoA_CINFOOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_getInfoA_CINFOOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGCOD_getInfoAb8ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAb8OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAb8OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAb8OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAcptrODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAcptrOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAcptrOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAcptrOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAdODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGCOD_getInfoAdOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGCOD_getInfoAdOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGCOD_getInfoAdOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGCOD_getInfoAfODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGCOD_getInfoAfOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGCOD_getInfoAfOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGCOD_getInfoAfOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi16ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi16OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi16OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi16OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi32ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi32OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi32OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi32OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi64ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi64OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi64OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi64OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi8ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi8OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi8OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAi8OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAsODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAsOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAsOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAsOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu16ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu16OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu16OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu16OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu32ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu32OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu32OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu32OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu64ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu64OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu64OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu64OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8ODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8OInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8OStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8OSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8pODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8pOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8pOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAu8pOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAvptrODeviceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAvptrOInterfaceModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAvptrOStreamModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGCOD_getInfoAvptrOSystemModuleFi32(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGCOD_getIntegerODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getIntegerOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getIntegerORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getIntegerOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getIntegerOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGCOD_getInterfacePortFi(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGCOD_getLastEventGrabberIndex(Eur_EGrabber_CallbackOnDemand egrabberBox, int *returnValue));
CEGRABBER_API(euEGCOD_getPayloadSize(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountFilterFs(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWAny(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPendingEventCountWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_getPixelFormat(Eur_EGrabber_CallbackOnDemand egrabberBox, std_string *returnValue));
CEGRABBER_API(euEGCOD_getRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGCOD_getRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGCOD_getRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGCOD_getRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGCOD_getRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGCOD_getRemotePortFi(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGCOD_getStreamPortFi(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGCOD_getStringDataODeviceModuleFccpSvc(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_getStringDataOInterfaceModuleFccpSvc(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_getStringDataORemoteModuleFccpSvc(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_getStringDataOStreamModuleFccpSvc(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_getStringDataOSystemModuleFccpSvc(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGCOD_getStringListODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringListOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringListORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringListOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringListOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGCOD_getStringOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGCOD_getSystemPortFi(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGCOD_getWidth(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_interruptScriptFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *scriptId));
CEGRABBER_API(euEGCOD_invalidateODeviceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature));
CEGRABBER_API(euEGCOD_invalidateOInterfaceModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature));
CEGRABBER_API(euEGCOD_invalidateORemoteModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature));
CEGRABBER_API(euEGCOD_invalidateOStreamModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature));
CEGRABBER_API(euEGCOD_invalidateOSystemModuleFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature));
CEGRABBER_API(euEGCOD_isOpenODeviceModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_isOpenOInterfaceModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_isOpenORemoteModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_isOpenOStreamModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_isOpenOSystemModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_mementoFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *text));
CEGRABBER_API(euEGCOD_mementoFucucccp(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char verbosity, unsigned char kind, const char *text));
CEGRABBER_API(euEGCOD_mementoWaveDownFucuc(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGCOD_mementoWaveNoValueFucuc(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGCOD_mementoWaveResetFucuc(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGCOD_mementoWaveUpFucuc(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGCOD_mementoWaveValueFucucu64(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id, uint64_t value));
CEGRABBER_API(euEGCOD_onCicEventFEur_CicData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CicData ref_data));
CEGRABBER_API(euEGCOD_onCxpDeviceEventFEur_CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpDeviceData ref_data));
CEGRABBER_API(euEGCOD_onCxpInterfaceEventFEur_CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpInterfaceData ref_data));
CEGRABBER_API(euEGCOD_onDataStreamEventFEur_DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DataStreamData ref_data));
CEGRABBER_API(euEGCOD_onDeviceErrorEventFEur_DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DeviceErrorData ref_data));
CEGRABBER_API(euEGCOD_onIoToolboxEventFEur_IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_IoToolboxData ref_data));
CEGRABBER_API(euEGCOD_onNewBufferEventFEur_NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_data));
CEGRABBER_API(euEGCOD_onRemoteDeviceEventFEur_RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_RemoteDeviceData ref_data));
CEGRABBER_API(euEGCOD_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue));
CEGRABBER_API(euEGCOD_pop(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEGCOD_popEventFilterFsu64EurOOAi_p(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, Eur_OneOfAll ref_oneOf, int *position, size_t *returnValue));
CEGRABBER_API(euEGCOD_popFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout /* def=GENTL_INFINITE */, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEGCOD_processEventFilterFs(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventFilterFsu64(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWAny(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWAnyFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCicData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCicDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCxpDeviceDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWCxpInterfaceDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWDataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWDataStreamDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWDeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWDeviceErrorDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWIoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWIoToolboxDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWNewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWNewBufferDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWRemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGCOD_processEventWRemoteDeviceDataFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGCOD_pushFEur_NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_buffer));
CEGRABBER_API(euEGCOD_queueFEur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGCOD_reallocBuffersFs(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_reallocBuffersFss(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGCOD_resetBufferQueue(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_resetBufferQueueFEur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGCOD_revokeFEur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGCOD_runScriptFccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script));
CEGRABBER_API(euEGCOD_runScriptFccpvp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script, void *context /* def=0 */));
CEGRABBER_API(euEGCOD_setCicEventCallbackF_CECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CicEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setCxpDeviceEventCallbackF_CDECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setCxpInterfaceEventCallbackF_CIECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpInterfaceEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setDataStreamEventCallbackF_DSECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DataStreamEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setDeviceErrorEventCallbackF_DEECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DeviceErrorEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setFloatODeviceModuleFccpd(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGCOD_setFloatOInterfaceModuleFccpd(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGCOD_setFloatORemoteModuleFccpd(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGCOD_setFloatOStreamModuleFccpd(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGCOD_setFloatOSystemModuleFccpd(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGCOD_setIntegerODeviceModuleFccpi64(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGCOD_setIntegerOInterfaceModuleFccpi64(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGCOD_setIntegerORemoteModuleFccpi64(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGCOD_setIntegerOStreamModuleFccpi64(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGCOD_setIntegerOSystemModuleFccpi64(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGCOD_setIoToolboxEventCallbackF_ITECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_IoToolboxEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setNewBufferEventCallbackF_NBECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_NewBufferEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGCOD_setRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGCOD_setRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGCOD_setRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGCOD_setRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGCOD_setRemoteDeviceEventCallbackF_RDECallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_RemoteDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGCOD_setScriptUiCallbackFScriptUiCallbackvp(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_ScriptUiCallback callback, void *context));
CEGRABBER_API(euEGCOD_setStringODeviceModuleFccpccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGCOD_setStringOInterfaceModuleFccpccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGCOD_setStringORemoteModuleFccpccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGCOD_setStringOStreamModuleFccpccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGCOD_setStringOSystemModuleFccpccp(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGCOD_shouldReallocBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_shouldReannounceBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGCOD_shutdown(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_start(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGCOD_startFu64(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */));
CEGRABBER_API(euEGCOD_startFu64b8(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */));
CEGRABBER_API(euEGCOD_stop(Eur_EGrabber_CallbackOnDemand egrabberBox));
CEGRABBER_API(euEGMT_announceAndQueueFEur_BusMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_GenTLMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_GenTLMemorys(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_NvidiaRdmaMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_UserMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_UserMemoryArray(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceAndQueueFEur_UserMemoryArrayb8(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_announceBusBufferFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGMT_announceBusBufferFu64svp(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGMT_announceNvidiaRdmaBufferFvps(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGMT_announceNvidiaRdmaBufferFvpsvp(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGMT_attachEventODeviceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGMT_attachEventOInterfaceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGMT_attachEventORemoteModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGMT_attachEventOStreamModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGMT_attachEventOSystemModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGMT_createFEurEGCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEurEGCameraInfoDAF(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEurEGInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEurEGInfoDAF(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEurEGInfoDAFb8(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTLTHIHDHDH(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackMultiThread *egrabber));
CEGRABBER_API(euEGMT_createFEur_EGenTLi(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTLii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTLiii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTLiiiDAF(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_createFEur_EGenTLiiiDAFb8(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox));
CEGRABBER_API(euEGMT_destroy(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWAll(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWCicData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWCxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWCxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWDataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWDeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWIoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWNewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_disableEventWRemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWAll(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWCicData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWCxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWCxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWDataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWDeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWIoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWNewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_enableEventWRemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_executeODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command));
CEGRABBER_API(euEGMT_executeOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command));
CEGRABBER_API(euEGMT_executeORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command));
CEGRABBER_API(euEGMT_executeOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command));
CEGRABBER_API(euEGMT_executeOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command));
CEGRABBER_API(euEGMT_flushBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushBuffersFAQT(Eur_EGrabber_CallbackMultiThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */));
CEGRABBER_API(euEGMT_flushEventWAll(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWCicData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWCxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWCxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWDataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWDeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWIoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWNewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_flushEventWRemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_gcReadPortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGMT_gcReadPortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGMT_gcReadPortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGMT_gcReadPortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGMT_gcReadPortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGMT_gcReadPortODeviceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortOInterfaceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortORemoteModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortOStreamModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortOSystemModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortStringODeviceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortStringOInterfaceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortStringORemoteModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortStringOStreamModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortStringOSystemModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASsODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASsOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASsORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASsOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASsOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASv_std_stringODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASv_std_stringOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASv_std_stringORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASv_std_stringOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASv_std_stringOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASvcODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASvcOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASvcORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASvcOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueASvcOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueA_CINFOODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueA_CINFOOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueA_CINFOORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueA_CINFOOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueA_CINFOOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAb8ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAb8OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAb8ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAb8OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAb8OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAcptrODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAcptrOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAcptrORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAcptrOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAcptrOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAdODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAdOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAdORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAdOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAdOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAfODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAfOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAfORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAfOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAfOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi16ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi16OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi16ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi16OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi16OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi32ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi32OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi32ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi32OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi32OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi64ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi64OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi64ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi64OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi64OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi8ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi8OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi8ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi8OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAi8OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAsODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAsOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAsORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAsOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAsOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu16ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu16OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu16ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu16OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu16OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu32ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu32OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu32ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu32OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu32OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu64ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu64OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu64ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu64OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu64OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8ODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8OInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8ORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8OStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8OSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8pODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8pOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8pORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8pOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAu8pOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAvptrODeviceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAvptrOInterfaceModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAvptrORemoteModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAvptrOStreamModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGMT_gcReadPortValueAvptrOSystemModuleFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGMT_gcWritePortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGMT_gcWritePortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGMT_gcWritePortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGMT_gcWritePortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGMT_gcWritePortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGMT_gcWritePortODeviceModuleFu64Svc(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGMT_gcWritePortOInterfaceModuleFu64Svc(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGMT_gcWritePortORemoteModuleFu64Svc(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGMT_gcWritePortOStreamModuleFu64Svc(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGMT_gcWritePortOSystemModuleFu64Svc(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGMT_gcWritePortValueWdODeviceModuleFu64d(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGMT_gcWritePortValueWdOInterfaceModuleFu64d(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGMT_gcWritePortValueWdORemoteModuleFu64d(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGMT_gcWritePortValueWdOStreamModuleFu64d(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGMT_gcWritePortValueWdOSystemModuleFu64d(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGMT_gcWritePortValueWfODeviceModuleFu64f(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGMT_gcWritePortValueWfOInterfaceModuleFu64f(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGMT_gcWritePortValueWfORemoteModuleFu64f(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGMT_gcWritePortValueWfOStreamModuleFu64f(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGMT_gcWritePortValueWfOSystemModuleFu64f(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGMT_gcWritePortValueWi16ODeviceModuleFu64i16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi16OInterfaceModuleFu64i16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi16ORemoteModuleFu64i16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi16OStreamModuleFu64i16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi16OSystemModuleFu64i16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi32ODeviceModuleFu64i32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi32OInterfaceModuleFu64i32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi32ORemoteModuleFu64i32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi32OStreamModuleFu64i32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi32OSystemModuleFu64i32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi64ODeviceModuleFu64i64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi64OInterfaceModuleFu64i64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi64ORemoteModuleFu64i64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi64OStreamModuleFu64i64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi64OSystemModuleFu64i64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi8ODeviceModuleFu64i8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi8OInterfaceModuleFu64i8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi8ORemoteModuleFu64i8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi8OStreamModuleFu64i8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWi8OSystemModuleFu64i8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWsODeviceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWsOInterfaceModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWsORemoteModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWsOStreamModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWsOSystemModuleFu64s(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu16ODeviceModuleFu64u16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu16OInterfaceModuleFu64u16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu16ORemoteModuleFu64u16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu16OStreamModuleFu64u16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu16OSystemModuleFu64u16(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu32ODeviceModuleFu64u32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu32OInterfaceModuleFu64u32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu32ORemoteModuleFu64u32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu32OStreamModuleFu64u32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu32OSystemModuleFu64u32(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu64ODeviceModuleFu64u64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu64OInterfaceModuleFu64u64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu64ORemoteModuleFu64u64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu64OStreamModuleFu64u64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu64OSystemModuleFu64u64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu8ODeviceModuleFu64u8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu8OInterfaceModuleFu64u8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu8ORemoteModuleFu64u8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu8OStreamModuleFu64u8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGMT_gcWritePortValueWu8OSystemModuleFu64u8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGMT_getBufferDataFs(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoASsFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoASv_std_stringFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoASvcFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoA_CINFOFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAb8FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAcptrFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAdFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAfFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAi16FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAi32FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAi64FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAi8FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAsFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAu16FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAu32FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAu64FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAu8FsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAu8pFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_getBufferInfoAvptrFsBIC(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGMT_getDevicePortFi(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGMT_getFloatODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGMT_getFloatOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGMT_getFloatORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGMT_getFloatOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGMT_getFloatOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGMT_getHeight(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGMT_getInfoASsODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASsOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASsOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASsOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASv_std_stringODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASv_std_stringOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASv_std_stringOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASv_std_stringOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getInfoASvcODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_getInfoASvcOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_getInfoASvcOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_getInfoASvcOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGMT_getInfoA_CINFOODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_getInfoA_CINFOOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_getInfoA_CINFOOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_getInfoA_CINFOOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGMT_getInfoAb8ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAb8OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAb8OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAb8OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAcptrODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGMT_getInfoAcptrOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGMT_getInfoAcptrOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGMT_getInfoAcptrOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGMT_getInfoAdODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGMT_getInfoAdOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGMT_getInfoAdOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGMT_getInfoAdOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGMT_getInfoAfODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGMT_getInfoAfOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGMT_getInfoAfOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGMT_getInfoAfOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGMT_getInfoAi16ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi16OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi16OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi16OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi32ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi32OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi32OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi32OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi64ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi64OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi64OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi64OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi8ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi8OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi8OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAi8OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAsODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAsOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAsOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAsOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu16ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu16OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu16OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu16OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu32ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu32OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu32OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu32OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu64ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu64OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu64OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu64OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8ODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8OInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8OStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8OSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8pODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8pOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8pOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_getInfoAu8pOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGMT_getInfoAvptrODeviceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGMT_getInfoAvptrOInterfaceModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGMT_getInfoAvptrOStreamModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGMT_getInfoAvptrOSystemModuleFi32(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGMT_getIntegerODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGMT_getIntegerOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGMT_getIntegerORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGMT_getIntegerOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGMT_getIntegerOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGMT_getInterfacePortFi(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGMT_getLastEventGrabberIndex(Eur_EGrabber_CallbackMultiThread egrabberBox, int *returnValue));
CEGRABBER_API(euEGMT_getPayloadSize(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGMT_getPixelFormat(Eur_EGrabber_CallbackMultiThread egrabberBox, std_string *returnValue));
CEGRABBER_API(euEGMT_getRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGMT_getRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGMT_getRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGMT_getRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGMT_getRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGMT_getRemotePortFi(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGMT_getStreamPortFi(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGMT_getStringDataODeviceModuleFccpSvc(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGMT_getStringDataOInterfaceModuleFccpSvc(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGMT_getStringDataORemoteModuleFccpSvc(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGMT_getStringDataOStreamModuleFccpSvc(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGMT_getStringDataOSystemModuleFccpSvc(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGMT_getStringListODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getStringListOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getStringListORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getStringListOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getStringListOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGMT_getStringODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGMT_getStringOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGMT_getStringORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGMT_getStringOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGMT_getStringOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGMT_getSystemPortFi(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGMT_getWidth(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGMT_interruptScriptFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *scriptId));
CEGRABBER_API(euEGMT_invalidateODeviceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature));
CEGRABBER_API(euEGMT_invalidateOInterfaceModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature));
CEGRABBER_API(euEGMT_invalidateORemoteModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature));
CEGRABBER_API(euEGMT_invalidateOStreamModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature));
CEGRABBER_API(euEGMT_invalidateOSystemModuleFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature));
CEGRABBER_API(euEGMT_isOpenODeviceModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_isOpenOInterfaceModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_isOpenORemoteModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_isOpenOStreamModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_isOpenOSystemModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_mementoFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *text));
CEGRABBER_API(euEGMT_mementoFucucccp(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text));
CEGRABBER_API(euEGMT_mementoWaveDownFucuc(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGMT_mementoWaveNoValueFucuc(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGMT_mementoWaveResetFucuc(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGMT_mementoWaveUpFucuc(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGMT_mementoWaveValueFucucu64(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value));
CEGRABBER_API(euEGMT_onCicEventFEur_CicData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CicData ref_data));
CEGRABBER_API(euEGMT_onCxpDeviceEventFEur_CxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpDeviceData ref_data));
CEGRABBER_API(euEGMT_onCxpInterfaceEventFEur_CxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpInterfaceData ref_data));
CEGRABBER_API(euEGMT_onDataStreamEventFEur_DataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DataStreamData ref_data));
CEGRABBER_API(euEGMT_onDeviceErrorEventFEur_DeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DeviceErrorData ref_data));
CEGRABBER_API(euEGMT_onIoToolboxEventFEur_IoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_IoToolboxData ref_data));
CEGRABBER_API(euEGMT_onNewBufferEventFEur_NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_data));
CEGRABBER_API(euEGMT_onRemoteDeviceEventFEur_RemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_RemoteDeviceData ref_data));
CEGRABBER_API(euEGMT_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue));
CEGRABBER_API(euEGMT_pushFEur_NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_buffer));
CEGRABBER_API(euEGMT_queueFEur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGMT_reallocBuffersFs(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_reallocBuffersFss(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGMT_resetBufferQueue(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_resetBufferQueueFEur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGMT_revokeFEur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGMT_runScriptFccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script));
CEGRABBER_API(euEGMT_runScriptFccpvp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script, void *context /* def=0 */));
CEGRABBER_API(euEGMT_setCicEventCallbackF_CECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CicEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setCxpDeviceEventCallbackF_CDECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setCxpInterfaceEventCallbackF_CIECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setDataStreamEventCallbackF_DSECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DataStreamEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setDeviceErrorEventCallbackF_DEECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setFloatODeviceModuleFccpd(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGMT_setFloatOInterfaceModuleFccpd(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGMT_setFloatORemoteModuleFccpd(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGMT_setFloatOStreamModuleFccpd(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGMT_setFloatOSystemModuleFccpd(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGMT_setIntegerODeviceModuleFccpi64(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGMT_setIntegerOInterfaceModuleFccpi64(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGMT_setIntegerORemoteModuleFccpi64(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGMT_setIntegerOStreamModuleFccpi64(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGMT_setIntegerOSystemModuleFccpi64(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGMT_setIoToolboxEventCallbackF_ITECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_IoToolboxEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setNewBufferEventCallbackF_NBECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_NewBufferEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGMT_setRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGMT_setRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGMT_setRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGMT_setRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGMT_setRemoteDeviceEventCallbackF_RDECallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGMT_setScriptUiCallbackFScriptUiCallbackvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ScriptUiCallback callback, void *context));
CEGRABBER_API(euEGMT_setStringODeviceModuleFccpccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGMT_setStringOInterfaceModuleFccpccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGMT_setStringORemoteModuleFccpccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGMT_setStringOStreamModuleFccpccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGMT_setStringOSystemModuleFccpccp(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGMT_setThreadStartCallbackF_TStartCvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStartCallback callback, void *context));
CEGRABBER_API(euEGMT_setThreadStopCallbackF_TStopCvp(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStopCallback callback, void *context));
CEGRABBER_API(euEGMT_shouldReallocBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_shouldReannounceBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGMT_shutdown(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_start(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGMT_startFu64(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */));
CEGRABBER_API(euEGMT_startFu64b8(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */));
CEGRABBER_API(euEGMT_stop(Eur_EGrabber_CallbackMultiThread egrabberBox));
CEGRABBER_API(euEGST_announceAndQueueFEur_BusMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_GenTLMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_GenTLMemorys(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_NvidiaRdmaMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_UserMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_UserMemoryArray(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceAndQueueFEur_UserMemoryArrayb8(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_announceBusBufferFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGST_announceBusBufferFu64svp(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGST_announceNvidiaRdmaBufferFvps(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue));
CEGRABBER_API(euEGST_announceNvidiaRdmaBufferFvpsvp(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue));
CEGRABBER_API(euEGST_attachEventODeviceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGST_attachEventOInterfaceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGST_attachEventORemoteModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGST_attachEventOStreamModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGST_attachEventOSystemModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGST_createFEurEGCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEurEGCameraInfoDAF(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEurEGInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEurEGInfoDAF(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEurEGInfoDAFb8(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTLTHIHDHDH(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackSingleThread *egrabber));
CEGRABBER_API(euEGST_createFEur_EGenTLi(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTLii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTLiii(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTLiiiDAF(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_createFEur_EGenTLiiiDAFb8(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox));
CEGRABBER_API(euEGST_destroy(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWAll(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWCicData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWCxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWCxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWDataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWDeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWIoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWNewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_disableEventWRemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWAll(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWCicData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWCxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWCxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWDataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWDeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWIoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWNewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_enableEventWRemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_executeODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command));
CEGRABBER_API(euEGST_executeOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command));
CEGRABBER_API(euEGST_executeORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command));
CEGRABBER_API(euEGST_executeOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command));
CEGRABBER_API(euEGST_executeOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command));
CEGRABBER_API(euEGST_flushBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushBuffersFAQT(Eur_EGrabber_CallbackSingleThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */));
CEGRABBER_API(euEGST_flushEventWAll(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWCicData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWCxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWCxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWDataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWDeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWIoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWNewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_flushEventWRemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_gcReadPortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGST_gcReadPortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGST_gcReadPortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGST_gcReadPortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGST_gcReadPortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGST_gcReadPortODeviceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortOInterfaceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortORemoteModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortOStreamModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortOSystemModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortStringODeviceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortStringOInterfaceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortStringORemoteModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortStringOStreamModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortStringOSystemModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASsODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASsOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASsORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASsOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASsOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASv_std_stringODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASv_std_stringOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASv_std_stringORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASv_std_stringOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASv_std_stringOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASvcODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASvcOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASvcORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASvcOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueASvcOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueA_CINFOODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueA_CINFOOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueA_CINFOORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueA_CINFOOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueA_CINFOOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAb8ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAb8OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAb8ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAb8OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAb8OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAcptrODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAcptrOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAcptrORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAcptrOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAcptrOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAdODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAdOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAdORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAdOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAdOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAfODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAfOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAfORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAfOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAfOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi16ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi16OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi16ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi16OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi16OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi32ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi32OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi32ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi32OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi32OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi64ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi64OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi64ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi64OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi64OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi8ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi8OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi8ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi8OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAi8OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAsODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAsOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAsORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAsOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAsOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu16ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu16OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu16ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu16OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu16OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu32ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu32OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu32ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu32OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu32OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu64ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu64OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu64ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu64OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu64OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8ODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8OInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8ORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8OStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8OSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8pODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8pOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8pORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8pOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAu8pOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAvptrODeviceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAvptrOInterfaceModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAvptrORemoteModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAvptrOStreamModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGST_gcReadPortValueAvptrOSystemModuleFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue));
CEGRABBER_API(euEGST_gcWritePortDataODeviceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGST_gcWritePortDataOInterfaceModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGST_gcWritePortDataORemoteModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGST_gcWritePortDataOStreamModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGST_gcWritePortDataOSystemModuleFu64vps(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGST_gcWritePortODeviceModuleFu64Svc(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGST_gcWritePortOInterfaceModuleFu64Svc(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGST_gcWritePortORemoteModuleFu64Svc(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGST_gcWritePortOStreamModuleFu64Svc(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGST_gcWritePortOSystemModuleFu64Svc(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGST_gcWritePortValueWdODeviceModuleFu64d(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGST_gcWritePortValueWdOInterfaceModuleFu64d(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGST_gcWritePortValueWdORemoteModuleFu64d(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGST_gcWritePortValueWdOStreamModuleFu64d(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGST_gcWritePortValueWdOSystemModuleFu64d(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value));
CEGRABBER_API(euEGST_gcWritePortValueWfODeviceModuleFu64f(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGST_gcWritePortValueWfOInterfaceModuleFu64f(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGST_gcWritePortValueWfORemoteModuleFu64f(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGST_gcWritePortValueWfOStreamModuleFu64f(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGST_gcWritePortValueWfOSystemModuleFu64f(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value));
CEGRABBER_API(euEGST_gcWritePortValueWi16ODeviceModuleFu64i16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi16OInterfaceModuleFu64i16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi16ORemoteModuleFu64i16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi16OStreamModuleFu64i16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi16OSystemModuleFu64i16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi32ODeviceModuleFu64i32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi32OInterfaceModuleFu64i32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi32ORemoteModuleFu64i32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi32OStreamModuleFu64i32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi32OSystemModuleFu64i32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi64ODeviceModuleFu64i64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi64OInterfaceModuleFu64i64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi64ORemoteModuleFu64i64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi64OStreamModuleFu64i64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi64OSystemModuleFu64i64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi8ODeviceModuleFu64i8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi8OInterfaceModuleFu64i8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi8ORemoteModuleFu64i8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi8OStreamModuleFu64i8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWi8OSystemModuleFu64i8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWsODeviceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGST_gcWritePortValueWsOInterfaceModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGST_gcWritePortValueWsORemoteModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGST_gcWritePortValueWsOStreamModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGST_gcWritePortValueWsOSystemModuleFu64s(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu16ODeviceModuleFu64u16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu16OInterfaceModuleFu64u16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu16ORemoteModuleFu64u16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu16OStreamModuleFu64u16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu16OSystemModuleFu64u16(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu32ODeviceModuleFu64u32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu32OInterfaceModuleFu64u32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu32ORemoteModuleFu64u32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu32OStreamModuleFu64u32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu32OSystemModuleFu64u32(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu64ODeviceModuleFu64u64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu64OInterfaceModuleFu64u64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu64ORemoteModuleFu64u64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu64OStreamModuleFu64u64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu64OSystemModuleFu64u64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu8ODeviceModuleFu64u8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu8OInterfaceModuleFu64u8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu8ORemoteModuleFu64u8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu8OStreamModuleFu64u8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGST_gcWritePortValueWu8OSystemModuleFu64u8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value));
CEGRABBER_API(euEGST_getBufferDataFs(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEGST_getBufferInfoASsFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGST_getBufferInfoASv_std_stringFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getBufferInfoASvcFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGST_getBufferInfoA_CINFOFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAb8FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAcptrFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAdFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAfFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAi16FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAi32FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAi64FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAi8FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAsFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAu16FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAu32FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAu64FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAu8FsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAu8pFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGST_getBufferInfoAvptrFsBIC(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGST_getDevicePortFi(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGST_getFloatODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGST_getFloatOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGST_getFloatORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGST_getFloatOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGST_getFloatOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue));
CEGRABBER_API(euEGST_getHeight(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGST_getInfoASsODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASsOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASsOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASsOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASv_std_stringODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASv_std_stringOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASv_std_stringOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASv_std_stringOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getInfoASvcODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGST_getInfoASvcOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGST_getInfoASvcOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGST_getInfoASvcOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGST_getInfoA_CINFOODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_getInfoA_CINFOOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_getInfoA_CINFOOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_getInfoA_CINFOOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGST_getInfoAb8ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAb8OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAb8OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAb8OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAcptrODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGST_getInfoAcptrOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGST_getInfoAcptrOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGST_getInfoAcptrOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue));
CEGRABBER_API(euEGST_getInfoAdODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGST_getInfoAdOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGST_getInfoAdOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGST_getInfoAdOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue));
CEGRABBER_API(euEGST_getInfoAfODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGST_getInfoAfOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGST_getInfoAfOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGST_getInfoAfOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue));
CEGRABBER_API(euEGST_getInfoAi16ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi16OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi16OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi16OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi32ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi32OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi32OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi32OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi64ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi64OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi64OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi64OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi8ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi8OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi8OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAi8OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAsODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGST_getInfoAsOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGST_getInfoAsOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGST_getInfoAsOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu16ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu16OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu16OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu16OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu32ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu32OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu32OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu32OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu64ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu64OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu64OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu64OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu8ODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu8OInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu8OStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu8OSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue));
CEGRABBER_API(euEGST_getInfoAu8pODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGST_getInfoAu8pOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGST_getInfoAu8pOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGST_getInfoAu8pOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGST_getInfoAvptrODeviceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGST_getInfoAvptrOInterfaceModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGST_getInfoAvptrOStreamModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGST_getInfoAvptrOSystemModuleFi32(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue));
CEGRABBER_API(euEGST_getIntegerODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGST_getIntegerOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGST_getIntegerORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGST_getIntegerOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGST_getIntegerOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGST_getInterfacePortFi(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGST_getLastEventGrabberIndex(Eur_EGrabber_CallbackSingleThread egrabberBox, int *returnValue));
CEGRABBER_API(euEGST_getPayloadSize(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGST_getPixelFormat(Eur_EGrabber_CallbackSingleThread egrabberBox, std_string *returnValue));
CEGRABBER_API(euEGST_getRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGST_getRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGST_getRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGST_getRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGST_getRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGST_getRemotePortFi(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGST_getStreamPortFi(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGST_getStringDataODeviceModuleFccpSvc(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGST_getStringDataOInterfaceModuleFccpSvc(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGST_getStringDataORemoteModuleFccpSvc(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGST_getStringDataOStreamModuleFccpSvc(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGST_getStringDataOSystemModuleFccpSvc(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGST_getStringListODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getStringListOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getStringListORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getStringListOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getStringListOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGST_getStringODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGST_getStringOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGST_getStringORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGST_getStringOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGST_getStringOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGST_getSystemPortFi(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGST_getWidth(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue));
CEGRABBER_API(euEGST_interruptScriptFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *scriptId));
CEGRABBER_API(euEGST_invalidateODeviceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature));
CEGRABBER_API(euEGST_invalidateOInterfaceModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature));
CEGRABBER_API(euEGST_invalidateORemoteModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature));
CEGRABBER_API(euEGST_invalidateOStreamModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature));
CEGRABBER_API(euEGST_invalidateOSystemModuleFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature));
CEGRABBER_API(euEGST_isOpenODeviceModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_isOpenOInterfaceModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_isOpenORemoteModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_isOpenOStreamModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_isOpenOSystemModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_mementoFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *text));
CEGRABBER_API(euEGST_mementoFucucccp(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text));
CEGRABBER_API(euEGST_mementoWaveDownFucuc(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGST_mementoWaveNoValueFucuc(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGST_mementoWaveResetFucuc(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGST_mementoWaveUpFucuc(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGST_mementoWaveValueFucucu64(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value));
CEGRABBER_API(euEGST_onCicEventFEur_CicData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CicData ref_data));
CEGRABBER_API(euEGST_onCxpDeviceEventFEur_CxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpDeviceData ref_data));
CEGRABBER_API(euEGST_onCxpInterfaceEventFEur_CxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpInterfaceData ref_data));
CEGRABBER_API(euEGST_onDataStreamEventFEur_DataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DataStreamData ref_data));
CEGRABBER_API(euEGST_onDeviceErrorEventFEur_DeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DeviceErrorData ref_data));
CEGRABBER_API(euEGST_onIoToolboxEventFEur_IoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_IoToolboxData ref_data));
CEGRABBER_API(euEGST_onNewBufferEventFEur_NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_data));
CEGRABBER_API(euEGST_onRemoteDeviceEventFEur_RemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_RemoteDeviceData ref_data));
CEGRABBER_API(euEGST_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue));
CEGRABBER_API(euEGST_pushFEur_NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_buffer));
CEGRABBER_API(euEGST_queueFEur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGST_reallocBuffersFs(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_reallocBuffersFss(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue));
CEGRABBER_API(euEGST_resetBufferQueue(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_resetBufferQueueFEur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGST_revokeFEur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range));
CEGRABBER_API(euEGST_runScriptFccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script));
CEGRABBER_API(euEGST_runScriptFccpvp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script, void *context /* def=0 */));
CEGRABBER_API(euEGST_setCicEventCallbackF_CECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CicEventCallback callback, void *context));
CEGRABBER_API(euEGST_setCxpDeviceEventCallbackF_CDECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGST_setCxpInterfaceEventCallbackF_CIECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context));
CEGRABBER_API(euEGST_setDataStreamEventCallbackF_DSECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DataStreamEventCallback callback, void *context));
CEGRABBER_API(euEGST_setDeviceErrorEventCallbackF_DEECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context));
CEGRABBER_API(euEGST_setFloatODeviceModuleFccpd(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGST_setFloatOInterfaceModuleFccpd(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGST_setFloatORemoteModuleFccpd(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGST_setFloatOStreamModuleFccpd(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGST_setFloatOSystemModuleFccpd(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value));
CEGRABBER_API(euEGST_setIntegerODeviceModuleFccpi64(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGST_setIntegerOInterfaceModuleFccpi64(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGST_setIntegerORemoteModuleFccpi64(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGST_setIntegerOStreamModuleFccpi64(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGST_setIntegerOSystemModuleFccpi64(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value));
CEGRABBER_API(euEGST_setIoToolboxEventCallbackF_ITECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_IoToolboxEventCallback callback, void *context));
CEGRABBER_API(euEGST_setNewBufferEventCallbackF_NBECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_NewBufferEventCallback callback, void *context));
CEGRABBER_API(euEGST_setRegisterODeviceModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGST_setRegisterOInterfaceModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGST_setRegisterORemoteModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGST_setRegisterOStreamModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGST_setRegisterOSystemModuleFccpvps(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGST_setRemoteDeviceEventCallbackF_RDECallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context));
CEGRABBER_API(euEGST_setScriptUiCallbackFScriptUiCallbackvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ScriptUiCallback callback, void *context));
CEGRABBER_API(euEGST_setStringODeviceModuleFccpccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGST_setStringOInterfaceModuleFccpccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGST_setStringORemoteModuleFccpccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGST_setStringOStreamModuleFccpccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGST_setStringOSystemModuleFccpccp(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value));
CEGRABBER_API(euEGST_setThreadStartCallbackF_TStartCvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStartCallback callback, void *context));
CEGRABBER_API(euEGST_setThreadStopCallbackF_TStopCvp(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStopCallback callback, void *context));
CEGRABBER_API(euEGST_shouldReallocBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_shouldReannounceBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue));
CEGRABBER_API(euEGST_shutdown(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_start(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGST_startFu64(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */));
CEGRABBER_API(euEGST_startFu64b8(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */));
CEGRABBER_API(euEGST_stop(Eur_EGrabber_CallbackSingleThread egrabberBox));
CEGRABBER_API(euEGenTL_create(Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFb8(bool8_t shared, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFb8ccp(bool8_t shared, const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFccp(const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFccpb8(const char *path /* def=getEuresysCtiPath() */, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFcp(const char *path, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_createFcpb8(const char *path, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox));
CEGRABBER_API(euEGenTL_destroy(Eur_EGenTL egentlBox));
CEGRABBER_API(euEGenTL_devCloseFDH(Eur_EGenTL egentlBox, DEV_HANDLE devh));
CEGRABBER_API(euEGenTL_devGetDataStreamIDFDHu32(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t index, std_string *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoASsFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoASv_std_stringFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoASvcFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoA_CINFOFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAb8FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAcptrFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAdFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAfFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAi16FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAi32FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAi64FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAi8FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAsFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAu16FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAu32FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAu64FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAu8FDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAu8pFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_devGetInfoAvptrFDHDIC(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_devGetNumDataStreamsFDH(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_devGetParentFDH(Eur_EGenTL egentlBox, DEV_HANDLE devh, IF_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_devGetPortFDH(Eur_EGenTL egentlBox, DEV_HANDLE devh, PORT_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_devOpenDataStreamFDHccp(Eur_EGenTL egentlBox, DEV_HANDLE devh, const char *dsID, DS_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAllocAndAnnounceBufferFDHs(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAllocAndAnnounceBufferFDHsvp(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAllocAndAnnounceBuffersFDHsSv_BH(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, std_vector_BUFFER_HANDLE ref_buffers));
CEGRABBER_API(euEGenTL_dsAnnounceBufferFDHvps(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAnnounceBufferFDHvpsvp(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAnnounceBusBufferFDHu64s(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAnnounceBusBufferFDHu64svp(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAnnounceDeviceBufferFDHvpsMT(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsAnnounceDeviceBufferFDHvpsMTvp(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsCloseFDH(Eur_EGenTL egentlBox, DS_HANDLE dsh));
CEGRABBER_API(euEGenTL_dsFlushQueueFDHAQT(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_QUEUE_TYPE operation));
CEGRABBER_API(euEGenTL_dsGetBufferIDFDHu32(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint32_t index, BUFFER_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoASsFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoASv_std_stringFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoASvcFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoA_CINFOFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAb8FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAcptrFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAdFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAfFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAi16FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAi32FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAi64FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAi8FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAsFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAu16FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAu32FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAu64FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAu8FDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAu8pFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoAvptrFDHBHBIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferInfoFDHBH(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, Eur_BufferInfo *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoASsFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoASv_std_stringFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoASvcFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoA_CINFOFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAb8FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAcptrFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAdFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAfFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAi16FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAi32FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAi64FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAi8FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAsFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAu16FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAu32FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAu64FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAu8FDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAu8pFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_dsGetBufferPartInfoAvptrFDHBHu32BPIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoASsFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoASv_std_stringFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoASvcFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoA_CINFOFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAb8FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAcptrFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAdFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAfFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAi16FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAi32FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAi64FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAi8FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAsFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAu16FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAu32FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAu64FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAu8FDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAu8pFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_dsGetInfoAvptrFDHSIC(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_dsGetNumBufferPartsFDHBH(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_dsGetParentFDH(Eur_EGenTL egentlBox, DS_HANDLE dsh, DEV_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_dsQueueBufferFDHBH(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh));
CEGRABBER_API(euEGenTL_dsQueueBuffersFDHSv_BH(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers));
CEGRABBER_API(euEGenTL_dsRevokeBufferFDHBH(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh));
CEGRABBER_API(euEGenTL_dsRevokeBufferFDHBHvpp(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */));
CEGRABBER_API(euEGenTL_dsRevokeBufferFDHBHvppvpp(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */, void **userPointer /* def=0 */));
CEGRABBER_API(euEGenTL_dsRevokeBuffersFDHSv_BH(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers));
CEGRABBER_API(euEGenTL_dsStartAcquisitionFDH(Eur_EGenTL egentlBox, DS_HANDLE dsh));
CEGRABBER_API(euEGenTL_dsStartAcquisitionFDHASF(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */));
CEGRABBER_API(euEGenTL_dsStartAcquisitionFDHASFu64(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */, uint64_t count /* def=GENTL_INFINITE */));
CEGRABBER_API(euEGenTL_dsStopAcquisitionFDH(Eur_EGenTL egentlBox, DS_HANDLE dsh));
CEGRABBER_API(euEGenTL_dsStopAcquisitionFDHASF(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_STOP_FLAGS flags /* def=ACQ_STOP_FLAGS_DEFAULT */));
CEGRABBER_API(euEGenTL_eventFlushFEH(Eur_EGenTL egentlBox, EVENT_HANDLE eh));
CEGRABBER_API(euEGenTL_eventGetDataFEHvpsu64(Eur_EGenTL egentlBox, EVENT_HANDLE eh, void *buffer, size_t size, uint64_t timeout, size_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoASsFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoASv_std_stringFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoASvcFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoA_CINFOFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAb8FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAcptrFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAdFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAfFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAi16FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAi32FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAi64FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAi8FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAsFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAu16FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAu32FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAu64FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAu8FEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAu8pFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_eventGetDataInfoAvptrFEHvpsEDIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoASsFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoASv_std_stringFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoASvcFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoA_CINFOFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAb8FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAcptrFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAdFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAfFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAi16FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAi32FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAi64FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAi8FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAsFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAu16FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAu32FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAu64FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAu8FEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAu8pFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_eventGetInfoAvptrFEHEIC(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_eventKillFEH(Eur_EGenTL egentlBox, EVENT_HANDLE eh));
CEGRABBER_API(euEGenTL_eventKillQuietFEH(Eur_EGenTL egentlBox, EVENT_HANDLE eh));
CEGRABBER_API(euEGenTL_eventsGetDataFSv_EEGDEu64p(Eur_EGenTL egentlBox, std_vector_EURESYS_EVENT_GET_DATA_ENTRY ref_entries, uint64_t *timeout));
CEGRABBER_API(euEGenTL_gcGetInfoASsFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoASv_std_stringFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoASvcFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoA_CINFOFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAb8FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAcptrFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAdFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAfFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAi16FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAi32FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAi64FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAi8FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAsFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAu16FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAu32FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAu64FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAu8FTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAu8pFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_gcGetInfoAvptrFTIC(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_gcGetNumPortURLsFPH(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoASsFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoASv_std_stringFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoASvcFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoA_CINFOFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAb8FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAcptrFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAdFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAfFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAi16FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAi32FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAi64FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAi8FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAsFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAu16FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAu32FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAu64FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAu8FPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAu8pFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortInfoAvptrFPHPIC(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLFPH(Eur_EGenTL egentlBox, PORT_HANDLE ph, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoASsFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoASv_std_stringFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoASvcFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoA_CINFOFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAb8FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAcptrFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAdFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAfFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAi16FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAi32FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAi64FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAi8FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAsFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAu16FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAu32FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAu64FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAu8FPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAu8pFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_gcGetPortURLInfoAvptrFPHu32UIC(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_gcReadPortDataFPHu64vps(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, void *data, size_t size));
CEGRABBER_API(euEGenTL_gcReadPortFPHu64(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_gcReadPortFPHu64Svc(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGenTL_gcReadPortStackedFPHSv_PRSE(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries));
CEGRABBER_API(euEGenTL_gcReadPortStringFPHu64s(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, size_t size, std_string *returnValue));
CEGRABBER_API(euEGenTL_gcRegisterEventFEHET(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event, EVENT_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_gcUnregisterEventFEHET(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event));
CEGRABBER_API(euEGenTL_gcWritePortDataFPHu64vps(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, const void *data, size_t size));
CEGRABBER_API(euEGenTL_gcWritePortFPHu64Svc(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data));
CEGRABBER_API(euEGenTL_gcWritePortStackedFPHSv_PRSE(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries));
CEGRABBER_API(euEGenTL_genapiAttachEventFPHu64vps(Eur_EGenTL egentlBox, PORT_HANDLE h, uint64_t eventId, const void *buffer, size_t size));
CEGRABBER_API(euEGenTL_genapiExecuteCommandFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature));
CEGRABBER_API(euEGenTL_genapiGetFloatFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double *returnValue));
CEGRABBER_API(euEGenTL_genapiGetFloatWithDefaultFPHccpd(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double defaultValue, double *returnValue));
CEGRABBER_API(euEGenTL_genapiGetIntegerFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t *returnValue));
CEGRABBER_API(euEGenTL_genapiGetIntegerWithDefaultFPHccpi64(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t defaultValue, int64_t *returnValue));
CEGRABBER_API(euEGenTL_genapiGetRegisterFPHccpvps(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, void *data, size_t size));
CEGRABBER_API(euEGenTL_genapiGetStringDataFPHccpSvc(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_vector_char ref_data));
CEGRABBER_API(euEGenTL_genapiGetStringFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_string *returnValue));
CEGRABBER_API(euEGenTL_genapiGetStringListFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *what, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_genapiInterruptScriptFccp(Eur_EGenTL egentlBox, const char *scriptId));
CEGRABBER_API(euEGenTL_genapiInvalidateFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature));
CEGRABBER_API(euEGenTL_genapiRunScriptFPHccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script));
CEGRABBER_API(euEGenTL_genapiRunScriptFPHccpGENAPI_UI_SCRIPT_CONTEXT_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */));
CEGRABBER_API(euEGenTL_genapiRunScriptFSv_PHccp(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script));
CEGRABBER_API(euEGenTL_genapiRunScriptFSv_PHccpGENAPI_UI_SCRIPT_CONTEXT_p(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */));
CEGRABBER_API(euEGenTL_genapiSetFloatFPHccpd(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double value));
CEGRABBER_API(euEGenTL_genapiSetIntegerFPHccpi64(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t value));
CEGRABBER_API(euEGenTL_genapiSetRegisterFPHccpvps(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const void *data, size_t size));
CEGRABBER_API(euEGenTL_genapiSetStringFPHccpccp(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const char *value));
CEGRABBER_API(euEGenTL_getTimestampUs(Eur_EGenTL egentlBox, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_ifCloseFIH(Eur_EGenTL egentlBox, IF_HANDLE ifh));
CEGRABBER_API(euEGenTL_ifGetDeviceIDFIHu32(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t index, std_string *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoASsFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoASv_std_stringFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoASvcFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoA_CINFOFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAb8FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAcptrFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAdFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAfFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAi16FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAi32FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAi64FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAi8FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAsFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAu16FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAu32FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAu64FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAu8FIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAu8pFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_ifGetDeviceInfoAvptrFIHccpIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoASsFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoASv_std_stringFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoASvcFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoA_CINFOFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAb8FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAcptrFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAdFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAfFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAi16FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAi32FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAi64FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAi8FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAsFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAu16FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAu32FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAu64FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAu8FIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAu8pFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_ifGetInfoAvptrFIHIIC(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_ifGetNumDevicesFIH(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_ifGetParentFIH(Eur_EGenTL egentlBox, IF_HANDLE ifh, TL_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_ifOpenDeviceFIHccp(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEV_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_ifOpenDeviceFIHccpDAF(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEVICE_ACCESS_FLAGS flags /* def=defaultDeviceOpenFlags */, DEV_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_ifUpdateDeviceListFIH(Eur_EGenTL egentlBox, IF_HANDLE ifh, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_ifUpdateDeviceListFIHu64(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_imageConvertF_ICI_p_ICO_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output));
CEGRABBER_API(euEGenTL_imageConvertF_ICI_p_ICO_pImageConvertROI_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output, const ImageConvertROI *roi /* def=0 */));
CEGRABBER_API(euEGenTL_imageGetBitsPerPixelFccp(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue));
CEGRABBER_API(euEGenTL_imageGetBytesPerPixelFccp(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue));
CEGRABBER_API(euEGenTL_imageGetFImageId(Eur_EGenTL egentlBox, ImageId id, void * *returnValue));
CEGRABBER_API(euEGenTL_imageGetFImageIdsp(Eur_EGenTL egentlBox, ImageId id, size_t *outSize /* def=0 */, void * *returnValue));
CEGRABBER_API(euEGenTL_imageGetPixelFormatFu64(Eur_EGenTL egentlBox, uint64_t format, std_string *returnValue));
CEGRABBER_API(euEGenTL_imageGetPixelFormatValueFccpui(Eur_EGenTL egentlBox, const char *format, unsigned int ns, unsigned int *returnValue));
CEGRABBER_API(euEGenTL_imagePrepareBuffersFss(Eur_EGenTL egentlBox, size_t bufferSize, size_t count));
CEGRABBER_API(euEGenTL_imageReleaseFImageId(Eur_EGenTL egentlBox, ImageId id));
CEGRABBER_API(euEGenTL_imageSaveToDiskF_ICI_pccp(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath));
CEGRABBER_API(euEGenTL_imageSaveToDiskF_ICI_pccpi64(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */));
CEGRABBER_API(euEGenTL_imageSaveToDiskF_ICI_pccpi64_ISTDP_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */));
CEGRABBER_API(euEGenTL_imageTrimBuffers(Eur_EGenTL egentlBox));
CEGRABBER_API(euEGenTL_isShared(Eur_EGenTL egentlBox, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_lockUpdates(Eur_EGenTL egentlBox));
CEGRABBER_API(euEGenTL_mementoFccp(Eur_EGenTL egentlBox, const char *text));
CEGRABBER_API(euEGenTL_mementoFucucccp(Eur_EGenTL egentlBox, unsigned char verbosity, unsigned char kind, const char *text));
CEGRABBER_API(euEGenTL_mementoWaveDownFucuc(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGenTL_mementoWaveNoValueFucuc(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGenTL_mementoWaveResetFucuc(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGenTL_mementoWaveUpFucuc(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id));
CEGRABBER_API(euEGenTL_mementoWaveValueFucucu64(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id, uint64_t value));
CEGRABBER_API(euEGenTL_tlCloseFTH(Eur_EGenTL egentlBox, TL_HANDLE tlh));
CEGRABBER_API(euEGenTL_tlGetInfoASsFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoASv_std_stringFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoASvcFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoA_CINFOFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAb8FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAcptrFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAdFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAfFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAi16FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAi32FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAi64FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAi8FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAsFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAu16FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAu32FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAu64FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAu8FTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAu8pFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_tlGetInfoAvptrFTHTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceIDFTHu32(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t index, std_string *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoASsFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_string *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoASv_std_stringFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_std_string *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoASvcFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_char *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoA_CINFOFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAb8FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAcptrFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, char * *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAdFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, double *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAfFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, float *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAi16FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int16_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAi32FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int32_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAi64FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int64_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAi8FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAsFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, size_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAu16FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint16_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAu32FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAu64FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint64_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAu8FTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAu8pFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t * *returnValue));
CEGRABBER_API(euEGenTL_tlGetInterfaceInfoAvptrFTHccpTIC(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, void * *returnValue));
CEGRABBER_API(euEGenTL_tlGetNumInterfacesFTH(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t *returnValue));
CEGRABBER_API(euEGenTL_tlOpen(Eur_EGenTL egentlBox, TL_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_tlOpenInterfaceFTHccp(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, IF_HANDLE *returnValue));
CEGRABBER_API(euEGenTL_tlUpdateInterfaceListFTH(Eur_EGenTL egentlBox, TL_HANDLE tlh, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_tlUpdateInterfaceListFTHu64(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue));
CEGRABBER_API(euEGenTL_unlockUpdates(Eur_EGenTL egentlBox));
CEGRABBER_API(euEurCINFO_destroy(Eur_InfoCommandInfo info));
CEGRABBER_API(euEurCINFO_get_dataSize(Eur_InfoCommandInfo info, size_t *returnValue));
CEGRABBER_API(euEurCINFO_get_dataType(Eur_InfoCommandInfo info, int *returnValue));
CEGRABBER_API(euEurEGCameraInfo_create(Eur_EGrabberCameraInfo *egrabbercamerainfoBox));
CEGRABBER_API(euEurEGCameraInfo_destroy(Eur_EGrabberCameraInfo egrabbercamerainfoBox));
CEGRABBER_API(euEurEGCameraInfo_get_script(Eur_EGrabberCameraInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGCameraInfo_grabber_atFs(Eur_EGrabberCameraInfo info, size_t index, Eur_EGrabberInfo *returnValue));
CEGRABBER_API(euEurEGCameraInfo_grabber_count(Eur_EGrabberCameraInfo info, size_t *returnValue));
CEGRABBER_API(euEurEGCameraInfo_grabbers_push_backFEurEGInfo(Eur_EGrabberCameraInfo info, Eur_EGrabberInfo ref_grabber));
CEGRABBER_API(euEurEGDiscovery_cameraCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue));
CEGRABBER_API(euEurEGDiscovery_camerasFccp(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, Eur_EGrabberCameraInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_camerasFccpi(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_camerasFi(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberCameraInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_camerasFii(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_createFEur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabberDiscovery *egrabberdiscoveryBox));
CEGRABBER_API(euEurEGDiscovery_destroy(Eur_EGrabberDiscovery egrabberdiscoveryBox));
CEGRABBER_API(euEurEGDiscovery_deviceCountFi(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int *returnValue));
CEGRABBER_API(euEurEGDiscovery_deviceInfoFii(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, Eur_EGrabberInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_discover(Eur_EGrabberDiscovery egrabberdiscoveryBox));
CEGRABBER_API(euEurEGDiscovery_discoverFb8(Eur_EGrabberDiscovery egrabberdiscoveryBox, bool8_t findCameras /* def=true */));
CEGRABBER_API(euEurEGDiscovery_egrabberCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue));
CEGRABBER_API(euEurEGDiscovery_egrabbersFi(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_interfaceCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue));
CEGRABBER_API(euEurEGDiscovery_interfaceInfoFi(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, Eur_EGrabberInfo *returnValue));
CEGRABBER_API(euEurEGDiscovery_streamCountFii(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int *returnValue));
CEGRABBER_API(euEurEGDiscovery_streamInfoFiii(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int streamIndex, Eur_EGrabberInfo *returnValue));
CEGRABBER_API(euEurEGInfo_create(Eur_EGrabberInfo *egrabberinfoBox));
CEGRABBER_API(euEurEGInfo_destroy(Eur_EGrabberInfo egrabberinfoBox));
CEGRABBER_API(euEurEGInfo_get_deviceDescription(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceID(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceIndex(Eur_EGrabberInfo info, int *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceLicenseStatus(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceModelName(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceSerialNumber(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceUserID(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_deviceVendorName(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_fanStatus(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_firmwareStatus(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_interfaceID(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_interfaceIndex(Eur_EGrabberInfo info, int *returnValue));
CEGRABBER_API(euEurEGInfo_get_isDeviceReadOnly(Eur_EGrabberInfo info, bool8_t *returnValue));
CEGRABBER_API(euEurEGInfo_get_isRemoteAvailable(Eur_EGrabberInfo info, bool8_t *returnValue));
CEGRABBER_API(euEurEGInfo_get_licenseStatus(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_streamDescription(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_streamID(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurEGInfo_get_streamIndex(Eur_EGrabberInfo info, int *returnValue));
CEGRABBER_API(euEurEGInfo_get_tlType(Eur_EGrabberInfo info, std_string *returnValue));
CEGRABBER_API(euEurOOA_at_position_1(Eur_OneOfAll oneofall, Eur_NewBufferData *returnValue));
CEGRABBER_API(euEurOOA_at_position_2(Eur_OneOfAll oneofall, Eur_IoToolboxData *returnValue));
CEGRABBER_API(euEurOOA_at_position_3(Eur_OneOfAll oneofall, Eur_CicData *returnValue));
CEGRABBER_API(euEurOOA_at_position_4(Eur_OneOfAll oneofall, Eur_DataStreamData *returnValue));
CEGRABBER_API(euEurOOA_at_position_5(Eur_OneOfAll oneofall, Eur_CxpInterfaceData *returnValue));
CEGRABBER_API(euEurOOA_at_position_6(Eur_OneOfAll oneofall, Eur_DeviceErrorData *returnValue));
CEGRABBER_API(euEurOOA_at_position_7(Eur_OneOfAll oneofall, Eur_CxpDeviceData *returnValue));
CEGRABBER_API(euEurOOA_at_position_8(Eur_OneOfAll oneofall, Eur_RemoteDeviceData *returnValue));
CEGRABBER_API(euEurOOA_create(Eur_OneOfAll *oneofall));
CEGRABBER_API(euEurOOA_destroy(Eur_OneOfAll oneofall));
CEGRABBER_API(euGenTLMemory_create(Eur_GenTLMemory *gentlmemoryBox));
CEGRABBER_API(euGenTLMemory_createFs(size_t bufferSize /* def=0 */, Eur_GenTLMemory *gentlmemoryBox));
CEGRABBER_API(euGenTLMemory_createFsvp(size_t bufferSize /* def=0 */, void *userPointer /* def=0 */, Eur_GenTLMemory *gentlmemoryBox));
CEGRABBER_API(euGenTLMemory_destroy(Eur_GenTLMemory gentlmemoryBox));
CEGRABBER_API(euGigelink(std_string *returnValue));
CEGRABBER_API(euGrablink(std_string *returnValue));
CEGRABBER_API(euInternal_lastCallbackError_setCallbackCriticalError());
CEGRABBER_API(euInternal_lastCallbackError_setFEur_client_error(Eur_client_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_cti_loading_error(Eur_cti_loading_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_genapi_error(Eur_genapi_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_gentl_error(Eur_gentl_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_internal_error(Eur_internal_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_missing_gentl_symbol(Eur_missing_gentl_symbol ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_not_allowed(Eur_not_allowed ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_thread_error(Eur_thread_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_unexpected_data_size(Eur_unexpected_data_size ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFEur_unexpected_data_type(Eur_unexpected_data_type ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFstd_exception(std_exception ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFstd_logic_error(std_logic_error ref_error));
CEGRABBER_API(euInternal_lastCallbackError_setFstd_runtime_error(std_runtime_error ref_error));
CEGRABBER_API(euInternal_lastError_getAEur_client_error(Eur_client_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_cti_loading_error(Eur_cti_loading_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_genapi_error(Eur_genapi_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_gentl_error(Eur_gentl_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_internal_error(Eur_internal_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_missing_gentl_symbol(Eur_missing_gentl_symbol *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_not_allowed(Eur_not_allowed *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_thread_error(Eur_thread_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_unexpected_data_size(Eur_unexpected_data_size *returnValue));
CEGRABBER_API(euInternal_lastError_getAEur_unexpected_data_type(Eur_unexpected_data_type *returnValue));
CEGRABBER_API(euInternal_lastError_getAstd_exception(std_exception *returnValue));
CEGRABBER_API(euInternal_lastError_getAstd_logic_error(std_logic_error *returnValue));
CEGRABBER_API(euInternal_lastError_getAstd_runtime_error(std_runtime_error *returnValue));
CEGRABBER_API(euInternal_lastError_getCode(CEGRABBER_ERROR *returnValue));
CEGRABBER_API(euIoToolboxDataAIoToolboxData(Eur_IoToolboxData data, const struct Euresys_IoToolboxData_s * *returnValue));
CEGRABBER_API(euIoToolboxData_create(Eur_IoToolboxData *iotoolboxdataBox));
CEGRABBER_API(euIoToolboxData_destroy(Eur_IoToolboxData iotoolboxdataBox));
CEGRABBER_API(euNewBufferDataANewBufferData(Eur_NewBufferData data, const struct Euresys_NewBufferData_s * *returnValue));
CEGRABBER_API(euNewBufferData_create(Eur_NewBufferData *newbufferdataBox));
CEGRABBER_API(euNewBufferData_destroy(Eur_NewBufferData newbufferdataBox));
CEGRABBER_API(euNvidiaRdmaMemory_createFvps(void *deviceAddress, size_t size, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox));
CEGRABBER_API(euNvidiaRdmaMemory_createFvpsvp(void *deviceAddress, size_t size, void *userPointer /* def=0 */, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox));
CEGRABBER_API(euNvidiaRdmaMemory_destroy(Eur_NvidiaRdmaMemory nvidiardmamemoryBox));
CEGRABBER_API(euPlaylink(std_string *returnValue));
CEGRABBER_API(euRemoteDeviceDataARemoteDeviceData(Eur_RemoteDeviceData data, const struct Euresys_RemoteDeviceData_s * *returnValue));
CEGRABBER_API(euRemoteDeviceData_create(Eur_RemoteDeviceData *remotedevicedataBox));
CEGRABBER_API(euRemoteDeviceData_destroy(Eur_RemoteDeviceData remotedevicedataBox));
CEGRABBER_API(euUserMemoryArray_createFEur_UserMemorys(Eur_UserMemory ref_memory, size_t bufferSize, Eur_UserMemoryArray *usermemoryarrayBox));
CEGRABBER_API(euUserMemoryArray_destroy(Eur_UserMemoryArray usermemoryarrayBox));
CEGRABBER_API(euUserMemory_createFvps(void *base, size_t size, Eur_UserMemory *usermemoryBox));
CEGRABBER_API(euUserMemory_createFvpsvp(void *base, size_t size, void *userPointer /* def=0 */, Eur_UserMemory *usermemoryBox));
CEGRABBER_API(euUserMemory_destroy(Eur_UserMemory usermemoryBox));
CEGRABBER_API(euaction_GenApiActionBuilder_destroy(Eur_action_GenApiActionBuilder action));
CEGRABBER_API(euaction_GenApiActionBuilder_string(Eur_action_GenApiActionBuilder action, std_string *returnValue));
CEGRABBER_API(euaction_GenApiActionyBuilder_destroy(Eur_action_GenApiActionBuilder action));
CEGRABBER_API(euaction_declareFloat(Eur_action_GenApiActionBuilder *returnValue));
CEGRABBER_API(euaction_declareInteger(Eur_action_GenApiActionBuilder *returnValue));
CEGRABBER_API(euaction_declareString(Eur_action_GenApiActionBuilder *returnValue));
CEGRABBER_API(euaction_undeclare(Eur_action_GenApiActionBuilder *returnValue));
CEGRABBER_API(eucheckAllBoxedTypeCount());
CEGRABBER_API(euclient_error_createFccp(const char *msg, Eur_client_error *client_errorBox));
CEGRABBER_API(euclient_error_destroy(Eur_client_error client_errorBox));
CEGRABBER_API(eucti_loading_error_createFccp(const char *path, Eur_cti_loading_error *cti_loading_errorBox));
CEGRABBER_API(eucti_loading_error_destroy(Eur_cti_loading_error cti_loading_errorBox));
CEGRABBER_API(eufrom_box_EurCINFOFcInfoCommandInfo_p(Eur_InfoCommandInfo info, cInfoCommandInfo *cInfo));
CEGRABBER_API(eufrom_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1));
CEGRABBER_API(eufrom_box_EurEGInfoFcEGrabberInfoExt1_p(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1));
CEGRABBER_API(eufrom_box_EurEGInfoFcEGrabberInfoExt2_p(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2));
CEGRABBER_API(eufrom_box_EurEGInfoFcEGrabberInfoExt3_p(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3));
CEGRABBER_API(eufrom_box_EurEGInfoFcEGrabberInfo_p(Eur_EGrabberInfo info, cEGrabberInfo *cInfo));
CEGRABBER_API(eufrom_box_Eur_BufferIndexRangeFspspb8_p(Eur_BufferIndexRange range, size_t *begin, size_t *end, bool8_t *reverse));
CEGRABBER_API(eufrom_box_Eur_BufferInfoFcBufferInfo_p(Eur_BufferInfo info, cBufferInfo *cInfo));
CEGRABBER_API(eufrom_box_Eur_cti_loading_error_path(Eur_cti_loading_error error, std_string *returnValue));
CEGRABBER_API(eufrom_box_Eur_genapi_error(Eur_genapi_error error, GENAPI_ERROR_CODE *returnValue));
CEGRABBER_API(eufrom_box_Eur_gentl_error_description(Eur_gentl_error error, std_string *returnValue));
CEGRABBER_API(eufrom_box_Eur_gentl_error_gc_err(Eur_gentl_error error, GC_ERROR *returnValue));
CEGRABBER_API(eufrom_box_Eur_missing_gentl_symbol_path(Eur_missing_gentl_symbol error, std_string *returnValue));
CEGRABBER_API(eufrom_box_Eur_missing_gentl_symbol_symbol(Eur_missing_gentl_symbol error, std_string *returnValue));
CEGRABBER_API(eufrom_box_Eur_unexpected_data_sizeFspsp(Eur_unexpected_data_size error, size_t *expected, size_t *returned));
CEGRABBER_API(eufrom_box_Eur_unexpected_data_type(Eur_unexpected_data_type error, INFO_DATATYPE *returnValue));
CEGRABBER_API(eufrom_box_std_stringFccppsp(std_string string, const char **data, size_t *size));
CEGRABBER_API(eufrom_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ppsp(std_vector_BUFFER_HANDLE vector, const BUFFER_HANDLE **data, size_t *size));
CEGRABBER_API(eufrom_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ppsp(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, const EURESYS_EVENT_GET_DATA_ENTRY **data, size_t *size));
CEGRABBER_API(eufrom_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ppsp(std_vector_PORT_HANDLE vector, const PORT_HANDLE **data, size_t *size));
CEGRABBER_API(eufrom_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ppsp(std_vector_PORT_REGISTER_STACK_ENTRY vector, const PORT_REGISTER_STACK_ENTRY **data, size_t *size));
CEGRABBER_API(eufrom_box_std_vector_charFccppsp(std_vector_char vector, const char **data, size_t *size));
CEGRABBER_API(eugenapi_error_add_float_parameterFd(Eur_genapi_error genapi_errorBox, double p));
CEGRABBER_API(eugenapi_error_add_integer_parameterFi64(Eur_genapi_error genapi_errorBox, int64_t p));
CEGRABBER_API(eugenapi_error_add_string_parameterFcp(Eur_genapi_error genapi_errorBox, const char *p));
CEGRABBER_API(eugenapi_error_createFGEC(GENAPI_ERROR_CODE code, Eur_genapi_error *genapi_errorBox));
CEGRABBER_API(eugenapi_error_destroy(Eur_genapi_error genapi_errorBox));
CEGRABBER_API(eugenapi_error_float_parameterFs(Eur_genapi_error genapi_errorBox, size_t index, double *returnValue));
CEGRABBER_API(eugenapi_error_integer_parameterFs(Eur_genapi_error genapi_errorBox, size_t index, int64_t *returnValue));
CEGRABBER_API(eugenapi_error_parameter_count(Eur_genapi_error genapi_errorBox, size_t *returnValue));
CEGRABBER_API(eugenapi_error_parameter_typeFs(Eur_genapi_error genapi_errorBox, size_t index, GENAPI_ERROR_PARAMETER_TYPE *returnValue));
CEGRABBER_API(eugenapi_error_string_parameterASsFs(Eur_genapi_error error, size_t index, std_string *returnValue));
CEGRABBER_API(eugenapi_error_string_parameterFs(Eur_genapi_error genapi_errorBox, size_t index, std_const_string *returnValue));
CEGRABBER_API(eugentl_error_createFGE(GC_ERROR err, Eur_gentl_error *gentl_errorBox));
CEGRABBER_API(eugentl_error_createFGEccp(GC_ERROR err, const char *description, Eur_gentl_error *gentl_errorBox));
CEGRABBER_API(eugentl_error_destroy(Eur_gentl_error gentl_errorBox));
CEGRABBER_API(eugetEuresysCtiPath(std_string *returnValue));
CEGRABBER_API(eugetEventDescriptionFEDNC(EVENT_DATA_NUMID_CUSTOM numid, std_string *returnValue));
CEGRABBER_API(eugetEventFilterOCicData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterOCxpDeviceData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterOCxpInterfaceData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterODataStreamData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterODeviceErrorData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterOIoToolboxData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterONewBufferData(size_t *returnValue));
CEGRABBER_API(eugetEventFilterORemoteDeviceData(size_t *returnValue));
CEGRABBER_API(euinternal_error_create(Eur_internal_error *internal_errorBox));
CEGRABBER_API(euinternal_error_destroy(Eur_internal_error internal_errorBox));
CEGRABBER_API(eumissing_gentl_symbol_createFccpccp(const char *path, const char *symbol, Eur_missing_gentl_symbol *missing_gentl_symbolBox));
CEGRABBER_API(eumissing_gentl_symbol_destroy(Eur_missing_gentl_symbol missing_gentl_symbolBox));
CEGRABBER_API(eunot_allowed_create(Eur_not_allowed *not_allowedBox));
CEGRABBER_API(eunot_allowed_destroy(Eur_not_allowed not_allowedBox));
CEGRABBER_API(euquery_GenApiQueryBuilder_destroy(Eur_query_GenApiQueryBuilder query));
CEGRABBER_API(euquery_GenApiQueryBuilder_globFccp(Eur_query_GenApiQueryBuilder query, const char *glob, std_string *returnValue));
CEGRABBER_API(euquery_GenApiQueryBuilder_regexFccp(Eur_query_GenApiQueryBuilder query, const char *re, std_string *returnValue));
CEGRABBER_API(euquery_GenApiQueryBuilder_string(Eur_query_GenApiQueryBuilder query, std_string *returnValue));
CEGRABBER_API(euquery_attributes(Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_availableFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_categories(Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_categoriesFb8(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_categoriesOfFccp(const char *category, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_categoriesOfFccpb8(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_commandFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_declared(Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_doneFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_enumEntriesFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_enumEntriesFccpb8(const char *feature, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_features(Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_featuresFb8(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_featuresOfFccp(const char *category, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_featuresOfFccpb8(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_implementedFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_infoFccpccp(const char *feature, const char *what, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_interfacesFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_readableFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_sourceFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_writeableFccp(const char *feature, Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(euquery_xml(Eur_query_GenApiQueryBuilder *returnValue));
CEGRABBER_API(eustd_const_string_create(std_const_string *string));
CEGRABBER_API(eustd_const_string_destroy(std_const_string string));
CEGRABBER_API(eustd_exception_createFccp(const char *what, std_exception *error));
CEGRABBER_API(eustd_exception_destroy(std_exception error));
CEGRABBER_API(eustd_exception_what(std_exception error, const char * *returnValue));
CEGRABBER_API(eustd_logic_error_createFccp(const char *what, std_logic_error *error));
CEGRABBER_API(eustd_logic_error_destroy(std_logic_error error));
CEGRABBER_API(eustd_logic_error_what(std_logic_error error, const char * *returnValue));
CEGRABBER_API(eustd_map_std_string_std_string_atFSm_std_string_std_stringSs(std_map_std_string_std_string map, std_string key, std_string *returnValue));
CEGRABBER_API(eustd_map_std_string_std_string_atFSs(std_map_std_string_std_string map, std_string ref_key, std_string *returnValue));
CEGRABBER_API(eustd_map_std_string_std_string_atFsSs_pSs_p(std_map_std_string_std_string map, size_t index, std_string *returnKey, std_string *returnValue));
CEGRABBER_API(eustd_map_std_string_std_string_create(std_map_std_string_std_string *map));
CEGRABBER_API(eustd_map_std_string_std_string_destroy(std_map_std_string_std_string map));
CEGRABBER_API(eustd_map_std_string_std_string_size(std_map_std_string_std_string map, size_t *returnValue));
CEGRABBER_API(eustd_runtime_error_createFccp(const char *what, std_runtime_error *error));
CEGRABBER_API(eustd_runtime_error_destroy(std_runtime_error error));
CEGRABBER_API(eustd_runtime_error_what(std_runtime_error error, const char * *returnValue));
CEGRABBER_API(eustd_string_assignFccp(std_string string, const char *str));
CEGRABBER_API(eustd_string_assign_operatorFSs(std_string string, std_string str));
CEGRABBER_API(eustd_string_c_str(std_string string, const char * *returnValue));
CEGRABBER_API(eustd_string_create(std_string *string));
CEGRABBER_API(eustd_string_destroy(std_string string));
CEGRABBER_API(eustd_vector_BH_push_backFBH(std_vector_BUFFER_HANDLE vector, BUFFER_HANDLE item));
CEGRABBER_API(eustd_vector_BUFFER_HANDLE_atFs(std_vector_BUFFER_HANDLE vector, size_t pos, BUFFER_HANDLE *returnValue));
CEGRABBER_API(eustd_vector_BUFFER_HANDLE_create(std_vector_BUFFER_HANDLE *vector));
CEGRABBER_API(eustd_vector_BUFFER_HANDLE_destroy(std_vector_BUFFER_HANDLE vector));
CEGRABBER_API(eustd_vector_BUFFER_HANDLE_size(std_vector_BUFFER_HANDLE vector, size_t *returnValue));
CEGRABBER_API(eustd_vector_EEGDE_push_backFEEGDE(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, EURESYS_EVENT_GET_DATA_ENTRY item));
CEGRABBER_API(eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_atFs(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t pos, EURESYS_EVENT_GET_DATA_ENTRY *returnValue));
CEGRABBER_API(eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_create(std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector));
CEGRABBER_API(eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector));
CEGRABBER_API(eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_size(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t *returnValue));
CEGRABBER_API(eustd_vector_PH_push_backFPH(std_vector_PORT_HANDLE vector, PORT_HANDLE item));
CEGRABBER_API(eustd_vector_PORT_HANDLE_atFs(std_vector_PORT_HANDLE vector, size_t pos, PORT_HANDLE *returnValue));
CEGRABBER_API(eustd_vector_PORT_HANDLE_create(std_vector_PORT_HANDLE *vector));
CEGRABBER_API(eustd_vector_PORT_HANDLE_destroy(std_vector_PORT_HANDLE vector));
CEGRABBER_API(eustd_vector_PORT_HANDLE_size(std_vector_PORT_HANDLE vector, size_t *returnValue));
CEGRABBER_API(eustd_vector_PORT_REGISTER_STACK_ENTRY_atFs(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t pos, PORT_REGISTER_STACK_ENTRY *returnValue));
CEGRABBER_API(eustd_vector_PORT_REGISTER_STACK_ENTRY_create(std_vector_PORT_REGISTER_STACK_ENTRY *vector));
CEGRABBER_API(eustd_vector_PORT_REGISTER_STACK_ENTRY_destroy(std_vector_PORT_REGISTER_STACK_ENTRY vector));
CEGRABBER_API(eustd_vector_PORT_REGISTER_STACK_ENTRY_size(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t *returnValue));
CEGRABBER_API(eustd_vector_PRSE_push_backFPRSE(std_vector_PORT_REGISTER_STACK_ENTRY vector, PORT_REGISTER_STACK_ENTRY item));
CEGRABBER_API(eustd_vector_char_atFs(std_vector_char vector, size_t pos, char *returnValue));
CEGRABBER_API(eustd_vector_char_create(std_vector_char *vector));
CEGRABBER_API(eustd_vector_char_destroy(std_vector_char vector));
CEGRABBER_API(eustd_vector_char_push_backFc(std_vector_char vector, char item));
CEGRABBER_API(eustd_vector_char_size(std_vector_char vector, size_t *returnValue));
CEGRABBER_API(eustd_vector_std_string_atFs(std_vector_std_string vector, size_t pos, std_string *returnValue));
CEGRABBER_API(eustd_vector_std_string_create(std_vector_std_string *vector));
CEGRABBER_API(eustd_vector_std_string_destroy(std_vector_std_string vector));
CEGRABBER_API(eustd_vector_std_string_size(std_vector_std_string vector, size_t *returnValue));
CEGRABBER_API(euthread_error_createFccp(const char *msg, Eur_thread_error *thread_errorBox));
CEGRABBER_API(euthread_error_destroy(Eur_thread_error thread_errorBox));
CEGRABBER_API(euto_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1));
CEGRABBER_API(euto_box_EurEGInfoFcEGrabberInfo(cEGrabberInfo cInfo, Eur_EGrabberInfo *info));
CEGRABBER_API(euto_box_EurEGInfoFcEGrabberInfoExt1_p(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1));
CEGRABBER_API(euto_box_EurEGInfoFcEGrabberInfoExt2_p(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2));
CEGRABBER_API(euto_box_EurEGInfoFcEGrabberInfoExt3_p(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3));
CEGRABBER_API(euto_box_Eur_NewBufferDataFcst_NewBufferData_s_p(const struct Euresys_NewBufferData_s *data, Eur_NewBufferData *returnValue));
CEGRABBER_API(euto_box_std_stringFccps(const char *data, size_t size, std_string *string));
CEGRABBER_API(euto_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ps(const BUFFER_HANDLE *data, size_t size, std_vector_BUFFER_HANDLE *vector));
CEGRABBER_API(euto_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ps(const EURESYS_EVENT_GET_DATA_ENTRY *data, size_t size, std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector));
CEGRABBER_API(euto_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ps(const PORT_HANDLE *data, size_t size, std_vector_PORT_HANDLE *vector));
CEGRABBER_API(euto_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ps(const PORT_REGISTER_STACK_ENTRY *data, size_t size, std_vector_PORT_REGISTER_STACK_ENTRY *vector));
CEGRABBER_API(euto_box_std_vector_charFccps(const char *data, size_t size, std_vector_char *vector));
CEGRABBER_API(euunexpected_data_size_createFss(size_t expected, size_t returned, Eur_unexpected_data_size *unexpected_data_sizeBox));
CEGRABBER_API(euunexpected_data_size_destroy(Eur_unexpected_data_size unexpected_data_sizeBox));
CEGRABBER_API(euunexpected_data_type_createFID(INFO_DATATYPE type, Eur_unexpected_data_type *unexpected_data_typeBox));
CEGRABBER_API(euunexpected_data_type_destroy(Eur_unexpected_data_type unexpected_data_typeBox));

#if !defined(CEGRABBER_IMPL) && !defined(EURESYS_DISABLE_LONG_SYMBOLS)
static inline int Eur_BufferIndexRange_create(Eur_BufferIndexRange *bufferindexrangeBox) {
    return euBufferIndexRange_create(bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_create__from__Eur_BufferIndexRange(Eur_BufferIndexRange ref_range, Eur_BufferIndexRange *bufferindexrangeBox) {
    return euBufferIndexRange_createFEur_BufferIndexRange(ref_range, bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_create__from__size_t(size_t begin /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox) {
    return euBufferIndexRange_createFs(begin, bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_create__from__size_t__size_t(size_t begin /* def=0 */, size_t end /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox) {
    return euBufferIndexRange_createFss(begin, end, bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_create__from__size_t__size_t__bool8_t(size_t begin /* def=0 */, size_t end /* def=0 */, bool8_t reverse /* def=false */, Eur_BufferIndexRange *bufferindexrangeBox) {
    return euBufferIndexRange_createFssb8(begin, end, reverse, bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_destroy(Eur_BufferIndexRange bufferindexrangeBox) {
    return euBufferIndexRange_destroy(bufferindexrangeBox);
}
static inline int Eur_BufferIndexRange_indexAt__from__size_t(Eur_BufferIndexRange bufferindexrangeBox, size_t offset, size_t *returnValue) {
    return euBufferIndexRange_indexAtFs(bufferindexrangeBox, offset, returnValue);
}
static inline int Eur_BufferIndexRange_size(Eur_BufferIndexRange bufferindexrangeBox, size_t *returnValue) {
    return euBufferIndexRange_size(bufferindexrangeBox, returnValue);
}
static inline int Eur_BufferInfo_destroy(Eur_BufferInfo info) {
    return euBufferInfo_destroy(info);
}
static inline int Eur_Buffer_create__from__Eur_NewBufferData(Eur_NewBufferData ref_data, Eur_Buffer *bufferBox) {
    return euBuffer_createFEur_NewBufferData(ref_data, bufferBox);
}
static inline int Eur_Buffer_destroy(Eur_Buffer bufferBox) {
    return euBuffer_destroy(bufferBox);
}
static inline int Eur_Buffer_getInfo__as__InfoCommandInfo__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euBuffer_getInfoA_CINFOFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__bool8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euBuffer_getInfoAb8FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__char_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euBuffer_getInfoAcptrFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__double__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euBuffer_getInfoAdFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__float__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euBuffer_getInfoAfFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__int16_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euBuffer_getInfoAi16FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__int32_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euBuffer_getInfoAi32FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__int64_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euBuffer_getInfoAi64FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__int8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euBuffer_getInfoAi8FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__size_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euBuffer_getInfoAsFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__std_string__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euBuffer_getInfoASsFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__std_vector_char__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euBuffer_getInfoASvcFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__std_vector_std_string__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euBuffer_getInfoASv_std_stringFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__uint16_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euBuffer_getInfoAu16FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__uint32_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euBuffer_getInfoAu32FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__uint64_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euBuffer_getInfoAu64FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__uint8_t__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euBuffer_getInfoAu8FEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__uint8_t_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euBuffer_getInfoAu8pFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__as__void_ptr__from__Eur_EGrabberBase__BUFFER_INFO_CMD(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euBuffer_getInfoAvptrFEurEGBaseBIC(bufferBox, ref_grabber, cmd, returnValue);
}
static inline int Eur_Buffer_getInfo__from__Eur_EGrabberBase(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, Eur_BufferInfo *returnValue) {
    return euBuffer_getInfoFEurEGBase(bufferBox, ref_grabber, returnValue);
}
static inline int Eur_Buffer_getUserPointer(Eur_Buffer bufferBox, void * *returnValue) {
    return euBuffer_getUserPointer(bufferBox, returnValue);
}
static inline int Eur_Buffer_push__from__Eur_EGrabberBase(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber) {
    return euBuffer_pushFEurEGBase(bufferBox, ref_grabber);
}
static inline int Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath) {
    return euBuffer_saveToDiskFEurEGBaseccp(bufferBox, ref_grabber, filepath);
}
static inline int Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p__int64_t(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */) {
    return euBuffer_saveToDiskFEurEGBaseccpi64(bufferBox, ref_grabber, filepath, index);
}
static inline int Eur_Buffer_saveToDisk__from__Eur_EGrabberBase__const_char_p__int64_t__ImageSaveToDiskParams_p(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */) {
    return euBuffer_saveToDiskFEurEGBaseccpi64_ISTDP_p(bufferBox, ref_grabber, filepath, index, params);
}
static inline int Eur_BusMemory_create__from__uint64_t__size_t(uint64_t busAddress, size_t size, Eur_BusMemory *busmemoryBox) {
    return euBusMemory_createFu64s(busAddress, size, busmemoryBox);
}
static inline int Eur_BusMemory_create__from__uint64_t__size_t__void_p(uint64_t busAddress, size_t size, void *userPointer /* def=0 */, Eur_BusMemory *busmemoryBox) {
    return euBusMemory_createFu64svp(busAddress, size, userPointer, busmemoryBox);
}
static inline int Eur_BusMemory_destroy(Eur_BusMemory busmemoryBox) {
    return euBusMemory_destroy(busmemoryBox);
}
static inline int Eur_CicData__as__Euresys_CicData(Eur_CicData data, const struct Euresys_CicData_s * *returnValue) {
    return euCicDataACicData(data, returnValue);
}
static inline int Eur_CicData_create(Eur_CicData *cicdataBox) {
    return euCicData_create(cicdataBox);
}
static inline int Eur_CicData_destroy(Eur_CicData cicdataBox) {
    return euCicData_destroy(cicdataBox);
}
static inline int Eur_Coaxlink(std_string *returnValue) {
    return euCoaxlink(returnValue);
}
static inline int Eur_CxpDeviceData__as__Euresys_CxpDeviceData(Eur_CxpDeviceData data, const struct Euresys_CxpDeviceData_s * *returnValue) {
    return euCxpDeviceDataACxpDeviceData(data, returnValue);
}
static inline int Eur_CxpDeviceData_create(Eur_CxpDeviceData *cxpdevicedataBox) {
    return euCxpDeviceData_create(cxpdevicedataBox);
}
static inline int Eur_CxpDeviceData_destroy(Eur_CxpDeviceData cxpdevicedataBox) {
    return euCxpDeviceData_destroy(cxpdevicedataBox);
}
static inline int Eur_CxpInterfaceData__as__Euresys_CxpInterfaceData(Eur_CxpInterfaceData data, const struct Euresys_CxpInterfaceData_s * *returnValue) {
    return euCxpInterfaceDataACxpInterfaceData(data, returnValue);
}
static inline int Eur_CxpInterfaceData_create(Eur_CxpInterfaceData *cxpinterfacedataBox) {
    return euCxpInterfaceData_create(cxpinterfacedataBox);
}
static inline int Eur_CxpInterfaceData_destroy(Eur_CxpInterfaceData cxpinterfacedataBox) {
    return euCxpInterfaceData_destroy(cxpinterfacedataBox);
}
static inline int Eur_DataStreamData__as__Euresys_DataStreamData(Eur_DataStreamData data, const struct Euresys_DataStreamData_s * *returnValue) {
    return euDataStreamDataADataStreamData(data, returnValue);
}
static inline int Eur_DataStreamData_create(Eur_DataStreamData *datastreamdataBox) {
    return euDataStreamData_create(datastreamdataBox);
}
static inline int Eur_DataStreamData_destroy(Eur_DataStreamData datastreamdataBox) {
    return euDataStreamData_destroy(datastreamdataBox);
}
static inline int Eur_DeviceErrorData__as__Euresys_DeviceErrorData(Eur_DeviceErrorData data, const struct Euresys_DeviceErrorData_s * *returnValue) {
    return euDeviceErrorDataADeviceErrorData(data, returnValue);
}
static inline int Eur_DeviceErrorData_create(Eur_DeviceErrorData *deviceerrordataBox) {
    return euDeviceErrorData_create(deviceerrordataBox);
}
static inline int Eur_DeviceErrorData_destroy(Eur_DeviceErrorData deviceerrordataBox) {
    return euDeviceErrorData_destroy(deviceerrordataBox);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadA_CINFOFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAb8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAcptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAdFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAfFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAi16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAi32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAi64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAi8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadASsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadASvcFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadASv_std_stringFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAu16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAu32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAu64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAu8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAu8pFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadAvptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackMultiThread__from__Eur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackMultiThreadFEur_NewBufferData(ref_data, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandA_CINFOFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAb8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAcptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAdFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAfFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAi16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAi32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAi64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAi8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandASsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandASvcFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandASv_std_stringFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAu16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAu32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAu64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAu8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAu8pFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandAvptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackOnDemand__from__Eur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackOnDemandFEur_NewBufferData(ref_data, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__InfoCommandInfo__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadA_CINFOFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__bool8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAb8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__char_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAcptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__double__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAdFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__float__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAfFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAi16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAi32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAi64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__int8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAi8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__size_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadASsFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_vector_char__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadASvcFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__std_vector_std_string__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadASv_std_stringFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint16_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAu16FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint32_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAu32FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint64_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAu64FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint8_t__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAu8FEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__uint8_t_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAu8pFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__as__void_ptr__from__Eur_NewBufferData__BUFFER_INFO_CMD(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadAvptrFEur_NewBufferDataBIC(ref_data, cmd, returnValue);
}
static inline int Eur_ECameraBufferGetInfo_CallbackSingleThread__from__Eur_NewBufferData(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue) {
    return euECameraBufferGetInfo_CallbackSingleThreadFEur_NewBufferData(ref_data, returnValue);
}
static inline int Eur_ECameraBufferPush_CallbackMultiThread__from__Eur_NewBufferData(Eur_NewBufferData ref_data) {
    return euECameraBufferPush_CallbackMultiThreadFEur_NewBufferData(ref_data);
}
static inline int Eur_ECameraBufferPush_CallbackOnDemand__from__Eur_NewBufferData(Eur_NewBufferData ref_data) {
    return euECameraBufferPush_CallbackOnDemandFEur_NewBufferData(ref_data);
}
static inline int Eur_ECameraBufferPush_CallbackSingleThread__from__Eur_NewBufferData(Eur_NewBufferData ref_data) {
    return euECameraBufferPush_CallbackSingleThreadFEur_NewBufferData(ref_data);
}
static inline int Eur_EGenTL_create(Eur_EGenTL *egentlBox) {
    return euEGenTL_create(egentlBox);
}
static inline int Eur_EGenTL_create__from__bool8_t(bool8_t shared, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFb8(shared, egentlBox);
}
static inline int Eur_EGenTL_create__from__bool8_t__const_char_p(bool8_t shared, const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFb8ccp(shared, path, egentlBox);
}
static inline int Eur_EGenTL_create__from__char_p(const char *path, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFcp(path, egentlBox);
}
static inline int Eur_EGenTL_create__from__char_p__bool8_t(const char *path, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFcpb8(path, shared, egentlBox);
}
static inline int Eur_EGenTL_create__from__const_char_p(const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFccp(path, egentlBox);
}
static inline int Eur_EGenTL_create__from__const_char_p__bool8_t(const char *path /* def=getEuresysCtiPath() */, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox) {
    return euEGenTL_createFccpb8(path, shared, egentlBox);
}
static inline int Eur_EGenTL_destroy(Eur_EGenTL egentlBox) {
    return euEGenTL_destroy(egentlBox);
}
static inline int Eur_EGenTL_devClose__from__DEV_HANDLE(Eur_EGenTL egentlBox, DEV_HANDLE devh) {
    return euEGenTL_devCloseFDH(egentlBox, devh);
}
static inline int Eur_EGenTL_devGetDataStreamID__from__DEV_HANDLE__uint32_t(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t index, std_string *returnValue) {
    return euEGenTL_devGetDataStreamIDFDHu32(egentlBox, devh, index, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__InfoCommandInfo__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_devGetInfoA_CINFOFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__bool8_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_devGetInfoAb8FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__char_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_devGetInfoAcptrFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__double__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_devGetInfoAdFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__float__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_devGetInfoAfFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__int16_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_devGetInfoAi16FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__int32_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_devGetInfoAi32FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__int64_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_devGetInfoAi64FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__int8_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_devGetInfoAi8FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__size_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_devGetInfoAsFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__std_string__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_devGetInfoASsFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__std_vector_char__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_devGetInfoASvcFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__std_vector_std_string__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_devGetInfoASv_std_stringFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__uint16_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_devGetInfoAu16FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__uint32_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_devGetInfoAu32FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__uint64_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_devGetInfoAu64FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__uint8_t__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_devGetInfoAu8FDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__uint8_t_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_devGetInfoAu8pFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetInfo__as__void_ptr__from__DEV_HANDLE__DEVICE_INFO_CMD(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_devGetInfoAvptrFDHDIC(egentlBox, devh, cmd, returnValue);
}
static inline int Eur_EGenTL_devGetNumDataStreams__from__DEV_HANDLE(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t *returnValue) {
    return euEGenTL_devGetNumDataStreamsFDH(egentlBox, devh, returnValue);
}
static inline int Eur_EGenTL_devGetParent__from__DEV_HANDLE(Eur_EGenTL egentlBox, DEV_HANDLE devh, IF_HANDLE *returnValue) {
    return euEGenTL_devGetParentFDH(egentlBox, devh, returnValue);
}
static inline int Eur_EGenTL_devGetPort__from__DEV_HANDLE(Eur_EGenTL egentlBox, DEV_HANDLE devh, PORT_HANDLE *returnValue) {
    return euEGenTL_devGetPortFDH(egentlBox, devh, returnValue);
}
static inline int Eur_EGenTL_devOpenDataStream__from__DEV_HANDLE__const_char_p(Eur_EGenTL egentlBox, DEV_HANDLE devh, const char *dsID, DS_HANDLE *returnValue) {
    return euEGenTL_devOpenDataStreamFDHccp(egentlBox, devh, dsID, returnValue);
}
static inline int Eur_EGenTL_dsAllocAndAnnounceBuffer__from__DS_HANDLE__size_t(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAllocAndAnnounceBufferFDHs(egentlBox, dsh, size, returnValue);
}
static inline int Eur_EGenTL_dsAllocAndAnnounceBuffer__from__DS_HANDLE__size_t__void_p(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAllocAndAnnounceBufferFDHsvp(egentlBox, dsh, size, userPointer, returnValue);
}
static inline int Eur_EGenTL_dsAllocAndAnnounceBuffers__from__DS_HANDLE__size_t__std_vector_BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, std_vector_BUFFER_HANDLE ref_buffers) {
    return euEGenTL_dsAllocAndAnnounceBuffersFDHsSv_BH(egentlBox, dsh, size, ref_buffers);
}
static inline int Eur_EGenTL_dsAnnounceBuffer__from__DS_HANDLE__void_p__size_t(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceBufferFDHvps(egentlBox, dsh, buffer, size, returnValue);
}
static inline int Eur_EGenTL_dsAnnounceBuffer__from__DS_HANDLE__void_p__size_t__void_p(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceBufferFDHvpsvp(egentlBox, dsh, buffer, size, userPointer, returnValue);
}
static inline int Eur_EGenTL_dsAnnounceBusBuffer__from__DS_HANDLE__uint64_t__size_t(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceBusBufferFDHu64s(egentlBox, dsh, busAddress, size, returnValue);
}
static inline int Eur_EGenTL_dsAnnounceBusBuffer__from__DS_HANDLE__uint64_t__size_t__void_p(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceBusBufferFDHu64svp(egentlBox, dsh, busAddress, size, userPointer, returnValue);
}
static inline int Eur_EGenTL_dsAnnounceDeviceBuffer__from__DS_HANDLE__void_p__size_t__MEMORY_TYPE(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceDeviceBufferFDHvpsMT(egentlBox, dsh, deviceAddress, size, memoryType, returnValue);
}
static inline int Eur_EGenTL_dsAnnounceDeviceBuffer__from__DS_HANDLE__void_p__size_t__MEMORY_TYPE__void_p(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsAnnounceDeviceBufferFDHvpsMTvp(egentlBox, dsh, deviceAddress, size, memoryType, userPointer, returnValue);
}
static inline int Eur_EGenTL_dsClose__from__DS_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh) {
    return euEGenTL_dsCloseFDH(egentlBox, dsh);
}
static inline int Eur_EGenTL_dsFlushQueue__from__DS_HANDLE__ACQ_QUEUE_TYPE(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_QUEUE_TYPE operation) {
    return euEGenTL_dsFlushQueueFDHAQT(egentlBox, dsh, operation);
}
static inline int Eur_EGenTL_dsGetBufferID__from__DS_HANDLE__uint32_t(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint32_t index, BUFFER_HANDLE *returnValue) {
    return euEGenTL_dsGetBufferIDFDHu32(egentlBox, dsh, index, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__InfoCommandInfo__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_dsGetBufferInfoA_CINFOFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__bool8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAb8FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__char_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_dsGetBufferInfoAcptrFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__double__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_dsGetBufferInfoAdFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__float__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_dsGetBufferInfoAfFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__int16_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAi16FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__int32_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAi32FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__int64_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAi64FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__int8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAi8FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__size_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAsFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__std_string__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_dsGetBufferInfoASsFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__std_vector_char__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_dsGetBufferInfoASvcFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__std_vector_std_string__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_dsGetBufferInfoASv_std_stringFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__uint16_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAu16FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__uint32_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAu32FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__uint64_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAu64FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__uint8_t__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_dsGetBufferInfoAu8FDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__uint8_t_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_dsGetBufferInfoAu8pFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__as__void_ptr__from__DS_HANDLE__BUFFER_HANDLE__BUFFER_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_dsGetBufferInfoAvptrFDHBHBIC(egentlBox, dsh, bh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferInfo__from__DS_HANDLE__BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, Eur_BufferInfo *returnValue) {
    return euEGenTL_dsGetBufferInfoFDHBH(egentlBox, dsh, bh, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__InfoCommandInfo__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_dsGetBufferPartInfoA_CINFOFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__bool8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAb8FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__char_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAcptrFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__double__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAdFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__float__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAfFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__int16_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAi16FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__int32_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAi32FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__int64_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAi64FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__int8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAi8FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__size_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAsFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__std_string__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_dsGetBufferPartInfoASsFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__std_vector_char__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_dsGetBufferPartInfoASvcFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__std_vector_std_string__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_dsGetBufferPartInfoASv_std_stringFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__uint16_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAu16FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__uint32_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAu32FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__uint64_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAu64FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__uint8_t__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAu8FDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__uint8_t_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAu8pFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetBufferPartInfo__as__void_ptr__from__DS_HANDLE__BUFFER_HANDLE__uint32_t__BUFFER_PART_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_dsGetBufferPartInfoAvptrFDHBHu32BPIC(egentlBox, dsh, bh, index, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__InfoCommandInfo__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_dsGetInfoA_CINFOFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__bool8_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_dsGetInfoAb8FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__char_ptr__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_dsGetInfoAcptrFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__double__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_dsGetInfoAdFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__float__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_dsGetInfoAfFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__int16_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_dsGetInfoAi16FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__int32_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_dsGetInfoAi32FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__int64_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_dsGetInfoAi64FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__int8_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_dsGetInfoAi8FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__size_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_dsGetInfoAsFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__std_string__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_dsGetInfoASsFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__std_vector_char__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_dsGetInfoASvcFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__std_vector_std_string__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_dsGetInfoASv_std_stringFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__uint16_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_dsGetInfoAu16FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__uint32_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_dsGetInfoAu32FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__uint64_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_dsGetInfoAu64FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__uint8_t__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_dsGetInfoAu8FDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__uint8_t_ptr__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_dsGetInfoAu8pFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetInfo__as__void_ptr__from__DS_HANDLE__STREAM_INFO_CMD(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_dsGetInfoAvptrFDHSIC(egentlBox, dsh, cmd, returnValue);
}
static inline int Eur_EGenTL_dsGetNumBufferParts__from__DS_HANDLE__BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t *returnValue) {
    return euEGenTL_dsGetNumBufferPartsFDHBH(egentlBox, dsh, bh, returnValue);
}
static inline int Eur_EGenTL_dsGetParent__from__DS_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, DEV_HANDLE *returnValue) {
    return euEGenTL_dsGetParentFDH(egentlBox, dsh, returnValue);
}
static inline int Eur_EGenTL_dsQueueBuffer__from__DS_HANDLE__BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh) {
    return euEGenTL_dsQueueBufferFDHBH(egentlBox, dsh, bh);
}
static inline int Eur_EGenTL_dsQueueBuffers__from__DS_HANDLE__std_vector_BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers) {
    return euEGenTL_dsQueueBuffersFDHSv_BH(egentlBox, dsh, ref_buffers);
}
static inline int Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh) {
    return euEGenTL_dsRevokeBufferFDHBH(egentlBox, dsh, bh);
}
static inline int Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE__void_pp(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */) {
    return euEGenTL_dsRevokeBufferFDHBHvpp(egentlBox, dsh, bh, buffer);
}
static inline int Eur_EGenTL_dsRevokeBuffer__from__DS_HANDLE__BUFFER_HANDLE__void_pp__void_pp(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */, void **userPointer /* def=0 */) {
    return euEGenTL_dsRevokeBufferFDHBHvppvpp(egentlBox, dsh, bh, buffer, userPointer);
}
static inline int Eur_EGenTL_dsRevokeBuffers__from__DS_HANDLE__std_vector_BUFFER_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers) {
    return euEGenTL_dsRevokeBuffersFDHSv_BH(egentlBox, dsh, ref_buffers);
}
static inline int Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh) {
    return euEGenTL_dsStartAcquisitionFDH(egentlBox, dsh);
}
static inline int Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE__ACQ_START_FLAGS(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */) {
    return euEGenTL_dsStartAcquisitionFDHASF(egentlBox, dsh, flags);
}
static inline int Eur_EGenTL_dsStartAcquisition__from__DS_HANDLE__ACQ_START_FLAGS__uint64_t(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */, uint64_t count /* def=GENTL_INFINITE */) {
    return euEGenTL_dsStartAcquisitionFDHASFu64(egentlBox, dsh, flags, count);
}
static inline int Eur_EGenTL_dsStopAcquisition__from__DS_HANDLE(Eur_EGenTL egentlBox, DS_HANDLE dsh) {
    return euEGenTL_dsStopAcquisitionFDH(egentlBox, dsh);
}
static inline int Eur_EGenTL_dsStopAcquisition__from__DS_HANDLE__ACQ_STOP_FLAGS(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_STOP_FLAGS flags /* def=ACQ_STOP_FLAGS_DEFAULT */) {
    return euEGenTL_dsStopAcquisitionFDHASF(egentlBox, dsh, flags);
}
static inline int Eur_EGenTL_eventFlush__from__EVENT_HANDLE(Eur_EGenTL egentlBox, EVENT_HANDLE eh) {
    return euEGenTL_eventFlushFEH(egentlBox, eh);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__InfoCommandInfo__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_eventGetDataInfoA_CINFOFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__bool8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_eventGetDataInfoAb8FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__char_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_eventGetDataInfoAcptrFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__double__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_eventGetDataInfoAdFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__float__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_eventGetDataInfoAfFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__int16_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_eventGetDataInfoAi16FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__int32_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_eventGetDataInfoAi32FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__int64_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_eventGetDataInfoAi64FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__int8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_eventGetDataInfoAi8FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__size_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_eventGetDataInfoAsFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__std_string__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_eventGetDataInfoASsFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__std_vector_char__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_eventGetDataInfoASvcFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__std_vector_std_string__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_eventGetDataInfoASv_std_stringFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__uint16_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_eventGetDataInfoAu16FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__uint32_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_eventGetDataInfoAu32FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__uint64_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_eventGetDataInfoAu64FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__uint8_t__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_eventGetDataInfoAu8FEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__uint8_t_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_eventGetDataInfoAu8pFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetDataInfo__as__void_ptr__from__EVENT_HANDLE__void_p__size_t__EVENT_DATA_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_eventGetDataInfoAvptrFEHvpsEDIC(egentlBox, eh, buffer, size, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetData__from__EVENT_HANDLE__void_p__size_t__uint64_t(Eur_EGenTL egentlBox, EVENT_HANDLE eh, void *buffer, size_t size, uint64_t timeout, size_t *returnValue) {
    return euEGenTL_eventGetDataFEHvpsu64(egentlBox, eh, buffer, size, timeout, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__InfoCommandInfo__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_eventGetInfoA_CINFOFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__bool8_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_eventGetInfoAb8FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__char_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_eventGetInfoAcptrFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__double__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_eventGetInfoAdFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__float__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_eventGetInfoAfFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__int16_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_eventGetInfoAi16FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__int32_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_eventGetInfoAi32FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__int64_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_eventGetInfoAi64FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__int8_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_eventGetInfoAi8FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__size_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_eventGetInfoAsFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__std_string__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_eventGetInfoASsFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__std_vector_char__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_eventGetInfoASvcFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__std_vector_std_string__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_eventGetInfoASv_std_stringFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__uint16_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_eventGetInfoAu16FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__uint32_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_eventGetInfoAu32FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__uint64_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_eventGetInfoAu64FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__uint8_t__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_eventGetInfoAu8FEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__uint8_t_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_eventGetInfoAu8pFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventGetInfo__as__void_ptr__from__EVENT_HANDLE__EVENT_INFO_CMD(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_eventGetInfoAvptrFEHEIC(egentlBox, eh, cmd, returnValue);
}
static inline int Eur_EGenTL_eventKillQuiet__from__EVENT_HANDLE(Eur_EGenTL egentlBox, EVENT_HANDLE eh) {
    return euEGenTL_eventKillQuietFEH(egentlBox, eh);
}
static inline int Eur_EGenTL_eventKill__from__EVENT_HANDLE(Eur_EGenTL egentlBox, EVENT_HANDLE eh) {
    return euEGenTL_eventKillFEH(egentlBox, eh);
}
static inline int Eur_EGenTL_eventsGetData__from__std_vector_EURESYS_EVENT_GET_DATA_ENTRY__uint64_t_p(Eur_EGenTL egentlBox, std_vector_EURESYS_EVENT_GET_DATA_ENTRY ref_entries, uint64_t *timeout) {
    return euEGenTL_eventsGetDataFSv_EEGDEu64p(egentlBox, ref_entries, timeout);
}
static inline int Eur_EGenTL_gcGetInfo__as__InfoCommandInfo__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_gcGetInfoA_CINFOFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__bool8_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_gcGetInfoAb8FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__char_ptr__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_gcGetInfoAcptrFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__double__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_gcGetInfoAdFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__float__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_gcGetInfoAfFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__int16_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_gcGetInfoAi16FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__int32_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_gcGetInfoAi32FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__int64_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_gcGetInfoAi64FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__int8_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_gcGetInfoAi8FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__size_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_gcGetInfoAsFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__std_string__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_gcGetInfoASsFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__std_vector_char__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_gcGetInfoASvcFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__std_vector_std_string__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_gcGetInfoASv_std_stringFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__uint16_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_gcGetInfoAu16FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__uint32_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_gcGetInfoAu32FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__uint64_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_gcGetInfoAu64FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__uint8_t__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_gcGetInfoAu8FTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__uint8_t_ptr__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_gcGetInfoAu8pFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetInfo__as__void_ptr__from__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_gcGetInfoAvptrFTIC(egentlBox, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetNumPortURLs__from__PORT_HANDLE(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t *returnValue) {
    return euEGenTL_gcGetNumPortURLsFPH(egentlBox, h, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__InfoCommandInfo__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_gcGetPortInfoA_CINFOFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__bool8_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_gcGetPortInfoAb8FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__char_ptr__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_gcGetPortInfoAcptrFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__double__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_gcGetPortInfoAdFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__float__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_gcGetPortInfoAfFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__int16_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_gcGetPortInfoAi16FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__int32_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_gcGetPortInfoAi32FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__int64_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_gcGetPortInfoAi64FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__int8_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_gcGetPortInfoAi8FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__size_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_gcGetPortInfoAsFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__std_string__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_gcGetPortInfoASsFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__std_vector_char__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_gcGetPortInfoASvcFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__std_vector_std_string__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_gcGetPortInfoASv_std_stringFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__uint16_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_gcGetPortInfoAu16FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__uint32_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_gcGetPortInfoAu32FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__uint64_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_gcGetPortInfoAu64FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__uint8_t__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_gcGetPortInfoAu8FPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__uint8_t_ptr__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_gcGetPortInfoAu8pFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortInfo__as__void_ptr__from__PORT_HANDLE__PORT_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_gcGetPortInfoAvptrFPHPIC(egentlBox, ph, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__InfoCommandInfo__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_gcGetPortURLInfoA_CINFOFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__bool8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAb8FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__char_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_gcGetPortURLInfoAcptrFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__double__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_gcGetPortURLInfoAdFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__float__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_gcGetPortURLInfoAfFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__int16_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAi16FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__int32_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAi32FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__int64_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAi64FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__int8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAi8FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__size_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAsFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__std_string__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_gcGetPortURLInfoASsFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__std_vector_char__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_gcGetPortURLInfoASvcFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__std_vector_std_string__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_gcGetPortURLInfoASv_std_stringFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__uint16_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAu16FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__uint32_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAu32FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__uint64_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAu64FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__uint8_t__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_gcGetPortURLInfoAu8FPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__uint8_t_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_gcGetPortURLInfoAu8pFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURLInfo__as__void_ptr__from__PORT_HANDLE__uint32_t__URL_INFO_CMD(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_gcGetPortURLInfoAvptrFPHu32UIC(egentlBox, h, index, cmd, returnValue);
}
static inline int Eur_EGenTL_gcGetPortURL__from__PORT_HANDLE(Eur_EGenTL egentlBox, PORT_HANDLE ph, std_vector_std_string *returnValue) {
    return euEGenTL_gcGetPortURLFPH(egentlBox, ph, returnValue);
}
static inline int Eur_EGenTL_gcReadPortData__from__PORT_HANDLE__uint64_t__void_p__size_t(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, void *data, size_t size) {
    return euEGenTL_gcReadPortDataFPHu64vps(egentlBox, ph, address, data, size);
}
static inline int Eur_EGenTL_gcReadPortStacked__from__PORT_HANDLE__std_vector_PORT_REGISTER_STACK_ENTRY(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries) {
    return euEGenTL_gcReadPortStackedFPHSv_PRSE(egentlBox, h, ref_entries);
}
static inline int Eur_EGenTL_gcReadPortString__from__PORT_HANDLE__uint64_t__size_t(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, size_t size, std_string *returnValue) {
    return euEGenTL_gcReadPortStringFPHu64s(egentlBox, ph, address, size, returnValue);
}
static inline int Eur_EGenTL_gcReadPort__from__PORT_HANDLE__uint64_t(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, uint32_t *returnValue) {
    return euEGenTL_gcReadPortFPHu64(egentlBox, ph, address, returnValue);
}
static inline int Eur_EGenTL_gcReadPort__from__PORT_HANDLE__uint64_t__std_vector_char(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data) {
    return euEGenTL_gcReadPortFPHu64Svc(egentlBox, ph, address, ref_data);
}
static inline int Eur_EGenTL_gcRegisterEvent__from__EVENTSRC_HANDLE__EVENT_TYPE(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event, EVENT_HANDLE *returnValue) {
    return euEGenTL_gcRegisterEventFEHET(egentlBox, h, event, returnValue);
}
static inline int Eur_EGenTL_gcUnregisterEvent__from__EVENTSRC_HANDLE__EVENT_TYPE(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event) {
    return euEGenTL_gcUnregisterEventFEHET(egentlBox, h, event);
}
static inline int Eur_EGenTL_gcWritePortData__from__PORT_HANDLE__uint64_t__void_p__size_t(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, const void *data, size_t size) {
    return euEGenTL_gcWritePortDataFPHu64vps(egentlBox, ph, address, data, size);
}
static inline int Eur_EGenTL_gcWritePortStacked__from__PORT_HANDLE__std_vector_PORT_REGISTER_STACK_ENTRY(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries) {
    return euEGenTL_gcWritePortStackedFPHSv_PRSE(egentlBox, h, ref_entries);
}
static inline int Eur_EGenTL_gcWritePort__from__PORT_HANDLE__uint64_t__std_vector_char(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data) {
    return euEGenTL_gcWritePortFPHu64Svc(egentlBox, ph, address, ref_data);
}
static inline int Eur_EGenTL_genapiAttachEvent__from__PORT_HANDLE__uint64_t__void_p__size_t(Eur_EGenTL egentlBox, PORT_HANDLE h, uint64_t eventId, const void *buffer, size_t size) {
    return euEGenTL_genapiAttachEventFPHu64vps(egentlBox, h, eventId, buffer, size);
}
static inline int Eur_EGenTL_genapiExecuteCommand__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature) {
    return euEGenTL_genapiExecuteCommandFPHccp(egentlBox, h, feature);
}
static inline int Eur_EGenTL_genapiGetFloatWithDefault__from__PORT_HANDLE__const_char_p__double(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double defaultValue, double *returnValue) {
    return euEGenTL_genapiGetFloatWithDefaultFPHccpd(egentlBox, h, feature, defaultValue, returnValue);
}
static inline int Eur_EGenTL_genapiGetFloat__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double *returnValue) {
    return euEGenTL_genapiGetFloatFPHccp(egentlBox, h, feature, returnValue);
}
static inline int Eur_EGenTL_genapiGetIntegerWithDefault__from__PORT_HANDLE__const_char_p__int64_t(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t defaultValue, int64_t *returnValue) {
    return euEGenTL_genapiGetIntegerWithDefaultFPHccpi64(egentlBox, h, feature, defaultValue, returnValue);
}
static inline int Eur_EGenTL_genapiGetInteger__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t *returnValue) {
    return euEGenTL_genapiGetIntegerFPHccp(egentlBox, h, feature, returnValue);
}
static inline int Eur_EGenTL_genapiGetRegister__from__PORT_HANDLE__const_char_p__void_p__size_t(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, void *data, size_t size) {
    return euEGenTL_genapiGetRegisterFPHccpvps(egentlBox, h, feature, data, size);
}
static inline int Eur_EGenTL_genapiGetStringData__from__PORT_HANDLE__const_char_p__std_vector_char(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_vector_char ref_data) {
    return euEGenTL_genapiGetStringDataFPHccpSvc(egentlBox, h, feature, ref_data);
}
static inline int Eur_EGenTL_genapiGetStringList__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *what, std_vector_std_string *returnValue) {
    return euEGenTL_genapiGetStringListFPHccp(egentlBox, h, what, returnValue);
}
static inline int Eur_EGenTL_genapiGetString__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_string *returnValue) {
    return euEGenTL_genapiGetStringFPHccp(egentlBox, h, feature, returnValue);
}
static inline int Eur_EGenTL_genapiInterruptScript__from__const_char_p(Eur_EGenTL egentlBox, const char *scriptId) {
    return euEGenTL_genapiInterruptScriptFccp(egentlBox, scriptId);
}
static inline int Eur_EGenTL_genapiInvalidate__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature) {
    return euEGenTL_genapiInvalidateFPHccp(egentlBox, h, feature);
}
static inline int Eur_EGenTL_genapiRunScript__from__PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script) {
    return euEGenTL_genapiRunScriptFPHccp(egentlBox, h, script);
}
static inline int Eur_EGenTL_genapiRunScript__from__PORT_HANDLE__const_char_p__GENAPI_UI_SCRIPT_CONTEXT_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */) {
    return euEGenTL_genapiRunScriptFPHccpGENAPI_UI_SCRIPT_CONTEXT_p(egentlBox, h, script, context);
}
static inline int Eur_EGenTL_genapiRunScript__from__std_vector_PORT_HANDLE__const_char_p(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script) {
    return euEGenTL_genapiRunScriptFSv_PHccp(egentlBox, ref_handles, script);
}
static inline int Eur_EGenTL_genapiRunScript__from__std_vector_PORT_HANDLE__const_char_p__GENAPI_UI_SCRIPT_CONTEXT_p(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */) {
    return euEGenTL_genapiRunScriptFSv_PHccpGENAPI_UI_SCRIPT_CONTEXT_p(egentlBox, ref_handles, script, context);
}
static inline int Eur_EGenTL_genapiSetFloat__from__PORT_HANDLE__const_char_p__double(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double value) {
    return euEGenTL_genapiSetFloatFPHccpd(egentlBox, h, feature, value);
}
static inline int Eur_EGenTL_genapiSetInteger__from__PORT_HANDLE__const_char_p__int64_t(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t value) {
    return euEGenTL_genapiSetIntegerFPHccpi64(egentlBox, h, feature, value);
}
static inline int Eur_EGenTL_genapiSetRegister__from__PORT_HANDLE__const_char_p__void_p__size_t(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const void *data, size_t size) {
    return euEGenTL_genapiSetRegisterFPHccpvps(egentlBox, h, feature, data, size);
}
static inline int Eur_EGenTL_genapiSetString__from__PORT_HANDLE__const_char_p__const_char_p(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const char *value) {
    return euEGenTL_genapiSetStringFPHccpccp(egentlBox, h, feature, value);
}
static inline int Eur_EGenTL_getTimestampUs(Eur_EGenTL egentlBox, uint64_t *returnValue) {
    return euEGenTL_getTimestampUs(egentlBox, returnValue);
}
static inline int Eur_EGenTL_ifClose__from__IF_HANDLE(Eur_EGenTL egentlBox, IF_HANDLE ifh) {
    return euEGenTL_ifCloseFIH(egentlBox, ifh);
}
static inline int Eur_EGenTL_ifGetDeviceID__from__IF_HANDLE__uint32_t(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t index, std_string *returnValue) {
    return euEGenTL_ifGetDeviceIDFIHu32(egentlBox, ifh, index, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__InfoCommandInfo__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_ifGetDeviceInfoA_CINFOFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__bool8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAb8FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__char_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_ifGetDeviceInfoAcptrFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__double__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_ifGetDeviceInfoAdFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__float__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_ifGetDeviceInfoAfFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__int16_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAi16FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__int32_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAi32FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__int64_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAi64FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__int8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAi8FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__size_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAsFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__std_string__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_ifGetDeviceInfoASsFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__std_vector_char__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_ifGetDeviceInfoASvcFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__std_vector_std_string__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_ifGetDeviceInfoASv_std_stringFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__uint16_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAu16FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__uint32_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAu32FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__uint64_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAu64FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__uint8_t__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_ifGetDeviceInfoAu8FIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__uint8_t_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_ifGetDeviceInfoAu8pFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetDeviceInfo__as__void_ptr__from__IF_HANDLE__const_char_p__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_ifGetDeviceInfoAvptrFIHccpIIC(egentlBox, ifh, devID, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__InfoCommandInfo__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_ifGetInfoA_CINFOFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__bool8_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_ifGetInfoAb8FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__char_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_ifGetInfoAcptrFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__double__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_ifGetInfoAdFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__float__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_ifGetInfoAfFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__int16_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_ifGetInfoAi16FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__int32_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_ifGetInfoAi32FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__int64_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_ifGetInfoAi64FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__int8_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_ifGetInfoAi8FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__size_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_ifGetInfoAsFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__std_string__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_ifGetInfoASsFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__std_vector_char__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_ifGetInfoASvcFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__std_vector_std_string__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_ifGetInfoASv_std_stringFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__uint16_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_ifGetInfoAu16FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__uint32_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_ifGetInfoAu32FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__uint64_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_ifGetInfoAu64FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__uint8_t__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_ifGetInfoAu8FIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__uint8_t_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_ifGetInfoAu8pFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetInfo__as__void_ptr__from__IF_HANDLE__INTERFACE_INFO_CMD(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_ifGetInfoAvptrFIHIIC(egentlBox, ifh, cmd, returnValue);
}
static inline int Eur_EGenTL_ifGetNumDevices__from__IF_HANDLE(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t *returnValue) {
    return euEGenTL_ifGetNumDevicesFIH(egentlBox, ifh, returnValue);
}
static inline int Eur_EGenTL_ifGetParent__from__IF_HANDLE(Eur_EGenTL egentlBox, IF_HANDLE ifh, TL_HANDLE *returnValue) {
    return euEGenTL_ifGetParentFIH(egentlBox, ifh, returnValue);
}
static inline int Eur_EGenTL_ifOpenDevice__from__IF_HANDLE__const_char_p(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEV_HANDLE *returnValue) {
    return euEGenTL_ifOpenDeviceFIHccp(egentlBox, ifh, devID, returnValue);
}
static inline int Eur_EGenTL_ifOpenDevice__from__IF_HANDLE__const_char_p__DEVICE_ACCESS_FLAGS(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEVICE_ACCESS_FLAGS flags /* def=defaultDeviceOpenFlags */, DEV_HANDLE *returnValue) {
    return euEGenTL_ifOpenDeviceFIHccpDAF(egentlBox, ifh, devID, flags, returnValue);
}
static inline int Eur_EGenTL_ifUpdateDeviceList__from__IF_HANDLE(Eur_EGenTL egentlBox, IF_HANDLE ifh, bool8_t *returnValue) {
    return euEGenTL_ifUpdateDeviceListFIH(egentlBox, ifh, returnValue);
}
static inline int Eur_EGenTL_ifUpdateDeviceList__from__IF_HANDLE__uint64_t(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue) {
    return euEGenTL_ifUpdateDeviceListFIHu64(egentlBox, ifh, timeout, returnValue);
}
static inline int Eur_EGenTL_imageConvert__from__ImageConvertInput_p__ImageConvertOutput_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output) {
    return euEGenTL_imageConvertF_ICI_p_ICO_p(egentlBox, ref_input, ref_output);
}
static inline int Eur_EGenTL_imageConvert__from__ImageConvertInput_p__ImageConvertOutput_p__ImageConvertROI_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output, const ImageConvertROI *roi /* def=0 */) {
    return euEGenTL_imageConvertF_ICI_p_ICO_pImageConvertROI_p(egentlBox, ref_input, ref_output, roi);
}
static inline int Eur_EGenTL_imageGetBitsPerPixel__from__const_char_p(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue) {
    return euEGenTL_imageGetBitsPerPixelFccp(egentlBox, format, returnValue);
}
static inline int Eur_EGenTL_imageGetBytesPerPixel__from__const_char_p(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue) {
    return euEGenTL_imageGetBytesPerPixelFccp(egentlBox, format, returnValue);
}
static inline int Eur_EGenTL_imageGetPixelFormatValue__from__const_char_p__unsigned_int(Eur_EGenTL egentlBox, const char *format, unsigned int ns, unsigned int *returnValue) {
    return euEGenTL_imageGetPixelFormatValueFccpui(egentlBox, format, ns, returnValue);
}
static inline int Eur_EGenTL_imageGetPixelFormat__from__uint64_t(Eur_EGenTL egentlBox, uint64_t format, std_string *returnValue) {
    return euEGenTL_imageGetPixelFormatFu64(egentlBox, format, returnValue);
}
static inline int Eur_EGenTL_imageGet__from__ImageId(Eur_EGenTL egentlBox, ImageId id, void * *returnValue) {
    return euEGenTL_imageGetFImageId(egentlBox, id, returnValue);
}
static inline int Eur_EGenTL_imageGet__from__ImageId__size_t_p(Eur_EGenTL egentlBox, ImageId id, size_t *outSize /* def=0 */, void * *returnValue) {
    return euEGenTL_imageGetFImageIdsp(egentlBox, id, outSize, returnValue);
}
static inline int Eur_EGenTL_imagePrepareBuffers__from__size_t__size_t(Eur_EGenTL egentlBox, size_t bufferSize, size_t count) {
    return euEGenTL_imagePrepareBuffersFss(egentlBox, bufferSize, count);
}
static inline int Eur_EGenTL_imageRelease__from__ImageId(Eur_EGenTL egentlBox, ImageId id) {
    return euEGenTL_imageReleaseFImageId(egentlBox, id);
}
static inline int Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath) {
    return euEGenTL_imageSaveToDiskF_ICI_pccp(egentlBox, ref_input, filepath);
}
static inline int Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p__int64_t(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */) {
    return euEGenTL_imageSaveToDiskF_ICI_pccpi64(egentlBox, ref_input, filepath, index);
}
static inline int Eur_EGenTL_imageSaveToDisk__from__ImageConvertInput_p__const_char_p__int64_t__ImageSaveToDiskParams_p(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */) {
    return euEGenTL_imageSaveToDiskF_ICI_pccpi64_ISTDP_p(egentlBox, ref_input, filepath, index, params);
}
static inline int Eur_EGenTL_imageTrimBuffers(Eur_EGenTL egentlBox) {
    return euEGenTL_imageTrimBuffers(egentlBox);
}
static inline int Eur_EGenTL_isShared(Eur_EGenTL egentlBox, bool8_t *returnValue) {
    return euEGenTL_isShared(egentlBox, returnValue);
}
static inline int Eur_EGenTL_lockUpdates(Eur_EGenTL egentlBox) {
    return euEGenTL_lockUpdates(egentlBox);
}
static inline int Eur_EGenTL_mementoWaveDown__from__unsigned_char__unsigned_char(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id) {
    return euEGenTL_mementoWaveDownFucuc(egentlBox, kind, id);
}
static inline int Eur_EGenTL_mementoWaveNoValue__from__unsigned_char__unsigned_char(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id) {
    return euEGenTL_mementoWaveNoValueFucuc(egentlBox, kind, id);
}
static inline int Eur_EGenTL_mementoWaveReset__from__unsigned_char__unsigned_char(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id) {
    return euEGenTL_mementoWaveResetFucuc(egentlBox, kind, id);
}
static inline int Eur_EGenTL_mementoWaveUp__from__unsigned_char__unsigned_char(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id) {
    return euEGenTL_mementoWaveUpFucuc(egentlBox, kind, id);
}
static inline int Eur_EGenTL_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id, uint64_t value) {
    return euEGenTL_mementoWaveValueFucucu64(egentlBox, kind, id, value);
}
static inline int Eur_EGenTL_memento__from__const_char_p(Eur_EGenTL egentlBox, const char *text) {
    return euEGenTL_mementoFccp(egentlBox, text);
}
static inline int Eur_EGenTL_memento__from__unsigned_char__unsigned_char__const_char_p(Eur_EGenTL egentlBox, unsigned char verbosity, unsigned char kind, const char *text) {
    return euEGenTL_mementoFucucccp(egentlBox, verbosity, kind, text);
}
static inline int Eur_EGenTL_tlClose__from__TL_HANDLE(Eur_EGenTL egentlBox, TL_HANDLE tlh) {
    return euEGenTL_tlCloseFTH(egentlBox, tlh);
}
static inline int Eur_EGenTL_tlGetInfo__as__InfoCommandInfo__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_tlGetInfoA_CINFOFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__bool8_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_tlGetInfoAb8FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__char_ptr__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_tlGetInfoAcptrFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__double__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_tlGetInfoAdFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__float__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_tlGetInfoAfFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__int16_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_tlGetInfoAi16FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__int32_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_tlGetInfoAi32FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__int64_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_tlGetInfoAi64FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__int8_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_tlGetInfoAi8FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__size_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_tlGetInfoAsFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__std_string__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_tlGetInfoASsFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__std_vector_char__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_tlGetInfoASvcFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__std_vector_std_string__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_tlGetInfoASv_std_stringFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__uint16_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_tlGetInfoAu16FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__uint32_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_tlGetInfoAu32FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__uint64_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_tlGetInfoAu64FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__uint8_t__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_tlGetInfoAu8FTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__uint8_t_ptr__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_tlGetInfoAu8pFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInfo__as__void_ptr__from__TL_HANDLE__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_tlGetInfoAvptrFTHTIC(egentlBox, tlh, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceID__from__TL_HANDLE__uint32_t(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t index, std_string *returnValue) {
    return euEGenTL_tlGetInterfaceIDFTHu32(egentlBox, tlh, index, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__InfoCommandInfo__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGenTL_tlGetInterfaceInfoA_CINFOFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__bool8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAb8FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__char_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, char * *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAcptrFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__double__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, double *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAdFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__float__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, float *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAfFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__int16_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int16_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAi16FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__int32_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int32_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAi32FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__int64_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int64_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAi64FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__int8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int8_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAi8FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__size_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, size_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAsFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__std_string__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_string *returnValue) {
    return euEGenTL_tlGetInterfaceInfoASsFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__std_vector_char__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGenTL_tlGetInterfaceInfoASvcFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__std_vector_std_string__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGenTL_tlGetInterfaceInfoASv_std_stringFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__uint16_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAu16FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__uint32_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAu32FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__uint64_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAu64FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__uint8_t__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAu8FTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__uint8_t_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAu8pFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetInterfaceInfo__as__void_ptr__from__TL_HANDLE__const_char_p__TL_INFO_CMD(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, void * *returnValue) {
    return euEGenTL_tlGetInterfaceInfoAvptrFTHccpTIC(egentlBox, tlh, ifID, cmd, returnValue);
}
static inline int Eur_EGenTL_tlGetNumInterfaces__from__TL_HANDLE(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t *returnValue) {
    return euEGenTL_tlGetNumInterfacesFTH(egentlBox, tlh, returnValue);
}
static inline int Eur_EGenTL_tlOpen(Eur_EGenTL egentlBox, TL_HANDLE *returnValue) {
    return euEGenTL_tlOpen(egentlBox, returnValue);
}
static inline int Eur_EGenTL_tlOpenInterface__from__TL_HANDLE__const_char_p(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, IF_HANDLE *returnValue) {
    return euEGenTL_tlOpenInterfaceFTHccp(egentlBox, tlh, ifID, returnValue);
}
static inline int Eur_EGenTL_tlUpdateInterfaceList__from__TL_HANDLE(Eur_EGenTL egentlBox, TL_HANDLE tlh, bool8_t *returnValue) {
    return euEGenTL_tlUpdateInterfaceListFTH(egentlBox, tlh, returnValue);
}
static inline int Eur_EGenTL_tlUpdateInterfaceList__from__TL_HANDLE__uint64_t(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue) {
    return euEGenTL_tlUpdateInterfaceListFTHu64(egentlBox, tlh, timeout, returnValue);
}
static inline int Eur_EGenTL_unlockUpdates(Eur_EGenTL egentlBox) {
    return euEGenTL_unlockUpdates(egentlBox);
}
static inline int Eur_EGrabberCameraInfo_create(Eur_EGrabberCameraInfo *egrabbercamerainfoBox) {
    return euEurEGCameraInfo_create(egrabbercamerainfoBox);
}
static inline int Eur_EGrabberCameraInfo_destroy(Eur_EGrabberCameraInfo egrabbercamerainfoBox) {
    return euEurEGCameraInfo_destroy(egrabbercamerainfoBox);
}
static inline int Eur_EGrabberCameraInfo_get_script(Eur_EGrabberCameraInfo info, std_string *returnValue) {
    return euEurEGCameraInfo_get_script(info, returnValue);
}
static inline int Eur_EGrabberCameraInfo_grabber_at__from__size_t(Eur_EGrabberCameraInfo info, size_t index, Eur_EGrabberInfo *returnValue) {
    return euEurEGCameraInfo_grabber_atFs(info, index, returnValue);
}
static inline int Eur_EGrabberCameraInfo_grabber_count(Eur_EGrabberCameraInfo info, size_t *returnValue) {
    return euEurEGCameraInfo_grabber_count(info, returnValue);
}
static inline int Eur_EGrabberCameraInfo_grabbers_push_back__from__Eur_EGrabberInfo(Eur_EGrabberCameraInfo info, Eur_EGrabberInfo ref_grabber) {
    return euEurEGCameraInfo_grabbers_push_backFEurEGInfo(info, ref_grabber);
}
static inline int Eur_EGrabberDiscovery_cameraCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue) {
    return euEurEGDiscovery_cameraCount(egrabberdiscoveryBox, returnValue);
}
static inline int Eur_EGrabberDiscovery_cameras__from__const_char_p(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, Eur_EGrabberCameraInfo *returnValue) {
    return euEurEGDiscovery_camerasFccp(egrabberdiscoveryBox, deviceUserID, returnValue);
}
static inline int Eur_EGrabberDiscovery_cameras__from__const_char_p__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue) {
    return euEurEGDiscovery_camerasFccpi(egrabberdiscoveryBox, deviceUserID, streamIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_cameras__from__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberCameraInfo *returnValue) {
    return euEurEGDiscovery_camerasFi(egrabberdiscoveryBox, index, returnValue);
}
static inline int Eur_EGrabberDiscovery_cameras__from__int__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue) {
    return euEurEGDiscovery_camerasFii(egrabberdiscoveryBox, index, streamIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_create__from__Eur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabberDiscovery *egrabberdiscoveryBox) {
    return euEurEGDiscovery_createFEur_EGenTL(ref_gentl, egrabberdiscoveryBox);
}
static inline int Eur_EGrabberDiscovery_destroy(Eur_EGrabberDiscovery egrabberdiscoveryBox) {
    return euEurEGDiscovery_destroy(egrabberdiscoveryBox);
}
static inline int Eur_EGrabberDiscovery_deviceCount__from__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int *returnValue) {
    return euEurEGDiscovery_deviceCountFi(egrabberdiscoveryBox, interfaceIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_deviceInfo__from__int__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, Eur_EGrabberInfo *returnValue) {
    return euEurEGDiscovery_deviceInfoFii(egrabberdiscoveryBox, interfaceIndex, deviceIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_discover(Eur_EGrabberDiscovery egrabberdiscoveryBox) {
    return euEurEGDiscovery_discover(egrabberdiscoveryBox);
}
static inline int Eur_EGrabberDiscovery_discover__from__bool8_t(Eur_EGrabberDiscovery egrabberdiscoveryBox, bool8_t findCameras /* def=true */) {
    return euEurEGDiscovery_discoverFb8(egrabberdiscoveryBox, findCameras);
}
static inline int Eur_EGrabberDiscovery_egrabberCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue) {
    return euEurEGDiscovery_egrabberCount(egrabberdiscoveryBox, returnValue);
}
static inline int Eur_EGrabberDiscovery_egrabbers__from__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberInfo *returnValue) {
    return euEurEGDiscovery_egrabbersFi(egrabberdiscoveryBox, index, returnValue);
}
static inline int Eur_EGrabberDiscovery_interfaceCount(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue) {
    return euEurEGDiscovery_interfaceCount(egrabberdiscoveryBox, returnValue);
}
static inline int Eur_EGrabberDiscovery_interfaceInfo__from__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, Eur_EGrabberInfo *returnValue) {
    return euEurEGDiscovery_interfaceInfoFi(egrabberdiscoveryBox, interfaceIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_streamCount__from__int__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int *returnValue) {
    return euEurEGDiscovery_streamCountFii(egrabberdiscoveryBox, interfaceIndex, deviceIndex, returnValue);
}
static inline int Eur_EGrabberDiscovery_streamInfo__from__int__int__int(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int streamIndex, Eur_EGrabberInfo *returnValue) {
    return euEurEGDiscovery_streamInfoFiii(egrabberdiscoveryBox, interfaceIndex, deviceIndex, streamIndex, returnValue);
}
static inline int Eur_EGrabberInfo_create(Eur_EGrabberInfo *egrabberinfoBox) {
    return euEurEGInfo_create(egrabberinfoBox);
}
static inline int Eur_EGrabberInfo_destroy(Eur_EGrabberInfo egrabberinfoBox) {
    return euEurEGInfo_destroy(egrabberinfoBox);
}
static inline int Eur_EGrabberInfo_get_deviceDescription(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceDescription(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceID(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceID(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceIndex(Eur_EGrabberInfo info, int *returnValue) {
    return euEurEGInfo_get_deviceIndex(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceLicenseStatus(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceLicenseStatus(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceModelName(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceModelName(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceSerialNumber(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceSerialNumber(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceUserID(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceUserID(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_deviceVendorName(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_deviceVendorName(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_fanStatus(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_fanStatus(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_firmwareStatus(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_firmwareStatus(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_interfaceID(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_interfaceID(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_interfaceIndex(Eur_EGrabberInfo info, int *returnValue) {
    return euEurEGInfo_get_interfaceIndex(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_isDeviceReadOnly(Eur_EGrabberInfo info, bool8_t *returnValue) {
    return euEurEGInfo_get_isDeviceReadOnly(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_isRemoteAvailable(Eur_EGrabberInfo info, bool8_t *returnValue) {
    return euEurEGInfo_get_isRemoteAvailable(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_licenseStatus(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_licenseStatus(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_streamDescription(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_streamDescription(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_streamID(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_streamID(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_streamIndex(Eur_EGrabberInfo info, int *returnValue) {
    return euEurEGInfo_get_streamIndex(info, returnValue);
}
static inline int Eur_EGrabberInfo_get_tlType(Eur_EGrabberInfo info, std_string *returnValue) {
    return euEurEGInfo_get_tlType(info, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_BusMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_BusMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_GenTLMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_GenTLMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_GenTLMemory__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_GenTLMemorys(egrabberBox, ref_memory, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_NvidiaRdmaMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_NvidiaRdmaMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemory(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_UserMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemoryArray(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_UserMemoryArray(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceAndQueue__from__Eur_UserMemoryArray__bool8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue) {
    return euEGMT_announceAndQueueFEur_UserMemoryArrayb8(egrabberBox, ref_memory, reverse, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceBusBuffer__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue) {
    return euEGMT_announceBusBufferFu64s(egrabberBox, busAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceBusBuffer__from__uint64_t__size_t__void_p(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGMT_announceBusBufferFu64svp(egrabberBox, busAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceNvidiaRdmaBuffer__from__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue) {
    return euEGMT_announceNvidiaRdmaBufferFvps(egrabberBox, deviceAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGMT_announceNvidiaRdmaBufferFvpsvp(egrabberBox, deviceAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGMT_attachEventODeviceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGMT_attachEventOInterfaceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGMT_attachEventORemoteModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGMT_attachEventOStreamModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGMT_attachEventOSystemModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTL(ref_gentl, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackMultiThread *egrabber) {
    return euEGMT_createFEur_EGenTLTHIHDHDH(ref_gentl, tlh, ifh, devh, dsh, egrabber);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTLi(ref_gentl, interfaceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTLii(ref_gentl, interfaceIndex, deviceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTLiii(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTLiiiDAF(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEur_EGenTLiiiDAFb8(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEurEGCameraInfo(ref_camera, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEurEGCameraInfoDAF(ref_camera, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEurEGInfo(ref_grabber, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEurEGInfoDAF(ref_grabber, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox) {
    return euEGMT_createFEurEGInfoDAFb8(ref_grabber, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_destroy(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_destroy(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__All(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__CicData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__DataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__IoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_disableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_disableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__All(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__CicData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__DataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__IoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_enableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_enableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_execute__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command) {
    return euEGMT_executeODeviceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackMultiThread_execute__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command) {
    return euEGMT_executeOInterfaceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackMultiThread_execute__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command) {
    return euEGMT_executeORemoteModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackMultiThread_execute__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command) {
    return euEGMT_executeOStreamModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackMultiThread_execute__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command) {
    return euEGMT_executeOSystemModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushBuffers(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushBuffers__from__ACQ_QUEUE_TYPE(Eur_EGrabber_CallbackMultiThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */) {
    return euEGMT_flushBuffersFAQT(egrabberBox, operation);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__All(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__CicData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__CxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__DataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__DeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__IoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_flushEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_flushEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGMT_gcReadPortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGMT_gcReadPortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGMT_gcReadPortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGMT_gcReadPortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGMT_gcReadPortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGMT_gcReadPortStringODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGMT_gcReadPortStringOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGMT_gcReadPortStringORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGMT_gcReadPortStringOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortString__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGMT_gcReadPortStringOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_gcReadPortValueA_CINFOODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_gcReadPortValueA_CINFOOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_gcReadPortValueA_CINFOORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_gcReadPortValueA_CINFOOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_gcReadPortValueA_CINFOOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGMT_gcReadPortValueAb8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGMT_gcReadPortValueAb8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGMT_gcReadPortValueAb8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGMT_gcReadPortValueAb8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGMT_gcReadPortValueAb8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGMT_gcReadPortValueAcptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGMT_gcReadPortValueAcptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGMT_gcReadPortValueAcptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGMT_gcReadPortValueAcptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGMT_gcReadPortValueAcptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGMT_gcReadPortValueAdODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGMT_gcReadPortValueAdOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGMT_gcReadPortValueAdORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGMT_gcReadPortValueAdOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__double__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGMT_gcReadPortValueAdOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGMT_gcReadPortValueAfODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGMT_gcReadPortValueAfOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGMT_gcReadPortValueAfORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGMT_gcReadPortValueAfOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__float__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGMT_gcReadPortValueAfOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGMT_gcReadPortValueAi16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGMT_gcReadPortValueAi16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGMT_gcReadPortValueAi16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGMT_gcReadPortValueAi16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGMT_gcReadPortValueAi16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGMT_gcReadPortValueAi32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGMT_gcReadPortValueAi32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGMT_gcReadPortValueAi32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGMT_gcReadPortValueAi32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGMT_gcReadPortValueAi32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGMT_gcReadPortValueAi64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGMT_gcReadPortValueAi64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGMT_gcReadPortValueAi64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGMT_gcReadPortValueAi64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGMT_gcReadPortValueAi64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGMT_gcReadPortValueAi8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGMT_gcReadPortValueAi8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGMT_gcReadPortValueAi8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGMT_gcReadPortValueAi8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGMT_gcReadPortValueAi8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGMT_gcReadPortValueAsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGMT_gcReadPortValueAsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGMT_gcReadPortValueAsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGMT_gcReadPortValueAsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGMT_gcReadPortValueAsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGMT_gcReadPortValueASsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGMT_gcReadPortValueASsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGMT_gcReadPortValueASsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGMT_gcReadPortValueASsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGMT_gcReadPortValueASsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGMT_gcReadPortValueASvcODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGMT_gcReadPortValueASvcOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGMT_gcReadPortValueASvcORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGMT_gcReadPortValueASvcOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGMT_gcReadPortValueASvcOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGMT_gcReadPortValueASv_std_stringODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGMT_gcReadPortValueASv_std_stringOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGMT_gcReadPortValueASv_std_stringORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGMT_gcReadPortValueASv_std_stringOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGMT_gcReadPortValueASv_std_stringOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGMT_gcReadPortValueAu16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGMT_gcReadPortValueAu16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGMT_gcReadPortValueAu16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGMT_gcReadPortValueAu16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGMT_gcReadPortValueAu16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGMT_gcReadPortValueAu32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGMT_gcReadPortValueAu32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGMT_gcReadPortValueAu32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGMT_gcReadPortValueAu32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGMT_gcReadPortValueAu32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGMT_gcReadPortValueAu64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGMT_gcReadPortValueAu64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGMT_gcReadPortValueAu64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGMT_gcReadPortValueAu64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGMT_gcReadPortValueAu64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGMT_gcReadPortValueAu8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGMT_gcReadPortValueAu8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGMT_gcReadPortValueAu8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGMT_gcReadPortValueAu8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGMT_gcReadPortValueAu8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGMT_gcReadPortValueAu8pODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGMT_gcReadPortValueAu8pOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGMT_gcReadPortValueAu8pORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGMT_gcReadPortValueAu8pOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGMT_gcReadPortValueAu8pOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGMT_gcReadPortValueAvptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGMT_gcReadPortValueAvptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGMT_gcReadPortValueAvptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGMT_gcReadPortValueAvptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGMT_gcReadPortValueAvptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPort__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGMT_gcReadPortODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPort__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGMT_gcReadPortOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPort__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGMT_gcReadPortORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPort__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGMT_gcReadPortOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcReadPort__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGMT_gcReadPortOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGMT_gcWritePortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGMT_gcWritePortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGMT_gcWritePortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGMT_gcWritePortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGMT_gcWritePortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value) {
    return euEGMT_gcWritePortValueWdODeviceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value) {
    return euEGMT_gcWritePortValueWdOInterfaceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value) {
    return euEGMT_gcWritePortValueWdORemoteModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value) {
    return euEGMT_gcWritePortValueWdOStreamModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value) {
    return euEGMT_gcWritePortValueWdOSystemModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value) {
    return euEGMT_gcWritePortValueWfODeviceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value) {
    return euEGMT_gcWritePortValueWfOInterfaceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value) {
    return euEGMT_gcWritePortValueWfORemoteModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value) {
    return euEGMT_gcWritePortValueWfOStreamModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value) {
    return euEGMT_gcWritePortValueWfOSystemModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value) {
    return euEGMT_gcWritePortValueWi16ODeviceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value) {
    return euEGMT_gcWritePortValueWi16OInterfaceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value) {
    return euEGMT_gcWritePortValueWi16ORemoteModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value) {
    return euEGMT_gcWritePortValueWi16OStreamModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value) {
    return euEGMT_gcWritePortValueWi16OSystemModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value) {
    return euEGMT_gcWritePortValueWi32ODeviceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value) {
    return euEGMT_gcWritePortValueWi32OInterfaceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value) {
    return euEGMT_gcWritePortValueWi32ORemoteModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value) {
    return euEGMT_gcWritePortValueWi32OStreamModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value) {
    return euEGMT_gcWritePortValueWi32OSystemModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value) {
    return euEGMT_gcWritePortValueWi64ODeviceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value) {
    return euEGMT_gcWritePortValueWi64OInterfaceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value) {
    return euEGMT_gcWritePortValueWi64ORemoteModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value) {
    return euEGMT_gcWritePortValueWi64OStreamModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value) {
    return euEGMT_gcWritePortValueWi64OSystemModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value) {
    return euEGMT_gcWritePortValueWi8ODeviceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value) {
    return euEGMT_gcWritePortValueWi8OInterfaceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value) {
    return euEGMT_gcWritePortValueWi8ORemoteModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value) {
    return euEGMT_gcWritePortValueWi8OStreamModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value) {
    return euEGMT_gcWritePortValueWi8OSystemModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value) {
    return euEGMT_gcWritePortValueWsODeviceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value) {
    return euEGMT_gcWritePortValueWsOInterfaceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value) {
    return euEGMT_gcWritePortValueWsORemoteModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value) {
    return euEGMT_gcWritePortValueWsOStreamModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value) {
    return euEGMT_gcWritePortValueWsOSystemModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGMT_gcWritePortValueWu16ODeviceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGMT_gcWritePortValueWu16OInterfaceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGMT_gcWritePortValueWu16ORemoteModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGMT_gcWritePortValueWu16OStreamModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGMT_gcWritePortValueWu16OSystemModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGMT_gcWritePortValueWu32ODeviceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGMT_gcWritePortValueWu32OInterfaceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGMT_gcWritePortValueWu32ORemoteModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGMT_gcWritePortValueWu32OStreamModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGMT_gcWritePortValueWu32OSystemModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGMT_gcWritePortValueWu64ODeviceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGMT_gcWritePortValueWu64OInterfaceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGMT_gcWritePortValueWu64ORemoteModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGMT_gcWritePortValueWu64OStreamModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGMT_gcWritePortValueWu64OSystemModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGMT_gcWritePortValueWu8ODeviceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGMT_gcWritePortValueWu8OInterfaceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGMT_gcWritePortValueWu8ORemoteModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGMT_gcWritePortValueWu8OStreamModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGMT_gcWritePortValueWu8OSystemModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGMT_gcWritePortODeviceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGMT_gcWritePortOInterfaceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGMT_gcWritePortORemoteModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGMT_gcWritePortOStreamModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGMT_gcWritePortOSystemModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferData__from__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue) {
    return euEGMT_getBufferDataFs(egrabberBox, bufferIndex, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_getBufferInfoA_CINFOFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGMT_getBufferInfoAb8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euEGMT_getBufferInfoAcptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euEGMT_getBufferInfoAdFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euEGMT_getBufferInfoAfFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euEGMT_getBufferInfoAi16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euEGMT_getBufferInfoAi32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euEGMT_getBufferInfoAi64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euEGMT_getBufferInfoAi8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euEGMT_getBufferInfoAsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euEGMT_getBufferInfoASsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGMT_getBufferInfoASvcFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGMT_getBufferInfoASv_std_stringFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGMT_getBufferInfoAu16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGMT_getBufferInfoAu32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGMT_getBufferInfoAu64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGMT_getBufferInfoAu8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGMT_getBufferInfoAu8pFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euEGMT_getBufferInfoAvptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getDevicePort__from__int(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGMT_getDevicePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getFloat__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue) {
    return euEGMT_getFloatODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getFloat__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue) {
    return euEGMT_getFloatOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getFloat__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue) {
    return euEGMT_getFloatORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getFloat__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue) {
    return euEGMT_getFloatOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getFloat__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue) {
    return euEGMT_getFloatOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getHeight(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue) {
    return euEGMT_getHeight(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_getInfoA_CINFOODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_getInfoA_CINFOOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_getInfoA_CINFOOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGMT_getInfoA_CINFOOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGMT_getInfoAb8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGMT_getInfoAb8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGMT_getInfoAb8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__bool8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGMT_getInfoAb8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGMT_getInfoAcptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGMT_getInfoAcptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGMT_getInfoAcptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__char_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGMT_getInfoAcptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGMT_getInfoAdODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGMT_getInfoAdOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGMT_getInfoAdOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__double__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGMT_getInfoAdOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGMT_getInfoAfODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGMT_getInfoAfOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGMT_getInfoAfOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__float__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGMT_getInfoAfOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGMT_getInfoAi16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGMT_getInfoAi16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGMT_getInfoAi16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGMT_getInfoAi16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGMT_getInfoAi32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGMT_getInfoAi32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGMT_getInfoAi32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGMT_getInfoAi32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGMT_getInfoAi64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGMT_getInfoAi64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGMT_getInfoAi64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGMT_getInfoAi64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGMT_getInfoAi8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGMT_getInfoAi8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGMT_getInfoAi8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__int8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGMT_getInfoAi8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGMT_getInfoAsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGMT_getInfoAsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGMT_getInfoAsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__size_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGMT_getInfoAsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGMT_getInfoASsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGMT_getInfoASsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGMT_getInfoASsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGMT_getInfoASsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGMT_getInfoASvcODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGMT_getInfoASvcOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGMT_getInfoASvcOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_char__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGMT_getInfoASvcOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGMT_getInfoASv_std_stringODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGMT_getInfoASv_std_stringOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGMT_getInfoASv_std_stringOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGMT_getInfoASv_std_stringOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGMT_getInfoAu16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGMT_getInfoAu16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGMT_getInfoAu16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGMT_getInfoAu16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGMT_getInfoAu32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGMT_getInfoAu32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGMT_getInfoAu32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGMT_getInfoAu32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGMT_getInfoAu64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGMT_getInfoAu64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGMT_getInfoAu64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGMT_getInfoAu64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGMT_getInfoAu8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGMT_getInfoAu8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGMT_getInfoAu8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGMT_getInfoAu8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGMT_getInfoAu8pODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGMT_getInfoAu8pOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGMT_getInfoAu8pOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGMT_getInfoAu8pOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGMT_getInfoAvptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGMT_getInfoAvptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGMT_getInfoAvptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInfo__as__void_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGMT_getInfoAvptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInteger__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGMT_getIntegerODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInteger__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGMT_getIntegerOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInteger__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGMT_getIntegerORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInteger__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGMT_getIntegerOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInteger__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGMT_getIntegerOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getInterfacePort__from__int(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGMT_getInterfacePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getLastEventGrabberIndex(Eur_EGrabber_CallbackMultiThread egrabberBox, int *returnValue) {
    return euEGMT_getLastEventGrabberIndex(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getPayloadSize(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue) {
    return euEGMT_getPayloadSize(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getPixelFormat(Eur_EGrabber_CallbackMultiThread egrabberBox, std_string *returnValue) {
    return euEGMT_getPixelFormat(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGMT_getRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGMT_getRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGMT_getRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGMT_getRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGMT_getRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_getRemotePort__from__int(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGMT_getRemotePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStreamPort__from__int(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGMT_getStreamPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringData__on__DeviceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGMT_getStringDataODeviceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGMT_getStringDataOInterfaceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringData__on__RemoteModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGMT_getStringDataORemoteModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringData__on__StreamModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGMT_getStringDataOStreamModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringData__on__SystemModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGMT_getStringDataOSystemModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringList__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGMT_getStringListODeviceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringList__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGMT_getStringListOInterfaceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringList__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGMT_getStringListORemoteModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringList__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGMT_getStringListOStreamModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getStringList__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGMT_getStringListOSystemModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getString__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGMT_getStringODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getString__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGMT_getStringOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getString__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGMT_getStringORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getString__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGMT_getStringOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getString__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGMT_getStringOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getSystemPort__from__int(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGMT_getSystemPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_getWidth(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue) {
    return euEGMT_getWidth(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_interruptScript__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *scriptId) {
    return euEGMT_interruptScriptFccp(egrabberBox, scriptId);
}
static inline int Eur_EGrabber_CallbackMultiThread_invalidate__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature) {
    return euEGMT_invalidateODeviceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackMultiThread_invalidate__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature) {
    return euEGMT_invalidateOInterfaceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackMultiThread_invalidate__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature) {
    return euEGMT_invalidateORemoteModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackMultiThread_invalidate__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature) {
    return euEGMT_invalidateOStreamModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackMultiThread_invalidate__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature) {
    return euEGMT_invalidateOSystemModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackMultiThread_isOpen__on__DeviceModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_isOpenODeviceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_isOpen__on__InterfaceModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_isOpenOInterfaceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_isOpen__on__RemoteModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_isOpenORemoteModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_isOpen__on__StreamModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_isOpenOStreamModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_isOpen__on__SystemModule(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_isOpenOSystemModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_mementoWaveDown__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGMT_mementoWaveDownFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackMultiThread_mementoWaveNoValue__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGMT_mementoWaveNoValueFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackMultiThread_mementoWaveReset__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGMT_mementoWaveResetFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackMultiThread_mementoWaveUp__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGMT_mementoWaveUpFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackMultiThread_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value) {
    return euEGMT_mementoWaveValueFucucu64(egrabberBox, kind, id, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_memento__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *text) {
    return euEGMT_mementoFccp(egrabberBox, text);
}
static inline int Eur_EGrabber_CallbackMultiThread_memento__from__unsigned_char__unsigned_char__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text) {
    return euEGMT_mementoFucucccp(egrabberBox, verbosity, kind, text);
}
static inline int Eur_EGrabber_CallbackMultiThread_onCicEvent__from__Eur_CicData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CicData ref_data) {
    return euEGMT_onCicEventFEur_CicData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onCxpDeviceEvent__from__Eur_CxpDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpDeviceData ref_data) {
    return euEGMT_onCxpDeviceEventFEur_CxpDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onCxpInterfaceEvent__from__Eur_CxpInterfaceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpInterfaceData ref_data) {
    return euEGMT_onCxpInterfaceEventFEur_CxpInterfaceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onDataStreamEvent__from__Eur_DataStreamData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DataStreamData ref_data) {
    return euEGMT_onDataStreamEventFEur_DataStreamData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onDeviceErrorEvent__from__Eur_DeviceErrorData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DeviceErrorData ref_data) {
    return euEGMT_onDeviceErrorEventFEur_DeviceErrorData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onIoToolboxEvent__from__Eur_IoToolboxData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_IoToolboxData ref_data) {
    return euEGMT_onIoToolboxEventFEur_IoToolboxData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onNewBufferEvent__from__Eur_NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_data) {
    return euEGMT_onNewBufferEventFEur_NewBufferData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onRemoteDeviceEvent__from__Eur_RemoteDeviceData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_RemoteDeviceData ref_data) {
    return euEGMT_onRemoteDeviceEventFEur_RemoteDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackMultiThread_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue) {
    return euEGMT_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(egrabberBox, operation, context, ref_args, ref_value, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_push__from__Eur_NewBufferData(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_buffer) {
    return euEGMT_pushFEur_NewBufferData(egrabberBox, ref_buffer);
}
static inline int Eur_EGrabber_CallbackMultiThread_queue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGMT_queueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackMultiThread_reallocBuffers__from__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue) {
    return euEGMT_reallocBuffersFs(egrabberBox, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_reallocBuffers__from__size_t__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue) {
    return euEGMT_reallocBuffersFss(egrabberBox, bufferCount, bufferSize, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_resetBufferQueue(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_resetBufferQueue(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_resetBufferQueue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGMT_resetBufferQueueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackMultiThread_revoke__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGMT_revokeFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackMultiThread_runScript__from__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script) {
    return euEGMT_runScriptFccp(egrabberBox, script);
}
static inline int Eur_EGrabber_CallbackMultiThread_runScript__from__const_char_p__void_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script, void *context /* def=0 */) {
    return euEGMT_runScriptFccpvp(egrabberBox, script, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setCicEventCallback__from__Euresys_CicEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CicEventCallback callback, void *context) {
    return euEGMT_setCicEventCallbackF_CECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context) {
    return euEGMT_setCxpDeviceEventCallbackF_CDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context) {
    return euEGMT_setCxpInterfaceEventCallbackF_CIECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DataStreamEventCallback callback, void *context) {
    return euEGMT_setDataStreamEventCallbackF_DSECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context) {
    return euEGMT_setDeviceErrorEventCallbackF_DEECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setFloat__on__DeviceModule__from__const_char_p__double(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value) {
    return euEGMT_setFloatODeviceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setFloat__on__InterfaceModule__from__const_char_p__double(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value) {
    return euEGMT_setFloatOInterfaceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setFloat__on__RemoteModule__from__const_char_p__double(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value) {
    return euEGMT_setFloatORemoteModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setFloat__on__StreamModule__from__const_char_p__double(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value) {
    return euEGMT_setFloatOStreamModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setFloat__on__SystemModule__from__const_char_p__double(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value) {
    return euEGMT_setFloatOSystemModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setInteger__on__DeviceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value) {
    return euEGMT_setIntegerODeviceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setInteger__on__InterfaceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value) {
    return euEGMT_setIntegerOInterfaceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setInteger__on__RemoteModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value) {
    return euEGMT_setIntegerORemoteModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setInteger__on__StreamModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value) {
    return euEGMT_setIntegerOStreamModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setInteger__on__SystemModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value) {
    return euEGMT_setIntegerOSystemModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_IoToolboxEventCallback callback, void *context) {
    return euEGMT_setIoToolboxEventCallbackF_ITECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_NewBufferEventCallback callback, void *context) {
    return euEGMT_setNewBufferEventCallbackF_NBECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGMT_setRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGMT_setRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGMT_setRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGMT_setRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGMT_setRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackMultiThread_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context) {
    return euEGMT_setRemoteDeviceEventCallbackF_RDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ScriptUiCallback callback, void *context) {
    return euEGMT_setScriptUiCallbackFScriptUiCallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setString__on__DeviceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value) {
    return euEGMT_setStringODeviceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setString__on__InterfaceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value) {
    return euEGMT_setStringOInterfaceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setString__on__RemoteModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value) {
    return euEGMT_setStringORemoteModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setString__on__StreamModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value) {
    return euEGMT_setStringOStreamModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setString__on__SystemModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value) {
    return euEGMT_setStringOSystemModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackMultiThread_setThreadStartCallback__from__Euresys_ThreadStartCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStartCallback callback, void *context) {
    return euEGMT_setThreadStartCallbackF_TStartCvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_setThreadStopCallback__from__Euresys_ThreadStopCallback__void_p(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStopCallback callback, void *context) {
    return euEGMT_setThreadStopCallbackF_TStopCvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackMultiThread_shouldReallocBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_shouldReallocBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_shouldReannounceBuffers(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue) {
    return euEGMT_shouldReannounceBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackMultiThread_shutdown(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_shutdown(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_start(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_start(egrabberBox);
}
static inline int Eur_EGrabber_CallbackMultiThread_start__from__uint64_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */) {
    return euEGMT_startFu64(egrabberBox, frameCount);
}
static inline int Eur_EGrabber_CallbackMultiThread_start__from__uint64_t__bool8_t(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */) {
    return euEGMT_startFu64b8(egrabberBox, frameCount, controlRemoteDevice);
}
static inline int Eur_EGrabber_CallbackMultiThread_stop(Eur_EGrabber_CallbackMultiThread egrabberBox) {
    return euEGMT_stop(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_BusMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_BusMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_GenTLMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_GenTLMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_GenTLMemory__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_GenTLMemorys(egrabberBox, ref_memory, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_NvidiaRdmaMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_NvidiaRdmaMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemory(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_UserMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemoryArray(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_UserMemoryArray(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceAndQueue__from__Eur_UserMemoryArray__bool8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_announceAndQueueFEur_UserMemoryArrayb8(egrabberBox, ref_memory, reverse, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceBusBuffer__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue) {
    return euEGCOD_announceBusBufferFu64s(egrabberBox, busAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceBusBuffer__from__uint64_t__size_t__void_p(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGCOD_announceBusBufferFu64svp(egrabberBox, busAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceNvidiaRdmaBuffer__from__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, size_t *returnValue) {
    return euEGCOD_announceNvidiaRdmaBufferFvps(egrabberBox, deviceAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGCOD_announceNvidiaRdmaBufferFvpsvp(egrabberBox, deviceAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGCOD_attachEventODeviceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGCOD_attachEventOInterfaceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGCOD_attachEventORemoteModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGCOD_attachEventOStreamModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGCOD_attachEventOSystemModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEventFilter__from__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter) {
    return euEGCOD_cancelEventFilterFs(egrabberBox, eventFilter);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__Any(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWAny(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_cancelPop(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_cancelPop(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTL(ref_gentl, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackOnDemand *egrabber) {
    return euEGCOD_createFEur_EGenTLTHIHDHDH(ref_gentl, tlh, ifh, devh, dsh, egrabber);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTLi(ref_gentl, interfaceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTLii(ref_gentl, interfaceIndex, deviceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTLiii(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTLiiiDAF(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEur_EGenTLiiiDAFb8(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEurEGCameraInfo(ref_camera, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEurEGCameraInfoDAF(ref_camera, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEurEGInfo(ref_grabber, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEurEGInfoDAF(ref_grabber, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox) {
    return euEGCOD_createFEurEGInfoDAFb8(ref_grabber, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_destroy(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_destroy(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__All(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_disableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_disableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__All(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_enableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_enableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_execute__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command) {
    return euEGCOD_executeODeviceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackOnDemand_execute__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command) {
    return euEGCOD_executeOInterfaceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackOnDemand_execute__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command) {
    return euEGCOD_executeORemoteModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackOnDemand_execute__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command) {
    return euEGCOD_executeOStreamModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackOnDemand_execute__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command) {
    return euEGCOD_executeOSystemModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushBuffers(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushBuffers__from__ACQ_QUEUE_TYPE(Eur_EGrabber_CallbackOnDemand egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */) {
    return euEGCOD_flushBuffersFAQT(egrabberBox, operation);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__All(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_flushEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_flushEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGCOD_gcReadPortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGCOD_gcReadPortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGCOD_gcReadPortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGCOD_gcReadPortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGCOD_gcReadPortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGCOD_gcReadPortStringODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGCOD_gcReadPortStringOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGCOD_gcReadPortStringORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGCOD_gcReadPortStringOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortString__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGCOD_gcReadPortStringOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_gcReadPortValueA_CINFOODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_gcReadPortValueA_CINFOOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_gcReadPortValueA_CINFOORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_gcReadPortValueA_CINFOOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_gcReadPortValueA_CINFOOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGCOD_gcReadPortValueAb8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGCOD_gcReadPortValueAb8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGCOD_gcReadPortValueAb8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGCOD_gcReadPortValueAb8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGCOD_gcReadPortValueAb8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue) {
    return euEGCOD_gcReadPortValueAcptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue) {
    return euEGCOD_gcReadPortValueAcptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue) {
    return euEGCOD_gcReadPortValueAcptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue) {
    return euEGCOD_gcReadPortValueAcptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue) {
    return euEGCOD_gcReadPortValueAcptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue) {
    return euEGCOD_gcReadPortValueAdODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue) {
    return euEGCOD_gcReadPortValueAdOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue) {
    return euEGCOD_gcReadPortValueAdORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue) {
    return euEGCOD_gcReadPortValueAdOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__double__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue) {
    return euEGCOD_gcReadPortValueAdOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue) {
    return euEGCOD_gcReadPortValueAfODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue) {
    return euEGCOD_gcReadPortValueAfOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue) {
    return euEGCOD_gcReadPortValueAfORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue) {
    return euEGCOD_gcReadPortValueAfOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__float__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue) {
    return euEGCOD_gcReadPortValueAfOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGCOD_gcReadPortValueAi16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGCOD_gcReadPortValueAi16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGCOD_gcReadPortValueAi16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGCOD_gcReadPortValueAi16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGCOD_gcReadPortValueAi16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGCOD_gcReadPortValueAi32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGCOD_gcReadPortValueAi32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGCOD_gcReadPortValueAi32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGCOD_gcReadPortValueAi32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGCOD_gcReadPortValueAi32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGCOD_gcReadPortValueAi64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGCOD_gcReadPortValueAi64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGCOD_gcReadPortValueAi64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGCOD_gcReadPortValueAi64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGCOD_gcReadPortValueAi64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGCOD_gcReadPortValueAi8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGCOD_gcReadPortValueAi8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGCOD_gcReadPortValueAi8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGCOD_gcReadPortValueAi8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGCOD_gcReadPortValueAi8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGCOD_gcReadPortValueAsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGCOD_gcReadPortValueAsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGCOD_gcReadPortValueAsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGCOD_gcReadPortValueAsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGCOD_gcReadPortValueAsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGCOD_gcReadPortValueASsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGCOD_gcReadPortValueASsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGCOD_gcReadPortValueASsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGCOD_gcReadPortValueASsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGCOD_gcReadPortValueASsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortValueASvcODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortValueASvcOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortValueASvcORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortValueASvcOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortValueASvcOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGCOD_gcReadPortValueASv_std_stringODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGCOD_gcReadPortValueASv_std_stringOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGCOD_gcReadPortValueASv_std_stringORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGCOD_gcReadPortValueASv_std_stringOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGCOD_gcReadPortValueASv_std_stringOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGCOD_gcReadPortValueAu16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGCOD_gcReadPortValueAu16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGCOD_gcReadPortValueAu16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGCOD_gcReadPortValueAu16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGCOD_gcReadPortValueAu16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGCOD_gcReadPortValueAu32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGCOD_gcReadPortValueAu32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGCOD_gcReadPortValueAu32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGCOD_gcReadPortValueAu32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGCOD_gcReadPortValueAu32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGCOD_gcReadPortValueAu64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGCOD_gcReadPortValueAu64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGCOD_gcReadPortValueAu64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGCOD_gcReadPortValueAu64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGCOD_gcReadPortValueAu64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGCOD_gcReadPortValueAu8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGCOD_gcReadPortValueAu8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGCOD_gcReadPortValueAu8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGCOD_gcReadPortValueAu8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGCOD_gcReadPortValueAu8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGCOD_gcReadPortValueAu8pODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGCOD_gcReadPortValueAu8pOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGCOD_gcReadPortValueAu8pORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGCOD_gcReadPortValueAu8pOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGCOD_gcReadPortValueAu8pOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue) {
    return euEGCOD_gcReadPortValueAvptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue) {
    return euEGCOD_gcReadPortValueAvptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue) {
    return euEGCOD_gcReadPortValueAvptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue) {
    return euEGCOD_gcReadPortValueAvptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue) {
    return euEGCOD_gcReadPortValueAvptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPort__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPort__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPort__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPort__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcReadPort__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGCOD_gcReadPortOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGCOD_gcWritePortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGCOD_gcWritePortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGCOD_gcWritePortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGCOD_gcWritePortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGCOD_gcWritePortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value) {
    return euEGCOD_gcWritePortValueWdODeviceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value) {
    return euEGCOD_gcWritePortValueWdOInterfaceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value) {
    return euEGCOD_gcWritePortValueWdORemoteModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value) {
    return euEGCOD_gcWritePortValueWdOStreamModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value) {
    return euEGCOD_gcWritePortValueWdOSystemModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value) {
    return euEGCOD_gcWritePortValueWfODeviceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value) {
    return euEGCOD_gcWritePortValueWfOInterfaceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value) {
    return euEGCOD_gcWritePortValueWfORemoteModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value) {
    return euEGCOD_gcWritePortValueWfOStreamModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value) {
    return euEGCOD_gcWritePortValueWfOSystemModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value) {
    return euEGCOD_gcWritePortValueWi16ODeviceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value) {
    return euEGCOD_gcWritePortValueWi16OInterfaceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value) {
    return euEGCOD_gcWritePortValueWi16ORemoteModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value) {
    return euEGCOD_gcWritePortValueWi16OStreamModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value) {
    return euEGCOD_gcWritePortValueWi16OSystemModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value) {
    return euEGCOD_gcWritePortValueWi32ODeviceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value) {
    return euEGCOD_gcWritePortValueWi32OInterfaceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value) {
    return euEGCOD_gcWritePortValueWi32ORemoteModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value) {
    return euEGCOD_gcWritePortValueWi32OStreamModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value) {
    return euEGCOD_gcWritePortValueWi32OSystemModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value) {
    return euEGCOD_gcWritePortValueWi64ODeviceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value) {
    return euEGCOD_gcWritePortValueWi64OInterfaceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value) {
    return euEGCOD_gcWritePortValueWi64ORemoteModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value) {
    return euEGCOD_gcWritePortValueWi64OStreamModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value) {
    return euEGCOD_gcWritePortValueWi64OSystemModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value) {
    return euEGCOD_gcWritePortValueWi8ODeviceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value) {
    return euEGCOD_gcWritePortValueWi8OInterfaceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value) {
    return euEGCOD_gcWritePortValueWi8ORemoteModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value) {
    return euEGCOD_gcWritePortValueWi8OStreamModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value) {
    return euEGCOD_gcWritePortValueWi8OSystemModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value) {
    return euEGCOD_gcWritePortValueWsODeviceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value) {
    return euEGCOD_gcWritePortValueWsOInterfaceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value) {
    return euEGCOD_gcWritePortValueWsORemoteModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value) {
    return euEGCOD_gcWritePortValueWsOStreamModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value) {
    return euEGCOD_gcWritePortValueWsOSystemModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value) {
    return euEGCOD_gcWritePortValueWu16ODeviceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value) {
    return euEGCOD_gcWritePortValueWu16OInterfaceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value) {
    return euEGCOD_gcWritePortValueWu16ORemoteModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value) {
    return euEGCOD_gcWritePortValueWu16OStreamModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value) {
    return euEGCOD_gcWritePortValueWu16OSystemModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value) {
    return euEGCOD_gcWritePortValueWu32ODeviceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value) {
    return euEGCOD_gcWritePortValueWu32OInterfaceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value) {
    return euEGCOD_gcWritePortValueWu32ORemoteModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value) {
    return euEGCOD_gcWritePortValueWu32OStreamModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value) {
    return euEGCOD_gcWritePortValueWu32OSystemModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value) {
    return euEGCOD_gcWritePortValueWu64ODeviceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value) {
    return euEGCOD_gcWritePortValueWu64OInterfaceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value) {
    return euEGCOD_gcWritePortValueWu64ORemoteModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value) {
    return euEGCOD_gcWritePortValueWu64OStreamModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value) {
    return euEGCOD_gcWritePortValueWu64OSystemModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value) {
    return euEGCOD_gcWritePortValueWu8ODeviceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value) {
    return euEGCOD_gcWritePortValueWu8OInterfaceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value) {
    return euEGCOD_gcWritePortValueWu8ORemoteModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value) {
    return euEGCOD_gcWritePortValueWu8OStreamModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value) {
    return euEGCOD_gcWritePortValueWu8OSystemModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGCOD_gcWritePortODeviceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGCOD_gcWritePortOInterfaceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGCOD_gcWritePortORemoteModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGCOD_gcWritePortOStreamModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGCOD_gcWritePortOSystemModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferData__from__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue) {
    return euEGCOD_getBufferDataFs(egrabberBox, bufferIndex, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_getBufferInfoA_CINFOFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGCOD_getBufferInfoAb8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euEGCOD_getBufferInfoAcptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euEGCOD_getBufferInfoAdFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euEGCOD_getBufferInfoAfFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euEGCOD_getBufferInfoAi16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euEGCOD_getBufferInfoAi32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euEGCOD_getBufferInfoAi64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euEGCOD_getBufferInfoAi8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euEGCOD_getBufferInfoAsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euEGCOD_getBufferInfoASsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGCOD_getBufferInfoASvcFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGCOD_getBufferInfoASv_std_stringFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGCOD_getBufferInfoAu16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGCOD_getBufferInfoAu32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGCOD_getBufferInfoAu64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGCOD_getBufferInfoAu8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGCOD_getBufferInfoAu8pFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euEGCOD_getBufferInfoAvptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getDevicePort__from__int(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGCOD_getDevicePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getFloat__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue) {
    return euEGCOD_getFloatODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getFloat__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue) {
    return euEGCOD_getFloatOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getFloat__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue) {
    return euEGCOD_getFloatORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getFloat__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue) {
    return euEGCOD_getFloatOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getFloat__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue) {
    return euEGCOD_getFloatOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getHeight(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getHeight(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_getInfoA_CINFOODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_getInfoA_CINFOOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_getInfoA_CINFOOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGCOD_getInfoA_CINFOOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGCOD_getInfoAb8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGCOD_getInfoAb8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGCOD_getInfoAb8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__bool8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGCOD_getInfoAb8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGCOD_getInfoAcptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGCOD_getInfoAcptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGCOD_getInfoAcptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__char_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGCOD_getInfoAcptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue) {
    return euEGCOD_getInfoAdODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue) {
    return euEGCOD_getInfoAdOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue) {
    return euEGCOD_getInfoAdOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__double__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue) {
    return euEGCOD_getInfoAdOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue) {
    return euEGCOD_getInfoAfODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue) {
    return euEGCOD_getInfoAfOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue) {
    return euEGCOD_getInfoAfOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__float__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue) {
    return euEGCOD_getInfoAfOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGCOD_getInfoAi16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGCOD_getInfoAi16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGCOD_getInfoAi16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGCOD_getInfoAi16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGCOD_getInfoAi32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGCOD_getInfoAi32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGCOD_getInfoAi32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGCOD_getInfoAi32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGCOD_getInfoAi64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGCOD_getInfoAi64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGCOD_getInfoAi64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGCOD_getInfoAi64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGCOD_getInfoAi8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGCOD_getInfoAi8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGCOD_getInfoAi8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__int8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGCOD_getInfoAi8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGCOD_getInfoAsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGCOD_getInfoAsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGCOD_getInfoAsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__size_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGCOD_getInfoAsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGCOD_getInfoASsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGCOD_getInfoASsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGCOD_getInfoASsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGCOD_getInfoASsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGCOD_getInfoASvcODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGCOD_getInfoASvcOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGCOD_getInfoASvcOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_char__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGCOD_getInfoASvcOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGCOD_getInfoASv_std_stringODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGCOD_getInfoASv_std_stringOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGCOD_getInfoASv_std_stringOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGCOD_getInfoASv_std_stringOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGCOD_getInfoAu16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGCOD_getInfoAu16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGCOD_getInfoAu16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGCOD_getInfoAu16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGCOD_getInfoAu32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGCOD_getInfoAu32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGCOD_getInfoAu32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGCOD_getInfoAu32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGCOD_getInfoAu64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGCOD_getInfoAu64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGCOD_getInfoAu64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGCOD_getInfoAu64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGCOD_getInfoAu8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGCOD_getInfoAu8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGCOD_getInfoAu8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGCOD_getInfoAu8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGCOD_getInfoAu8pODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGCOD_getInfoAu8pOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGCOD_getInfoAu8pOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGCOD_getInfoAu8pOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGCOD_getInfoAvptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGCOD_getInfoAvptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGCOD_getInfoAvptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInfo__as__void_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGCOD_getInfoAvptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInteger__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGCOD_getIntegerODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInteger__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGCOD_getIntegerOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInteger__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGCOD_getIntegerORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInteger__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGCOD_getIntegerOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInteger__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGCOD_getIntegerOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getInterfacePort__from__int(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGCOD_getInterfacePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getLastEventGrabberIndex(Eur_EGrabber_CallbackOnDemand egrabberBox, int *returnValue) {
    return euEGCOD_getLastEventGrabberIndex(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPayloadSize(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPayloadSize(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCountFilter__from__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue) {
    return euEGCOD_getPendingEventCountFilterFs(egrabberBox, eventFilter, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__Any(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWAny(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWCicData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWCxpDeviceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWCxpInterfaceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWDataStreamData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWDeviceErrorData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWIoToolboxData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWNewBufferData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPendingEventCount__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getPendingEventCountWRemoteDeviceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getPixelFormat(Eur_EGrabber_CallbackOnDemand egrabberBox, std_string *returnValue) {
    return euEGCOD_getPixelFormat(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size) {
    return euEGCOD_getRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size) {
    return euEGCOD_getRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size) {
    return euEGCOD_getRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size) {
    return euEGCOD_getRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size) {
    return euEGCOD_getRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_getRemotePort__from__int(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGCOD_getRemotePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStreamPort__from__int(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGCOD_getStreamPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringData__on__DeviceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGCOD_getStringDataODeviceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGCOD_getStringDataOInterfaceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringData__on__RemoteModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGCOD_getStringDataORemoteModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringData__on__StreamModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGCOD_getStringDataOStreamModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringData__on__SystemModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGCOD_getStringDataOSystemModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringList__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGCOD_getStringListODeviceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringList__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGCOD_getStringListOInterfaceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringList__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGCOD_getStringListORemoteModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringList__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGCOD_getStringListOStreamModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getStringList__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGCOD_getStringListOSystemModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getString__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue) {
    return euEGCOD_getStringODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getString__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue) {
    return euEGCOD_getStringOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getString__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue) {
    return euEGCOD_getStringORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getString__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue) {
    return euEGCOD_getStringOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getString__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue) {
    return euEGCOD_getStringOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getSystemPort__from__int(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGCOD_getSystemPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_getWidth(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_getWidth(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_interruptScript__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *scriptId) {
    return euEGCOD_interruptScriptFccp(egrabberBox, scriptId);
}
static inline int Eur_EGrabber_CallbackOnDemand_invalidate__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature) {
    return euEGCOD_invalidateODeviceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackOnDemand_invalidate__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature) {
    return euEGCOD_invalidateOInterfaceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackOnDemand_invalidate__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature) {
    return euEGCOD_invalidateORemoteModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackOnDemand_invalidate__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature) {
    return euEGCOD_invalidateOStreamModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackOnDemand_invalidate__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature) {
    return euEGCOD_invalidateOSystemModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackOnDemand_isOpen__on__DeviceModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_isOpenODeviceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_isOpen__on__InterfaceModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_isOpenOInterfaceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_isOpen__on__RemoteModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_isOpenORemoteModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_isOpen__on__StreamModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_isOpenOStreamModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_isOpen__on__SystemModule(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_isOpenOSystemModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_mementoWaveDown__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id) {
    return euEGCOD_mementoWaveDownFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackOnDemand_mementoWaveNoValue__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id) {
    return euEGCOD_mementoWaveNoValueFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackOnDemand_mementoWaveReset__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id) {
    return euEGCOD_mementoWaveResetFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackOnDemand_mementoWaveUp__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id) {
    return euEGCOD_mementoWaveUpFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackOnDemand_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id, uint64_t value) {
    return euEGCOD_mementoWaveValueFucucu64(egrabberBox, kind, id, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_memento__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *text) {
    return euEGCOD_mementoFccp(egrabberBox, text);
}
static inline int Eur_EGrabber_CallbackOnDemand_memento__from__unsigned_char__unsigned_char__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char verbosity, unsigned char kind, const char *text) {
    return euEGCOD_mementoFucucccp(egrabberBox, verbosity, kind, text);
}
static inline int Eur_EGrabber_CallbackOnDemand_onCicEvent__from__Eur_CicData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CicData ref_data) {
    return euEGCOD_onCicEventFEur_CicData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onCxpDeviceEvent__from__Eur_CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpDeviceData ref_data) {
    return euEGCOD_onCxpDeviceEventFEur_CxpDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onCxpInterfaceEvent__from__Eur_CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpInterfaceData ref_data) {
    return euEGCOD_onCxpInterfaceEventFEur_CxpInterfaceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onDataStreamEvent__from__Eur_DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DataStreamData ref_data) {
    return euEGCOD_onDataStreamEventFEur_DataStreamData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onDeviceErrorEvent__from__Eur_DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DeviceErrorData ref_data) {
    return euEGCOD_onDeviceErrorEventFEur_DeviceErrorData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onIoToolboxEvent__from__Eur_IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_IoToolboxData ref_data) {
    return euEGCOD_onIoToolboxEventFEur_IoToolboxData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onNewBufferEvent__from__Eur_NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_data) {
    return euEGCOD_onNewBufferEventFEur_NewBufferData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onRemoteDeviceEvent__from__Eur_RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_RemoteDeviceData ref_data) {
    return euEGCOD_onRemoteDeviceEventFEur_RemoteDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackOnDemand_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue) {
    return euEGCOD_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(egrabberBox, operation, context, ref_args, ref_value, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_pop(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData *returnValue) {
    return euEGCOD_pop(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_popEventFilter__from__size_t__uint64_t__Eur_OneOfAll__int_p(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, Eur_OneOfAll ref_oneOf, int *position, size_t *returnValue) {
    return euEGCOD_popEventFilterFsu64EurOOAi_p(egrabberBox, eventFilter, timeout, ref_oneOf, position, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_pop__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout /* def=GENTL_INFINITE */, Eur_NewBufferData *returnValue) {
    return euEGCOD_popFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEventFilter__from__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue) {
    return euEGCOD_processEventFilterFs(egrabberBox, eventFilter, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEventFilter__from__size_t__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventFilterFsu64(egrabberBox, eventFilter, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__Any(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWAny(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__Any__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWAnyFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CicData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWCicData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CicData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWCicDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWCxpDeviceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpDeviceData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWCxpDeviceDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWCxpInterfaceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__CxpInterfaceData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWCxpInterfaceDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__DataStreamData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWDataStreamData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__DataStreamData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWDataStreamDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__DeviceErrorData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWDeviceErrorData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__DeviceErrorData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWDeviceErrorDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__IoToolboxData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWIoToolboxData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__IoToolboxData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWIoToolboxDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWNewBufferData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__NewBufferData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWNewBufferDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue) {
    return euEGCOD_processEventWRemoteDeviceData(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_processEvent__with__RemoteDeviceData__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue) {
    return euEGCOD_processEventWRemoteDeviceDataFu64(egrabberBox, timeout, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_push__from__Eur_NewBufferData(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_buffer) {
    return euEGCOD_pushFEur_NewBufferData(egrabberBox, ref_buffer);
}
static inline int Eur_EGrabber_CallbackOnDemand_queue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGCOD_queueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackOnDemand_reallocBuffers__from__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_reallocBuffersFs(egrabberBox, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_reallocBuffers__from__size_t__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue) {
    return euEGCOD_reallocBuffersFss(egrabberBox, bufferCount, bufferSize, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_resetBufferQueue(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_resetBufferQueue(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_resetBufferQueue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGCOD_resetBufferQueueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackOnDemand_revoke__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGCOD_revokeFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackOnDemand_runScript__from__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script) {
    return euEGCOD_runScriptFccp(egrabberBox, script);
}
static inline int Eur_EGrabber_CallbackOnDemand_runScript__from__const_char_p__void_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script, void *context /* def=0 */) {
    return euEGCOD_runScriptFccpvp(egrabberBox, script, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setCicEventCallback__from__Euresys_CicEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CicEventCallback callback, void *context) {
    return euEGCOD_setCicEventCallbackF_CECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpDeviceEventCallback callback, void *context) {
    return euEGCOD_setCxpDeviceEventCallbackF_CDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpInterfaceEventCallback callback, void *context) {
    return euEGCOD_setCxpInterfaceEventCallbackF_CIECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DataStreamEventCallback callback, void *context) {
    return euEGCOD_setDataStreamEventCallbackF_DSECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DeviceErrorEventCallback callback, void *context) {
    return euEGCOD_setDeviceErrorEventCallbackF_DEECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setFloat__on__DeviceModule__from__const_char_p__double(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value) {
    return euEGCOD_setFloatODeviceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setFloat__on__InterfaceModule__from__const_char_p__double(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value) {
    return euEGCOD_setFloatOInterfaceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setFloat__on__RemoteModule__from__const_char_p__double(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value) {
    return euEGCOD_setFloatORemoteModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setFloat__on__StreamModule__from__const_char_p__double(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value) {
    return euEGCOD_setFloatOStreamModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setFloat__on__SystemModule__from__const_char_p__double(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value) {
    return euEGCOD_setFloatOSystemModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setInteger__on__DeviceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value) {
    return euEGCOD_setIntegerODeviceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setInteger__on__InterfaceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value) {
    return euEGCOD_setIntegerOInterfaceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setInteger__on__RemoteModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value) {
    return euEGCOD_setIntegerORemoteModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setInteger__on__StreamModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value) {
    return euEGCOD_setIntegerOStreamModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setInteger__on__SystemModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value) {
    return euEGCOD_setIntegerOSystemModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_IoToolboxEventCallback callback, void *context) {
    return euEGCOD_setIoToolboxEventCallbackF_ITECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_NewBufferEventCallback callback, void *context) {
    return euEGCOD_setNewBufferEventCallbackF_NBECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGCOD_setRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGCOD_setRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGCOD_setRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGCOD_setRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGCOD_setRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackOnDemand_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_RemoteDeviceEventCallback callback, void *context) {
    return euEGCOD_setRemoteDeviceEventCallbackF_RDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_ScriptUiCallback callback, void *context) {
    return euEGCOD_setScriptUiCallbackFScriptUiCallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackOnDemand_setString__on__DeviceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value) {
    return euEGCOD_setStringODeviceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setString__on__InterfaceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value) {
    return euEGCOD_setStringOInterfaceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setString__on__RemoteModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value) {
    return euEGCOD_setStringORemoteModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setString__on__StreamModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value) {
    return euEGCOD_setStringOStreamModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_setString__on__SystemModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value) {
    return euEGCOD_setStringOSystemModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackOnDemand_shouldReallocBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_shouldReallocBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_shouldReannounceBuffers(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue) {
    return euEGCOD_shouldReannounceBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackOnDemand_shutdown(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_shutdown(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_start(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_start(egrabberBox);
}
static inline int Eur_EGrabber_CallbackOnDemand_start__from__uint64_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */) {
    return euEGCOD_startFu64(egrabberBox, frameCount);
}
static inline int Eur_EGrabber_CallbackOnDemand_start__from__uint64_t__bool8_t(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */) {
    return euEGCOD_startFu64b8(egrabberBox, frameCount, controlRemoteDevice);
}
static inline int Eur_EGrabber_CallbackOnDemand_stop(Eur_EGrabber_CallbackOnDemand egrabberBox) {
    return euEGCOD_stop(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_BusMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_BusMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_GenTLMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_GenTLMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_GenTLMemory__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_GenTLMemorys(egrabberBox, ref_memory, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_NvidiaRdmaMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_NvidiaRdmaMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemory(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_UserMemory(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemoryArray(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_UserMemoryArray(egrabberBox, ref_memory, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceAndQueue__from__Eur_UserMemoryArray__bool8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue) {
    return euEGST_announceAndQueueFEur_UserMemoryArrayb8(egrabberBox, ref_memory, reverse, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceBusBuffer__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue) {
    return euEGST_announceBusBufferFu64s(egrabberBox, busAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceBusBuffer__from__uint64_t__size_t__void_p(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGST_announceBusBufferFu64svp(egrabberBox, busAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceNvidiaRdmaBuffer__from__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue) {
    return euEGST_announceNvidiaRdmaBufferFvps(egrabberBox, deviceAddress, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_announceNvidiaRdmaBuffer__from__void_p__size_t__void_p(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue) {
    return euEGST_announceNvidiaRdmaBufferFvpsvp(egrabberBox, deviceAddress, size, userPointer, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_attachEvent__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGST_attachEventODeviceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_attachEvent__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGST_attachEventOInterfaceModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_attachEvent__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGST_attachEventORemoteModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_attachEvent__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGST_attachEventOStreamModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_attachEvent__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size) {
    return euEGST_attachEventOSystemModuleFu64vps(egrabberBox, eventId, buffer, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTL(ref_gentl, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__TL_HANDLE__IF_HANDLE__DEV_HANDLE__DS_HANDLE(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackSingleThread *egrabber) {
    return euEGST_createFEur_EGenTLTHIHDHDH(ref_gentl, tlh, ifh, devh, dsh, egrabber);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTLi(ref_gentl, interfaceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTLii(ref_gentl, interfaceIndex, deviceIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTLiii(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTLiiiDAF(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGenTL__int__int__int__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEur_EGenTLiiiDAFb8(ref_gentl, interfaceIndex, deviceIndex, dataStreamIndex, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberCameraInfo(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEurEGCameraInfo(ref_camera, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberCameraInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEurEGCameraInfoDAF(ref_camera, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEurEGInfo(ref_grabber, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEurEGInfoDAF(ref_grabber, deviceOpenFlags, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_create__from__Eur_EGrabberInfo__DEVICE_ACCESS_FLAGS__bool8_t(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox) {
    return euEGST_createFEurEGInfoDAFb8(ref_grabber, deviceOpenFlags, remoteRequired, egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_destroy(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_destroy(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__All(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__CicData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__DataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__IoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_disableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_disableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__All(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__CicData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__CxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__DataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__DeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__IoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_enableEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_enableEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_execute__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command) {
    return euEGST_executeODeviceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackSingleThread_execute__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command) {
    return euEGST_executeOInterfaceModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackSingleThread_execute__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command) {
    return euEGST_executeORemoteModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackSingleThread_execute__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command) {
    return euEGST_executeOStreamModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackSingleThread_execute__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command) {
    return euEGST_executeOSystemModuleFccp(egrabberBox, command);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushBuffers(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushBuffers__from__ACQ_QUEUE_TYPE(Eur_EGrabber_CallbackSingleThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */) {
    return euEGST_flushBuffersFAQT(egrabberBox, operation);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__All(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWAll(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__CicData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWCicData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__CxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWCxpDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__CxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWCxpInterfaceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__DataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWDataStreamData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__DeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWDeviceErrorData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__IoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWIoToolboxData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWNewBufferData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_flushEvent__with__RemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_flushEventWRemoteDeviceData(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGST_gcReadPortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGST_gcReadPortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGST_gcReadPortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGST_gcReadPortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size) {
    return euEGST_gcReadPortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGST_gcReadPortStringODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGST_gcReadPortStringOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGST_gcReadPortStringORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGST_gcReadPortStringOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortString__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue) {
    return euEGST_gcReadPortStringOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGST_gcReadPortValueA_CINFOODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGST_gcReadPortValueA_CINFOOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGST_gcReadPortValueA_CINFOORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGST_gcReadPortValueA_CINFOOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__InfoCommandInfo__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue) {
    return euEGST_gcReadPortValueA_CINFOOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGST_gcReadPortValueAb8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGST_gcReadPortValueAb8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGST_gcReadPortValueAb8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGST_gcReadPortValueAb8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__bool8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue) {
    return euEGST_gcReadPortValueAb8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGST_gcReadPortValueAcptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGST_gcReadPortValueAcptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGST_gcReadPortValueAcptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGST_gcReadPortValueAcptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__char_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue) {
    return euEGST_gcReadPortValueAcptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGST_gcReadPortValueAdODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGST_gcReadPortValueAdOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGST_gcReadPortValueAdORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGST_gcReadPortValueAdOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__double__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue) {
    return euEGST_gcReadPortValueAdOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGST_gcReadPortValueAfODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGST_gcReadPortValueAfOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGST_gcReadPortValueAfORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGST_gcReadPortValueAfOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__float__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue) {
    return euEGST_gcReadPortValueAfOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGST_gcReadPortValueAi16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGST_gcReadPortValueAi16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGST_gcReadPortValueAi16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGST_gcReadPortValueAi16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue) {
    return euEGST_gcReadPortValueAi16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGST_gcReadPortValueAi32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGST_gcReadPortValueAi32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGST_gcReadPortValueAi32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGST_gcReadPortValueAi32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue) {
    return euEGST_gcReadPortValueAi32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGST_gcReadPortValueAi64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGST_gcReadPortValueAi64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGST_gcReadPortValueAi64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGST_gcReadPortValueAi64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue) {
    return euEGST_gcReadPortValueAi64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGST_gcReadPortValueAi8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGST_gcReadPortValueAi8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGST_gcReadPortValueAi8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGST_gcReadPortValueAi8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__int8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue) {
    return euEGST_gcReadPortValueAi8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGST_gcReadPortValueAsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGST_gcReadPortValueAsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGST_gcReadPortValueAsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGST_gcReadPortValueAsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__size_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue) {
    return euEGST_gcReadPortValueAsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGST_gcReadPortValueASsODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGST_gcReadPortValueASsOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGST_gcReadPortValueASsORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGST_gcReadPortValueASsOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue) {
    return euEGST_gcReadPortValueASsOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGST_gcReadPortValueASvcODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGST_gcReadPortValueASvcOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGST_gcReadPortValueASvcORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGST_gcReadPortValueASvcOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_char__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue) {
    return euEGST_gcReadPortValueASvcOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGST_gcReadPortValueASv_std_stringODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGST_gcReadPortValueASv_std_stringOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGST_gcReadPortValueASv_std_stringORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGST_gcReadPortValueASv_std_stringOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__std_vector_std_string__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue) {
    return euEGST_gcReadPortValueASv_std_stringOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGST_gcReadPortValueAu16ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGST_gcReadPortValueAu16OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGST_gcReadPortValueAu16ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGST_gcReadPortValueAu16OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint16_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue) {
    return euEGST_gcReadPortValueAu16OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGST_gcReadPortValueAu32ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGST_gcReadPortValueAu32OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGST_gcReadPortValueAu32ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGST_gcReadPortValueAu32OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint32_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue) {
    return euEGST_gcReadPortValueAu32OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGST_gcReadPortValueAu64ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGST_gcReadPortValueAu64OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGST_gcReadPortValueAu64ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGST_gcReadPortValueAu64OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint64_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue) {
    return euEGST_gcReadPortValueAu64OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGST_gcReadPortValueAu8ODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGST_gcReadPortValueAu8OInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGST_gcReadPortValueAu8ORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGST_gcReadPortValueAu8OStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue) {
    return euEGST_gcReadPortValueAu8OSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGST_gcReadPortValueAu8pODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGST_gcReadPortValueAu8pOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGST_gcReadPortValueAu8pORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGST_gcReadPortValueAu8pOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__uint8_t_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue) {
    return euEGST_gcReadPortValueAu8pOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__DeviceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGST_gcReadPortValueAvptrODeviceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__InterfaceModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGST_gcReadPortValueAvptrOInterfaceModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__RemoteModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGST_gcReadPortValueAvptrORemoteModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__StreamModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGST_gcReadPortValueAvptrOStreamModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPortValue__as__void_ptr__on__SystemModule__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue) {
    return euEGST_gcReadPortValueAvptrOSystemModuleFu64(egrabberBox, address, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPort__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGST_gcReadPortODeviceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPort__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGST_gcReadPortOInterfaceModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPort__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGST_gcReadPortORemoteModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPort__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGST_gcReadPortOStreamModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcReadPort__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue) {
    return euEGST_gcReadPortOSystemModuleFu64s(egrabberBox, address, size, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__DeviceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGST_gcWritePortDataODeviceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__InterfaceModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGST_gcWritePortDataOInterfaceModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__RemoteModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGST_gcWritePortDataORemoteModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__StreamModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGST_gcWritePortDataOStreamModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortData__on__SystemModule__from__uint64_t__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size) {
    return euEGST_gcWritePortDataOSystemModuleFu64vps(egrabberBox, address, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__DeviceModule__from__uint64_t__double(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value) {
    return euEGST_gcWritePortValueWdODeviceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__InterfaceModule__from__uint64_t__double(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value) {
    return euEGST_gcWritePortValueWdOInterfaceModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__RemoteModule__from__uint64_t__double(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value) {
    return euEGST_gcWritePortValueWdORemoteModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__StreamModule__from__uint64_t__double(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value) {
    return euEGST_gcWritePortValueWdOStreamModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__double__on__SystemModule__from__uint64_t__double(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value) {
    return euEGST_gcWritePortValueWdOSystemModuleFu64d(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__DeviceModule__from__uint64_t__float(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value) {
    return euEGST_gcWritePortValueWfODeviceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__InterfaceModule__from__uint64_t__float(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value) {
    return euEGST_gcWritePortValueWfOInterfaceModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__RemoteModule__from__uint64_t__float(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value) {
    return euEGST_gcWritePortValueWfORemoteModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__StreamModule__from__uint64_t__float(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value) {
    return euEGST_gcWritePortValueWfOStreamModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__float__on__SystemModule__from__uint64_t__float(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value) {
    return euEGST_gcWritePortValueWfOSystemModuleFu64f(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__DeviceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value) {
    return euEGST_gcWritePortValueWi16ODeviceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__InterfaceModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value) {
    return euEGST_gcWritePortValueWi16OInterfaceModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__RemoteModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value) {
    return euEGST_gcWritePortValueWi16ORemoteModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__StreamModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value) {
    return euEGST_gcWritePortValueWi16OStreamModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int16_t__on__SystemModule__from__uint64_t__int16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value) {
    return euEGST_gcWritePortValueWi16OSystemModuleFu64i16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__DeviceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value) {
    return euEGST_gcWritePortValueWi32ODeviceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__InterfaceModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value) {
    return euEGST_gcWritePortValueWi32OInterfaceModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__RemoteModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value) {
    return euEGST_gcWritePortValueWi32ORemoteModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__StreamModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value) {
    return euEGST_gcWritePortValueWi32OStreamModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int32_t__on__SystemModule__from__uint64_t__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value) {
    return euEGST_gcWritePortValueWi32OSystemModuleFu64i32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__DeviceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value) {
    return euEGST_gcWritePortValueWi64ODeviceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__InterfaceModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value) {
    return euEGST_gcWritePortValueWi64OInterfaceModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__RemoteModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value) {
    return euEGST_gcWritePortValueWi64ORemoteModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__StreamModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value) {
    return euEGST_gcWritePortValueWi64OStreamModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int64_t__on__SystemModule__from__uint64_t__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value) {
    return euEGST_gcWritePortValueWi64OSystemModuleFu64i64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__DeviceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value) {
    return euEGST_gcWritePortValueWi8ODeviceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__InterfaceModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value) {
    return euEGST_gcWritePortValueWi8OInterfaceModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__RemoteModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value) {
    return euEGST_gcWritePortValueWi8ORemoteModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__StreamModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value) {
    return euEGST_gcWritePortValueWi8OStreamModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__int8_t__on__SystemModule__from__uint64_t__int8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value) {
    return euEGST_gcWritePortValueWi8OSystemModuleFu64i8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__DeviceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value) {
    return euEGST_gcWritePortValueWsODeviceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__InterfaceModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value) {
    return euEGST_gcWritePortValueWsOInterfaceModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__RemoteModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value) {
    return euEGST_gcWritePortValueWsORemoteModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__StreamModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value) {
    return euEGST_gcWritePortValueWsOStreamModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__size_t__on__SystemModule__from__uint64_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value) {
    return euEGST_gcWritePortValueWsOSystemModuleFu64s(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__DeviceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGST_gcWritePortValueWu16ODeviceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__InterfaceModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGST_gcWritePortValueWu16OInterfaceModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__RemoteModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGST_gcWritePortValueWu16ORemoteModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__StreamModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGST_gcWritePortValueWu16OStreamModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint16_t__on__SystemModule__from__uint64_t__uint16_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value) {
    return euEGST_gcWritePortValueWu16OSystemModuleFu64u16(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__DeviceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGST_gcWritePortValueWu32ODeviceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__InterfaceModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGST_gcWritePortValueWu32OInterfaceModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__RemoteModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGST_gcWritePortValueWu32ORemoteModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__StreamModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGST_gcWritePortValueWu32OStreamModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint32_t__on__SystemModule__from__uint64_t__uint32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value) {
    return euEGST_gcWritePortValueWu32OSystemModuleFu64u32(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__DeviceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGST_gcWritePortValueWu64ODeviceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__InterfaceModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGST_gcWritePortValueWu64OInterfaceModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__RemoteModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGST_gcWritePortValueWu64ORemoteModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__StreamModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGST_gcWritePortValueWu64OStreamModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint64_t__on__SystemModule__from__uint64_t__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value) {
    return euEGST_gcWritePortValueWu64OSystemModuleFu64u64(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__DeviceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGST_gcWritePortValueWu8ODeviceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__InterfaceModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGST_gcWritePortValueWu8OInterfaceModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__RemoteModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGST_gcWritePortValueWu8ORemoteModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__StreamModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGST_gcWritePortValueWu8OStreamModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePortValue__with__uint8_t__on__SystemModule__from__uint64_t__uint8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value) {
    return euEGST_gcWritePortValueWu8OSystemModuleFu64u8(egrabberBox, address, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePort__on__DeviceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGST_gcWritePortODeviceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePort__on__InterfaceModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGST_gcWritePortOInterfaceModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePort__on__RemoteModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGST_gcWritePortORemoteModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePort__on__StreamModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGST_gcWritePortOStreamModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_gcWritePort__on__SystemModule__from__uint64_t__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data) {
    return euEGST_gcWritePortOSystemModuleFu64Svc(egrabberBox, address, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferData__from__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue) {
    return euEGST_getBufferDataFs(egrabberBox, bufferIndex, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__InfoCommandInfo__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGST_getBufferInfoA_CINFOFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__bool8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue) {
    return euEGST_getBufferInfoAb8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__char_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue) {
    return euEGST_getBufferInfoAcptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__double__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue) {
    return euEGST_getBufferInfoAdFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__float__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue) {
    return euEGST_getBufferInfoAfFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue) {
    return euEGST_getBufferInfoAi16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue) {
    return euEGST_getBufferInfoAi32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue) {
    return euEGST_getBufferInfoAi64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__int8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue) {
    return euEGST_getBufferInfoAi8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__size_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue) {
    return euEGST_getBufferInfoAsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue) {
    return euEGST_getBufferInfoASsFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_vector_char__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue) {
    return euEGST_getBufferInfoASvcFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__std_vector_std_string__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue) {
    return euEGST_getBufferInfoASv_std_stringFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint16_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue) {
    return euEGST_getBufferInfoAu16FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint32_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue) {
    return euEGST_getBufferInfoAu32FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint64_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue) {
    return euEGST_getBufferInfoAu64FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint8_t__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue) {
    return euEGST_getBufferInfoAu8FsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__uint8_t_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue) {
    return euEGST_getBufferInfoAu8pFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getBufferInfo__as__void_ptr__from__size_t__BUFFER_INFO_CMD(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue) {
    return euEGST_getBufferInfoAvptrFsBIC(egrabberBox, bufferIndex, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getDevicePort__from__int(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGST_getDevicePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getFloat__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue) {
    return euEGST_getFloatODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getFloat__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue) {
    return euEGST_getFloatOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getFloat__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue) {
    return euEGST_getFloatORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getFloat__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue) {
    return euEGST_getFloatOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getFloat__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue) {
    return euEGST_getFloatOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getHeight(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue) {
    return euEGST_getHeight(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGST_getInfoA_CINFOODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGST_getInfoA_CINFOOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGST_getInfoA_CINFOOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__InfoCommandInfo__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue) {
    return euEGST_getInfoA_CINFOOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGST_getInfoAb8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGST_getInfoAb8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGST_getInfoAb8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__bool8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue) {
    return euEGST_getInfoAb8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGST_getInfoAcptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGST_getInfoAcptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGST_getInfoAcptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__char_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue) {
    return euEGST_getInfoAcptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGST_getInfoAdODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGST_getInfoAdOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGST_getInfoAdOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__double__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue) {
    return euEGST_getInfoAdOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGST_getInfoAfODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGST_getInfoAfOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGST_getInfoAfOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__float__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue) {
    return euEGST_getInfoAfOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGST_getInfoAi16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGST_getInfoAi16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGST_getInfoAi16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue) {
    return euEGST_getInfoAi16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGST_getInfoAi32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGST_getInfoAi32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGST_getInfoAi32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue) {
    return euEGST_getInfoAi32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGST_getInfoAi64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGST_getInfoAi64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGST_getInfoAi64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue) {
    return euEGST_getInfoAi64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGST_getInfoAi8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGST_getInfoAi8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGST_getInfoAi8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__int8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue) {
    return euEGST_getInfoAi8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGST_getInfoAsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGST_getInfoAsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGST_getInfoAsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__size_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue) {
    return euEGST_getInfoAsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGST_getInfoASsODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGST_getInfoASsOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGST_getInfoASsOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue) {
    return euEGST_getInfoASsOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGST_getInfoASvcODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGST_getInfoASvcOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGST_getInfoASvcOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_char__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue) {
    return euEGST_getInfoASvcOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGST_getInfoASv_std_stringODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGST_getInfoASv_std_stringOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGST_getInfoASv_std_stringOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__std_vector_std_string__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue) {
    return euEGST_getInfoASv_std_stringOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGST_getInfoAu16ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGST_getInfoAu16OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGST_getInfoAu16OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint16_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue) {
    return euEGST_getInfoAu16OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGST_getInfoAu32ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGST_getInfoAu32OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGST_getInfoAu32OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint32_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue) {
    return euEGST_getInfoAu32OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGST_getInfoAu64ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGST_getInfoAu64OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGST_getInfoAu64OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint64_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue) {
    return euEGST_getInfoAu64OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGST_getInfoAu8ODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGST_getInfoAu8OInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGST_getInfoAu8OStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue) {
    return euEGST_getInfoAu8OSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGST_getInfoAu8pODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGST_getInfoAu8pOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGST_getInfoAu8pOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__uint8_t_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue) {
    return euEGST_getInfoAu8pOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__DeviceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGST_getInfoAvptrODeviceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__InterfaceModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGST_getInfoAvptrOInterfaceModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__StreamModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGST_getInfoAvptrOStreamModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInfo__as__void_ptr__on__SystemModule__from__int32_t(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue) {
    return euEGST_getInfoAvptrOSystemModuleFi32(egrabberBox, cmd, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInteger__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGST_getIntegerODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInteger__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGST_getIntegerOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInteger__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGST_getIntegerORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInteger__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGST_getIntegerOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInteger__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue) {
    return euEGST_getIntegerOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getInterfacePort__from__int(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGST_getInterfacePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getLastEventGrabberIndex(Eur_EGrabber_CallbackSingleThread egrabberBox, int *returnValue) {
    return euEGST_getLastEventGrabberIndex(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getPayloadSize(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue) {
    return euEGST_getPayloadSize(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getPixelFormat(Eur_EGrabber_CallbackSingleThread egrabberBox, std_string *returnValue) {
    return euEGST_getPixelFormat(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGST_getRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGST_getRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGST_getRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGST_getRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size) {
    return euEGST_getRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_getRemotePort__from__int(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGST_getRemotePortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStreamPort__from__int(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGST_getStreamPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringData__on__DeviceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGST_getStringDataODeviceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringData__on__InterfaceModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGST_getStringDataOInterfaceModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringData__on__RemoteModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGST_getStringDataORemoteModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringData__on__StreamModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGST_getStringDataOStreamModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringData__on__SystemModule__from__const_char_p__std_vector_char(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data) {
    return euEGST_getStringDataOSystemModuleFccpSvc(egrabberBox, feature, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringList__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGST_getStringListODeviceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringList__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGST_getStringListOInterfaceModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringList__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGST_getStringListORemoteModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringList__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGST_getStringListOStreamModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getStringList__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue) {
    return euEGST_getStringListOSystemModuleFccp(egrabberBox, what, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getString__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGST_getStringODeviceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getString__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGST_getStringOInterfaceModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getString__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGST_getStringORemoteModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getString__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGST_getStringOStreamModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getString__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue) {
    return euEGST_getStringOSystemModuleFccp(egrabberBox, feature, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getSystemPort__from__int(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue) {
    return euEGST_getSystemPortFi(egrabberBox, ix, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_getWidth(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue) {
    return euEGST_getWidth(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_interruptScript__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *scriptId) {
    return euEGST_interruptScriptFccp(egrabberBox, scriptId);
}
static inline int Eur_EGrabber_CallbackSingleThread_invalidate__on__DeviceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature) {
    return euEGST_invalidateODeviceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackSingleThread_invalidate__on__InterfaceModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature) {
    return euEGST_invalidateOInterfaceModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackSingleThread_invalidate__on__RemoteModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature) {
    return euEGST_invalidateORemoteModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackSingleThread_invalidate__on__StreamModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature) {
    return euEGST_invalidateOStreamModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackSingleThread_invalidate__on__SystemModule__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature) {
    return euEGST_invalidateOSystemModuleFccp(egrabberBox, feature);
}
static inline int Eur_EGrabber_CallbackSingleThread_isOpen__on__DeviceModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_isOpenODeviceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_isOpen__on__InterfaceModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_isOpenOInterfaceModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_isOpen__on__RemoteModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_isOpenORemoteModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_isOpen__on__StreamModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_isOpenOStreamModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_isOpen__on__SystemModule(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_isOpenOSystemModule(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_mementoWaveDown__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGST_mementoWaveDownFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackSingleThread_mementoWaveNoValue__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGST_mementoWaveNoValueFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackSingleThread_mementoWaveReset__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGST_mementoWaveResetFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackSingleThread_mementoWaveUp__from__unsigned_char__unsigned_char(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id) {
    return euEGST_mementoWaveUpFucuc(egrabberBox, kind, id);
}
static inline int Eur_EGrabber_CallbackSingleThread_mementoWaveValue__from__unsigned_char__unsigned_char__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value) {
    return euEGST_mementoWaveValueFucucu64(egrabberBox, kind, id, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_memento__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *text) {
    return euEGST_mementoFccp(egrabberBox, text);
}
static inline int Eur_EGrabber_CallbackSingleThread_memento__from__unsigned_char__unsigned_char__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text) {
    return euEGST_mementoFucucccp(egrabberBox, verbosity, kind, text);
}
static inline int Eur_EGrabber_CallbackSingleThread_onCicEvent__from__Eur_CicData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CicData ref_data) {
    return euEGST_onCicEventFEur_CicData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onCxpDeviceEvent__from__Eur_CxpDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpDeviceData ref_data) {
    return euEGST_onCxpDeviceEventFEur_CxpDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onCxpInterfaceEvent__from__Eur_CxpInterfaceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpInterfaceData ref_data) {
    return euEGST_onCxpInterfaceEventFEur_CxpInterfaceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onDataStreamEvent__from__Eur_DataStreamData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DataStreamData ref_data) {
    return euEGST_onDataStreamEventFEur_DataStreamData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onDeviceErrorEvent__from__Eur_DeviceErrorData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DeviceErrorData ref_data) {
    return euEGST_onDeviceErrorEventFEur_DeviceErrorData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onIoToolboxEvent__from__Eur_IoToolboxData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_IoToolboxData ref_data) {
    return euEGST_onIoToolboxEventFEur_IoToolboxData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onNewBufferEvent__from__Eur_NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_data) {
    return euEGST_onNewBufferEventFEur_NewBufferData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onRemoteDeviceEvent__from__Eur_RemoteDeviceData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_RemoteDeviceData ref_data) {
    return euEGST_onRemoteDeviceEventFEur_RemoteDeviceData(egrabberBox, ref_data);
}
static inline int Eur_EGrabber_CallbackSingleThread_onScriptUiCallback__from__const_char_p__void_p__std_map_std_string_std_string__std_string(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue) {
    return euEGST_onScriptUiCallbackFccpvpSm_std_string_std_stringSs(egrabberBox, operation, context, ref_args, ref_value, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_push__from__Eur_NewBufferData(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_buffer) {
    return euEGST_pushFEur_NewBufferData(egrabberBox, ref_buffer);
}
static inline int Eur_EGrabber_CallbackSingleThread_queue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGST_queueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackSingleThread_reallocBuffers__from__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue) {
    return euEGST_reallocBuffersFs(egrabberBox, bufferCount, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_reallocBuffers__from__size_t__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue) {
    return euEGST_reallocBuffersFss(egrabberBox, bufferCount, bufferSize, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_resetBufferQueue(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_resetBufferQueue(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_resetBufferQueue__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGST_resetBufferQueueFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackSingleThread_revoke__from__Eur_BufferIndexRange(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range) {
    return euEGST_revokeFEur_BufferIndexRange(egrabberBox, ref_range);
}
static inline int Eur_EGrabber_CallbackSingleThread_runScript__from__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script) {
    return euEGST_runScriptFccp(egrabberBox, script);
}
static inline int Eur_EGrabber_CallbackSingleThread_runScript__from__const_char_p__void_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script, void *context /* def=0 */) {
    return euEGST_runScriptFccpvp(egrabberBox, script, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setCicEventCallback__from__Euresys_CicEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CicEventCallback callback, void *context) {
    return euEGST_setCicEventCallbackF_CECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setCxpDeviceEventCallback__from__Euresys_CxpDeviceEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context) {
    return euEGST_setCxpDeviceEventCallbackF_CDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setCxpInterfaceEventCallback__from__Euresys_CxpInterfaceEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context) {
    return euEGST_setCxpInterfaceEventCallbackF_CIECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setDataStreamEventCallback__from__Euresys_DataStreamEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DataStreamEventCallback callback, void *context) {
    return euEGST_setDataStreamEventCallbackF_DSECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setDeviceErrorEventCallback__from__Euresys_DeviceErrorEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context) {
    return euEGST_setDeviceErrorEventCallbackF_DEECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setFloat__on__DeviceModule__from__const_char_p__double(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value) {
    return euEGST_setFloatODeviceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setFloat__on__InterfaceModule__from__const_char_p__double(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value) {
    return euEGST_setFloatOInterfaceModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setFloat__on__RemoteModule__from__const_char_p__double(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value) {
    return euEGST_setFloatORemoteModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setFloat__on__StreamModule__from__const_char_p__double(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value) {
    return euEGST_setFloatOStreamModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setFloat__on__SystemModule__from__const_char_p__double(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value) {
    return euEGST_setFloatOSystemModuleFccpd(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setInteger__on__DeviceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value) {
    return euEGST_setIntegerODeviceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setInteger__on__InterfaceModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value) {
    return euEGST_setIntegerOInterfaceModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setInteger__on__RemoteModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value) {
    return euEGST_setIntegerORemoteModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setInteger__on__StreamModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value) {
    return euEGST_setIntegerOStreamModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setInteger__on__SystemModule__from__const_char_p__int64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value) {
    return euEGST_setIntegerOSystemModuleFccpi64(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setIoToolboxEventCallback__from__Euresys_IoToolboxEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_IoToolboxEventCallback callback, void *context) {
    return euEGST_setIoToolboxEventCallbackF_ITECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setNewBufferEventCallback__from__Euresys_NewBufferEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_NewBufferEventCallback callback, void *context) {
    return euEGST_setNewBufferEventCallbackF_NBECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRegister__on__DeviceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGST_setRegisterODeviceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRegister__on__InterfaceModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGST_setRegisterOInterfaceModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRegister__on__RemoteModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGST_setRegisterORemoteModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRegister__on__StreamModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGST_setRegisterOStreamModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRegister__on__SystemModule__from__const_char_p__void_p__size_t(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size) {
    return euEGST_setRegisterOSystemModuleFccpvps(egrabberBox, feature, data, size);
}
static inline int Eur_EGrabber_CallbackSingleThread_setRemoteDeviceEventCallback__from__Euresys_RemoteDeviceEventCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context) {
    return euEGST_setRemoteDeviceEventCallbackF_RDECallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setScriptUiCallback__from__Euresys_ScriptUiCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ScriptUiCallback callback, void *context) {
    return euEGST_setScriptUiCallbackFScriptUiCallbackvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setString__on__DeviceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value) {
    return euEGST_setStringODeviceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setString__on__InterfaceModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value) {
    return euEGST_setStringOInterfaceModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setString__on__RemoteModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value) {
    return euEGST_setStringORemoteModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setString__on__StreamModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value) {
    return euEGST_setStringOStreamModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setString__on__SystemModule__from__const_char_p__const_char_p(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value) {
    return euEGST_setStringOSystemModuleFccpccp(egrabberBox, feature, value);
}
static inline int Eur_EGrabber_CallbackSingleThread_setThreadStartCallback__from__Euresys_ThreadStartCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStartCallback callback, void *context) {
    return euEGST_setThreadStartCallbackF_TStartCvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_setThreadStopCallback__from__Euresys_ThreadStopCallback__void_p(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStopCallback callback, void *context) {
    return euEGST_setThreadStopCallbackF_TStopCvp(egrabber, callback, context);
}
static inline int Eur_EGrabber_CallbackSingleThread_shouldReallocBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_shouldReallocBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_shouldReannounceBuffers(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue) {
    return euEGST_shouldReannounceBuffers(egrabberBox, returnValue);
}
static inline int Eur_EGrabber_CallbackSingleThread_shutdown(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_shutdown(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_start(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_start(egrabberBox);
}
static inline int Eur_EGrabber_CallbackSingleThread_start__from__uint64_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */) {
    return euEGST_startFu64(egrabberBox, frameCount);
}
static inline int Eur_EGrabber_CallbackSingleThread_start__from__uint64_t__bool8_t(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */) {
    return euEGST_startFu64b8(egrabberBox, frameCount, controlRemoteDevice);
}
static inline int Eur_EGrabber_CallbackSingleThread_stop(Eur_EGrabber_CallbackSingleThread egrabberBox) {
    return euEGST_stop(egrabberBox);
}
static inline int Eur_GenTLMemory_create(Eur_GenTLMemory *gentlmemoryBox) {
    return euGenTLMemory_create(gentlmemoryBox);
}
static inline int Eur_GenTLMemory_create__from__size_t(size_t bufferSize /* def=0 */, Eur_GenTLMemory *gentlmemoryBox) {
    return euGenTLMemory_createFs(bufferSize, gentlmemoryBox);
}
static inline int Eur_GenTLMemory_create__from__size_t__void_p(size_t bufferSize /* def=0 */, void *userPointer /* def=0 */, Eur_GenTLMemory *gentlmemoryBox) {
    return euGenTLMemory_createFsvp(bufferSize, userPointer, gentlmemoryBox);
}
static inline int Eur_GenTLMemory_destroy(Eur_GenTLMemory gentlmemoryBox) {
    return euGenTLMemory_destroy(gentlmemoryBox);
}
static inline int Eur_Gigelink(std_string *returnValue) {
    return euGigelink(returnValue);
}
static inline int Eur_Grablink(std_string *returnValue) {
    return euGrablink(returnValue);
}
static inline int Eur_InfoCommandInfo_destroy(Eur_InfoCommandInfo info) {
    return euEurCINFO_destroy(info);
}
static inline int Eur_InfoCommandInfo_get_dataSize(Eur_InfoCommandInfo info, size_t *returnValue) {
    return euEurCINFO_get_dataSize(info, returnValue);
}
static inline int Eur_InfoCommandInfo_get_dataType(Eur_InfoCommandInfo info, int *returnValue) {
    return euEurCINFO_get_dataType(info, returnValue);
}
static inline int Eur_Internal_lastCallbackError_setCallbackCriticalError() {
    return euInternal_lastCallbackError_setCallbackCriticalError();
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_client_error(Eur_client_error ref_error) {
    return euInternal_lastCallbackError_setFEur_client_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_cti_loading_error(Eur_cti_loading_error ref_error) {
    return euInternal_lastCallbackError_setFEur_cti_loading_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_genapi_error(Eur_genapi_error ref_error) {
    return euInternal_lastCallbackError_setFEur_genapi_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_gentl_error(Eur_gentl_error ref_error) {
    return euInternal_lastCallbackError_setFEur_gentl_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_internal_error(Eur_internal_error ref_error) {
    return euInternal_lastCallbackError_setFEur_internal_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_missing_gentl_symbol(Eur_missing_gentl_symbol ref_error) {
    return euInternal_lastCallbackError_setFEur_missing_gentl_symbol(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_not_allowed(Eur_not_allowed ref_error) {
    return euInternal_lastCallbackError_setFEur_not_allowed(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_thread_error(Eur_thread_error ref_error) {
    return euInternal_lastCallbackError_setFEur_thread_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_unexpected_data_size(Eur_unexpected_data_size ref_error) {
    return euInternal_lastCallbackError_setFEur_unexpected_data_size(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__Eur_unexpected_data_type(Eur_unexpected_data_type ref_error) {
    return euInternal_lastCallbackError_setFEur_unexpected_data_type(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__std_exception(std_exception ref_error) {
    return euInternal_lastCallbackError_setFstd_exception(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__std_logic_error(std_logic_error ref_error) {
    return euInternal_lastCallbackError_setFstd_logic_error(ref_error);
}
static inline int Eur_Internal_lastCallbackError_set__from__std_runtime_error(std_runtime_error ref_error) {
    return euInternal_lastCallbackError_setFstd_runtime_error(ref_error);
}
static inline int Eur_Internal_lastError_getCode(CEGRABBER_ERROR *returnValue) {
    return euInternal_lastError_getCode(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_client_error(Eur_client_error *returnValue) {
    return euInternal_lastError_getAEur_client_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_cti_loading_error(Eur_cti_loading_error *returnValue) {
    return euInternal_lastError_getAEur_cti_loading_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_genapi_error(Eur_genapi_error *returnValue) {
    return euInternal_lastError_getAEur_genapi_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_gentl_error(Eur_gentl_error *returnValue) {
    return euInternal_lastError_getAEur_gentl_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_internal_error(Eur_internal_error *returnValue) {
    return euInternal_lastError_getAEur_internal_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_missing_gentl_symbol(Eur_missing_gentl_symbol *returnValue) {
    return euInternal_lastError_getAEur_missing_gentl_symbol(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_not_allowed(Eur_not_allowed *returnValue) {
    return euInternal_lastError_getAEur_not_allowed(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_thread_error(Eur_thread_error *returnValue) {
    return euInternal_lastError_getAEur_thread_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_unexpected_data_size(Eur_unexpected_data_size *returnValue) {
    return euInternal_lastError_getAEur_unexpected_data_size(returnValue);
}
static inline int Eur_Internal_lastError_get__as__Eur_unexpected_data_type(Eur_unexpected_data_type *returnValue) {
    return euInternal_lastError_getAEur_unexpected_data_type(returnValue);
}
static inline int Eur_Internal_lastError_get__as__std_exception(std_exception *returnValue) {
    return euInternal_lastError_getAstd_exception(returnValue);
}
static inline int Eur_Internal_lastError_get__as__std_logic_error(std_logic_error *returnValue) {
    return euInternal_lastError_getAstd_logic_error(returnValue);
}
static inline int Eur_Internal_lastError_get__as__std_runtime_error(std_runtime_error *returnValue) {
    return euInternal_lastError_getAstd_runtime_error(returnValue);
}
static inline int Eur_IoToolboxData__as__Euresys_IoToolboxData(Eur_IoToolboxData data, const struct Euresys_IoToolboxData_s * *returnValue) {
    return euIoToolboxDataAIoToolboxData(data, returnValue);
}
static inline int Eur_IoToolboxData_create(Eur_IoToolboxData *iotoolboxdataBox) {
    return euIoToolboxData_create(iotoolboxdataBox);
}
static inline int Eur_IoToolboxData_destroy(Eur_IoToolboxData iotoolboxdataBox) {
    return euIoToolboxData_destroy(iotoolboxdataBox);
}
static inline int Eur_NewBufferData__as__Euresys_NewBufferData(Eur_NewBufferData data, const struct Euresys_NewBufferData_s * *returnValue) {
    return euNewBufferDataANewBufferData(data, returnValue);
}
static inline int Eur_NewBufferData_create(Eur_NewBufferData *newbufferdataBox) {
    return euNewBufferData_create(newbufferdataBox);
}
static inline int Eur_NewBufferData_destroy(Eur_NewBufferData newbufferdataBox) {
    return euNewBufferData_destroy(newbufferdataBox);
}
static inline int Eur_NvidiaRdmaMemory_create__from__void_p__size_t(void *deviceAddress, size_t size, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox) {
    return euNvidiaRdmaMemory_createFvps(deviceAddress, size, nvidiardmamemoryBox);
}
static inline int Eur_NvidiaRdmaMemory_create__from__void_p__size_t__void_p(void *deviceAddress, size_t size, void *userPointer /* def=0 */, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox) {
    return euNvidiaRdmaMemory_createFvpsvp(deviceAddress, size, userPointer, nvidiardmamemoryBox);
}
static inline int Eur_NvidiaRdmaMemory_destroy(Eur_NvidiaRdmaMemory nvidiardmamemoryBox) {
    return euNvidiaRdmaMemory_destroy(nvidiardmamemoryBox);
}
static inline int Eur_OneOfAll_at_position_1(Eur_OneOfAll oneofall, Eur_NewBufferData *returnValue) {
    return euEurOOA_at_position_1(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_2(Eur_OneOfAll oneofall, Eur_IoToolboxData *returnValue) {
    return euEurOOA_at_position_2(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_3(Eur_OneOfAll oneofall, Eur_CicData *returnValue) {
    return euEurOOA_at_position_3(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_4(Eur_OneOfAll oneofall, Eur_DataStreamData *returnValue) {
    return euEurOOA_at_position_4(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_5(Eur_OneOfAll oneofall, Eur_CxpInterfaceData *returnValue) {
    return euEurOOA_at_position_5(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_6(Eur_OneOfAll oneofall, Eur_DeviceErrorData *returnValue) {
    return euEurOOA_at_position_6(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_7(Eur_OneOfAll oneofall, Eur_CxpDeviceData *returnValue) {
    return euEurOOA_at_position_7(oneofall, returnValue);
}
static inline int Eur_OneOfAll_at_position_8(Eur_OneOfAll oneofall, Eur_RemoteDeviceData *returnValue) {
    return euEurOOA_at_position_8(oneofall, returnValue);
}
static inline int Eur_OneOfAll_create(Eur_OneOfAll *oneofall) {
    return euEurOOA_create(oneofall);
}
static inline int Eur_OneOfAll_destroy(Eur_OneOfAll oneofall) {
    return euEurOOA_destroy(oneofall);
}
static inline int Eur_Playlink(std_string *returnValue) {
    return euPlaylink(returnValue);
}
static inline int Eur_RemoteDeviceData__as__Euresys_RemoteDeviceData(Eur_RemoteDeviceData data, const struct Euresys_RemoteDeviceData_s * *returnValue) {
    return euRemoteDeviceDataARemoteDeviceData(data, returnValue);
}
static inline int Eur_RemoteDeviceData_create(Eur_RemoteDeviceData *remotedevicedataBox) {
    return euRemoteDeviceData_create(remotedevicedataBox);
}
static inline int Eur_RemoteDeviceData_destroy(Eur_RemoteDeviceData remotedevicedataBox) {
    return euRemoteDeviceData_destroy(remotedevicedataBox);
}
static inline int Eur_UserMemoryArray_create__from__Eur_UserMemory__size_t(Eur_UserMemory ref_memory, size_t bufferSize, Eur_UserMemoryArray *usermemoryarrayBox) {
    return euUserMemoryArray_createFEur_UserMemorys(ref_memory, bufferSize, usermemoryarrayBox);
}
static inline int Eur_UserMemoryArray_destroy(Eur_UserMemoryArray usermemoryarrayBox) {
    return euUserMemoryArray_destroy(usermemoryarrayBox);
}
static inline int Eur_UserMemory_create__from__void_p__size_t(void *base, size_t size, Eur_UserMemory *usermemoryBox) {
    return euUserMemory_createFvps(base, size, usermemoryBox);
}
static inline int Eur_UserMemory_create__from__void_p__size_t__void_p(void *base, size_t size, void *userPointer /* def=0 */, Eur_UserMemory *usermemoryBox) {
    return euUserMemory_createFvpsvp(base, size, userPointer, usermemoryBox);
}
static inline int Eur_UserMemory_destroy(Eur_UserMemory usermemoryBox) {
    return euUserMemory_destroy(usermemoryBox);
}
static inline int Eur_action_GenApiActionBuilder_destroy(Eur_action_GenApiActionBuilder action) {
    return euaction_GenApiActionBuilder_destroy(action);
}
static inline int Eur_action_GenApiActionBuilder_string(Eur_action_GenApiActionBuilder action, std_string *returnValue) {
    return euaction_GenApiActionBuilder_string(action, returnValue);
}
static inline int Eur_action_GenApiActionyBuilder_destroy(Eur_action_GenApiActionBuilder action) {
    return euaction_GenApiActionyBuilder_destroy(action);
}
static inline int Eur_action_declareFloat(Eur_action_GenApiActionBuilder *returnValue) {
    return euaction_declareFloat(returnValue);
}
static inline int Eur_action_declareInteger(Eur_action_GenApiActionBuilder *returnValue) {
    return euaction_declareInteger(returnValue);
}
static inline int Eur_action_declareString(Eur_action_GenApiActionBuilder *returnValue) {
    return euaction_declareString(returnValue);
}
static inline int Eur_action_undeclare(Eur_action_GenApiActionBuilder *returnValue) {
    return euaction_undeclare(returnValue);
}
static inline int Eur_client_error_create__from__const_char_p(const char *msg, Eur_client_error *client_errorBox) {
    return euclient_error_createFccp(msg, client_errorBox);
}
static inline int Eur_client_error_destroy(Eur_client_error client_errorBox) {
    return euclient_error_destroy(client_errorBox);
}
static inline int Eur_cti_loading_error_create__from__const_char_p(const char *path, Eur_cti_loading_error *cti_loading_errorBox) {
    return eucti_loading_error_createFccp(path, cti_loading_errorBox);
}
static inline int Eur_cti_loading_error_destroy(Eur_cti_loading_error cti_loading_errorBox) {
    return eucti_loading_error_destroy(cti_loading_errorBox);
}
static inline int Eur_genapi_error_add_float_parameter__from__double(Eur_genapi_error genapi_errorBox, double p) {
    return eugenapi_error_add_float_parameterFd(genapi_errorBox, p);
}
static inline int Eur_genapi_error_add_integer_parameter__from__int64_t(Eur_genapi_error genapi_errorBox, int64_t p) {
    return eugenapi_error_add_integer_parameterFi64(genapi_errorBox, p);
}
static inline int Eur_genapi_error_add_string_parameter__from__char_p(Eur_genapi_error genapi_errorBox, const char *p) {
    return eugenapi_error_add_string_parameterFcp(genapi_errorBox, p);
}
static inline int Eur_genapi_error_create__from__GENAPI_ERROR_CODE(GENAPI_ERROR_CODE code, Eur_genapi_error *genapi_errorBox) {
    return eugenapi_error_createFGEC(code, genapi_errorBox);
}
static inline int Eur_genapi_error_destroy(Eur_genapi_error genapi_errorBox) {
    return eugenapi_error_destroy(genapi_errorBox);
}
static inline int Eur_genapi_error_float_parameter__from__size_t(Eur_genapi_error genapi_errorBox, size_t index, double *returnValue) {
    return eugenapi_error_float_parameterFs(genapi_errorBox, index, returnValue);
}
static inline int Eur_genapi_error_integer_parameter__from__size_t(Eur_genapi_error genapi_errorBox, size_t index, int64_t *returnValue) {
    return eugenapi_error_integer_parameterFs(genapi_errorBox, index, returnValue);
}
static inline int Eur_genapi_error_parameter_count(Eur_genapi_error genapi_errorBox, size_t *returnValue) {
    return eugenapi_error_parameter_count(genapi_errorBox, returnValue);
}
static inline int Eur_genapi_error_parameter_type__from__size_t(Eur_genapi_error genapi_errorBox, size_t index, GENAPI_ERROR_PARAMETER_TYPE *returnValue) {
    return eugenapi_error_parameter_typeFs(genapi_errorBox, index, returnValue);
}
static inline int Eur_genapi_error_string_parameter__as__std_string__from__size_t(Eur_genapi_error error, size_t index, std_string *returnValue) {
    return eugenapi_error_string_parameterASsFs(error, index, returnValue);
}
static inline int Eur_genapi_error_string_parameter__from__size_t(Eur_genapi_error genapi_errorBox, size_t index, std_const_string *returnValue) {
    return eugenapi_error_string_parameterFs(genapi_errorBox, index, returnValue);
}
static inline int Eur_gentl_error_create__from__GC_ERROR(GC_ERROR err, Eur_gentl_error *gentl_errorBox) {
    return eugentl_error_createFGE(err, gentl_errorBox);
}
static inline int Eur_gentl_error_create__from__GC_ERROR__const_char_p(GC_ERROR err, const char *description, Eur_gentl_error *gentl_errorBox) {
    return eugentl_error_createFGEccp(err, description, gentl_errorBox);
}
static inline int Eur_gentl_error_destroy(Eur_gentl_error gentl_errorBox) {
    return eugentl_error_destroy(gentl_errorBox);
}
static inline int Eur_getEuresysCtiPath(std_string *returnValue) {
    return eugetEuresysCtiPath(returnValue);
}
static inline int Eur_getEventDescription__from__EVENT_DATA_NUMID_CUSTOM(EVENT_DATA_NUMID_CUSTOM numid, std_string *returnValue) {
    return eugetEventDescriptionFEDNC(numid, returnValue);
}
static inline int Eur_getEventFilter__on__CicData(size_t *returnValue) {
    return eugetEventFilterOCicData(returnValue);
}
static inline int Eur_getEventFilter__on__CxpDeviceData(size_t *returnValue) {
    return eugetEventFilterOCxpDeviceData(returnValue);
}
static inline int Eur_getEventFilter__on__CxpInterfaceData(size_t *returnValue) {
    return eugetEventFilterOCxpInterfaceData(returnValue);
}
static inline int Eur_getEventFilter__on__DataStreamData(size_t *returnValue) {
    return eugetEventFilterODataStreamData(returnValue);
}
static inline int Eur_getEventFilter__on__DeviceErrorData(size_t *returnValue) {
    return eugetEventFilterODeviceErrorData(returnValue);
}
static inline int Eur_getEventFilter__on__IoToolboxData(size_t *returnValue) {
    return eugetEventFilterOIoToolboxData(returnValue);
}
static inline int Eur_getEventFilter__on__NewBufferData(size_t *returnValue) {
    return eugetEventFilterONewBufferData(returnValue);
}
static inline int Eur_getEventFilter__on__RemoteDeviceData(size_t *returnValue) {
    return eugetEventFilterORemoteDeviceData(returnValue);
}
static inline int Eur_internal_error_create(Eur_internal_error *internal_errorBox) {
    return euinternal_error_create(internal_errorBox);
}
static inline int Eur_internal_error_destroy(Eur_internal_error internal_errorBox) {
    return euinternal_error_destroy(internal_errorBox);
}
static inline int Eur_missing_gentl_symbol_create__from__const_char_p__const_char_p(const char *path, const char *symbol, Eur_missing_gentl_symbol *missing_gentl_symbolBox) {
    return eumissing_gentl_symbol_createFccpccp(path, symbol, missing_gentl_symbolBox);
}
static inline int Eur_missing_gentl_symbol_destroy(Eur_missing_gentl_symbol missing_gentl_symbolBox) {
    return eumissing_gentl_symbol_destroy(missing_gentl_symbolBox);
}
static inline int Eur_not_allowed_create(Eur_not_allowed *not_allowedBox) {
    return eunot_allowed_create(not_allowedBox);
}
static inline int Eur_not_allowed_destroy(Eur_not_allowed not_allowedBox) {
    return eunot_allowed_destroy(not_allowedBox);
}
static inline int Eur_query_GenApiQueryBuilder_destroy(Eur_query_GenApiQueryBuilder query) {
    return euquery_GenApiQueryBuilder_destroy(query);
}
static inline int Eur_query_GenApiQueryBuilder_glob__from__const_char_p(Eur_query_GenApiQueryBuilder query, const char *glob, std_string *returnValue) {
    return euquery_GenApiQueryBuilder_globFccp(query, glob, returnValue);
}
static inline int Eur_query_GenApiQueryBuilder_regex__from__const_char_p(Eur_query_GenApiQueryBuilder query, const char *re, std_string *returnValue) {
    return euquery_GenApiQueryBuilder_regexFccp(query, re, returnValue);
}
static inline int Eur_query_GenApiQueryBuilder_string(Eur_query_GenApiQueryBuilder query, std_string *returnValue) {
    return euquery_GenApiQueryBuilder_string(query, returnValue);
}
static inline int Eur_query_attributes(Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_attributes(returnValue);
}
static inline int Eur_query_available__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_availableFccp(feature, returnValue);
}
static inline int Eur_query_categories(Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_categories(returnValue);
}
static inline int Eur_query_categoriesOf__from__const_char_p(const char *category, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_categoriesOfFccp(category, returnValue);
}
static inline int Eur_query_categoriesOf__from__const_char_p__bool8_t(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_categoriesOfFccpb8(category, availableOnly, returnValue);
}
static inline int Eur_query_categories__from__bool8_t(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_categoriesFb8(availableOnly, returnValue);
}
static inline int Eur_query_command__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_commandFccp(feature, returnValue);
}
static inline int Eur_query_declared(Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_declared(returnValue);
}
static inline int Eur_query_done__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_doneFccp(feature, returnValue);
}
static inline int Eur_query_enumEntries__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_enumEntriesFccp(feature, returnValue);
}
static inline int Eur_query_enumEntries__from__const_char_p__bool8_t(const char *feature, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_enumEntriesFccpb8(feature, availableOnly, returnValue);
}
static inline int Eur_query_features(Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_features(returnValue);
}
static inline int Eur_query_featuresOf__from__const_char_p(const char *category, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_featuresOfFccp(category, returnValue);
}
static inline int Eur_query_featuresOf__from__const_char_p__bool8_t(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_featuresOfFccpb8(category, availableOnly, returnValue);
}
static inline int Eur_query_features__from__bool8_t(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_featuresFb8(availableOnly, returnValue);
}
static inline int Eur_query_implemented__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_implementedFccp(feature, returnValue);
}
static inline int Eur_query_info__from__const_char_p__const_char_p(const char *feature, const char *what, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_infoFccpccp(feature, what, returnValue);
}
static inline int Eur_query_interfaces__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_interfacesFccp(feature, returnValue);
}
static inline int Eur_query_readable__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_readableFccp(feature, returnValue);
}
static inline int Eur_query_source__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_sourceFccp(feature, returnValue);
}
static inline int Eur_query_writeable__from__const_char_p(const char *feature, Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_writeableFccp(feature, returnValue);
}
static inline int Eur_query_xml(Eur_query_GenApiQueryBuilder *returnValue) {
    return euquery_xml(returnValue);
}
static inline int Eur_thread_error_create__from__const_char_p(const char *msg, Eur_thread_error *thread_errorBox) {
    return euthread_error_createFccp(msg, thread_errorBox);
}
static inline int Eur_thread_error_destroy(Eur_thread_error thread_errorBox) {
    return euthread_error_destroy(thread_errorBox);
}
static inline int Eur_unexpected_data_size_create__from__size_t__size_t(size_t expected, size_t returned, Eur_unexpected_data_size *unexpected_data_sizeBox) {
    return euunexpected_data_size_createFss(expected, returned, unexpected_data_sizeBox);
}
static inline int Eur_unexpected_data_size_destroy(Eur_unexpected_data_size unexpected_data_sizeBox) {
    return euunexpected_data_size_destroy(unexpected_data_sizeBox);
}
static inline int Eur_unexpected_data_type_create__from__INFO_DATATYPE(INFO_DATATYPE type, Eur_unexpected_data_type *unexpected_data_typeBox) {
    return euunexpected_data_type_createFID(type, unexpected_data_typeBox);
}
static inline int Eur_unexpected_data_type_destroy(Eur_unexpected_data_type unexpected_data_typeBox) {
    return euunexpected_data_type_destroy(unexpected_data_typeBox);
}
static inline int checkAllBoxedTypeCount() {
    return eucheckAllBoxedTypeCount();
}
static inline int from_box_Eur_BufferIndexRange__from__size_t_p__size_t_p__bool8_t_p(Eur_BufferIndexRange range, size_t *begin, size_t *end, bool8_t *reverse) {
    return eufrom_box_Eur_BufferIndexRangeFspspb8_p(range, begin, end, reverse);
}
static inline int from_box_Eur_BufferInfo__from__cBufferInfo_p(Eur_BufferInfo info, cBufferInfo *cInfo) {
    return eufrom_box_Eur_BufferInfoFcBufferInfo_p(info, cInfo);
}
static inline int from_box_Eur_EGrabberCameraInfo__from__cEGrabberCameraInfoExt1_p(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1) {
    return eufrom_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p(info, cInfoExt1);
}
static inline int from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt1_p(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1) {
    return eufrom_box_EurEGInfoFcEGrabberInfoExt1_p(info, cInfoExt1);
}
static inline int from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt2_p(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2) {
    return eufrom_box_EurEGInfoFcEGrabberInfoExt2_p(info, cInfoExt2);
}
static inline int from_box_Eur_EGrabberInfo__from__cEGrabberInfoExt3_p(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3) {
    return eufrom_box_EurEGInfoFcEGrabberInfoExt3_p(info, cInfoExt3);
}
static inline int from_box_Eur_EGrabberInfo__from__cEGrabberInfo_p(Eur_EGrabberInfo info, cEGrabberInfo *cInfo) {
    return eufrom_box_EurEGInfoFcEGrabberInfo_p(info, cInfo);
}
static inline int from_box_Eur_InfoCommandInfo__from__cInfoCommandInfo_p(Eur_InfoCommandInfo info, cInfoCommandInfo *cInfo) {
    return eufrom_box_EurCINFOFcInfoCommandInfo_p(info, cInfo);
}
static inline int from_box_Eur_cti_loading_error_path(Eur_cti_loading_error error, std_string *returnValue) {
    return eufrom_box_Eur_cti_loading_error_path(error, returnValue);
}
static inline int from_box_Eur_genapi_error(Eur_genapi_error error, GENAPI_ERROR_CODE *returnValue) {
    return eufrom_box_Eur_genapi_error(error, returnValue);
}
static inline int from_box_Eur_gentl_error_description(Eur_gentl_error error, std_string *returnValue) {
    return eufrom_box_Eur_gentl_error_description(error, returnValue);
}
static inline int from_box_Eur_gentl_error_gc_err(Eur_gentl_error error, GC_ERROR *returnValue) {
    return eufrom_box_Eur_gentl_error_gc_err(error, returnValue);
}
static inline int from_box_Eur_missing_gentl_symbol_path(Eur_missing_gentl_symbol error, std_string *returnValue) {
    return eufrom_box_Eur_missing_gentl_symbol_path(error, returnValue);
}
static inline int from_box_Eur_missing_gentl_symbol_symbol(Eur_missing_gentl_symbol error, std_string *returnValue) {
    return eufrom_box_Eur_missing_gentl_symbol_symbol(error, returnValue);
}
static inline int from_box_Eur_unexpected_data_size__from__size_t_p__size_t_p(Eur_unexpected_data_size error, size_t *expected, size_t *returned) {
    return eufrom_box_Eur_unexpected_data_sizeFspsp(error, expected, returned);
}
static inline int from_box_Eur_unexpected_data_type(Eur_unexpected_data_type error, INFO_DATATYPE *returnValue) {
    return eufrom_box_Eur_unexpected_data_type(error, returnValue);
}
static inline int from_box_std_string__from__const_char_pp__size_t_p(std_string string, const char **data, size_t *size) {
    return eufrom_box_std_stringFccppsp(string, data, size);
}
static inline int from_box_std_vector_BUFFER_HANDLE__from__const_BUFFER_HANDLE_pp__size_t_p(std_vector_BUFFER_HANDLE vector, const BUFFER_HANDLE **data, size_t *size) {
    return eufrom_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ppsp(vector, data, size);
}
static inline int from_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRY__from__const_EURESYS_EVENT_GET_DATA_ENTRY_pp__size_t_p(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, const EURESYS_EVENT_GET_DATA_ENTRY **data, size_t *size) {
    return eufrom_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ppsp(vector, data, size);
}
static inline int from_box_std_vector_PORT_HANDLE__from__const_PORT_HANDLE_pp__size_t_p(std_vector_PORT_HANDLE vector, const PORT_HANDLE **data, size_t *size) {
    return eufrom_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ppsp(vector, data, size);
}
static inline int from_box_std_vector_PORT_REGISTER_STACK_ENTRY__from__const_PORT_REGISTER_STACK_ENTRY_pp__size_t_p(std_vector_PORT_REGISTER_STACK_ENTRY vector, const PORT_REGISTER_STACK_ENTRY **data, size_t *size) {
    return eufrom_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ppsp(vector, data, size);
}
static inline int from_box_std_vector_char__from__const_char_pp__size_t_p(std_vector_char vector, const char **data, size_t *size) {
    return eufrom_box_std_vector_charFccppsp(vector, data, size);
}
static inline int std_const_string_create(std_const_string *string) {
    return eustd_const_string_create(string);
}
static inline int std_const_string_destroy(std_const_string string) {
    return eustd_const_string_destroy(string);
}
static inline int std_exception_create__from__const_char_p(const char *what, std_exception *error) {
    return eustd_exception_createFccp(what, error);
}
static inline int std_exception_destroy(std_exception error) {
    return eustd_exception_destroy(error);
}
static inline int std_exception_what(std_exception error, const char * *returnValue) {
    return eustd_exception_what(error, returnValue);
}
static inline int std_logic_error_create__from__const_char_p(const char *what, std_logic_error *error) {
    return eustd_logic_error_createFccp(what, error);
}
static inline int std_logic_error_destroy(std_logic_error error) {
    return eustd_logic_error_destroy(error);
}
static inline int std_logic_error_what(std_logic_error error, const char * *returnValue) {
    return eustd_logic_error_what(error, returnValue);
}
static inline int std_map_std_string_std_string_at__from__size_t__std_string_p__std_string_p(std_map_std_string_std_string map, size_t index, std_string *returnKey, std_string *returnValue) {
    return eustd_map_std_string_std_string_atFsSs_pSs_p(map, index, returnKey, returnValue);
}
static inline int std_map_std_string_std_string_at__from__std_map_std_string_std_string__std_string(std_map_std_string_std_string map, std_string key, std_string *returnValue) {
    return eustd_map_std_string_std_string_atFSm_std_string_std_stringSs(map, key, returnValue);
}
static inline int std_map_std_string_std_string_at__from__std_string(std_map_std_string_std_string map, std_string ref_key, std_string *returnValue) {
    return eustd_map_std_string_std_string_atFSs(map, ref_key, returnValue);
}
static inline int std_map_std_string_std_string_create(std_map_std_string_std_string *map) {
    return eustd_map_std_string_std_string_create(map);
}
static inline int std_map_std_string_std_string_destroy(std_map_std_string_std_string map) {
    return eustd_map_std_string_std_string_destroy(map);
}
static inline int std_map_std_string_std_string_size(std_map_std_string_std_string map, size_t *returnValue) {
    return eustd_map_std_string_std_string_size(map, returnValue);
}
static inline int std_runtime_error_create__from__const_char_p(const char *what, std_runtime_error *error) {
    return eustd_runtime_error_createFccp(what, error);
}
static inline int std_runtime_error_destroy(std_runtime_error error) {
    return eustd_runtime_error_destroy(error);
}
static inline int std_runtime_error_what(std_runtime_error error, const char * *returnValue) {
    return eustd_runtime_error_what(error, returnValue);
}
static inline int std_string_assign__from__const_char_p(std_string string, const char *str) {
    return eustd_string_assignFccp(string, str);
}
static inline int std_string_assign_operator__from__std_string(std_string string, std_string str) {
    return eustd_string_assign_operatorFSs(string, str);
}
static inline int std_string_c_str(std_string string, const char * *returnValue) {
    return eustd_string_c_str(string, returnValue);
}
static inline int std_string_create(std_string *string) {
    return eustd_string_create(string);
}
static inline int std_string_destroy(std_string string) {
    return eustd_string_destroy(string);
}
static inline int std_vector_BUFFER_HANDLE_at__from__size_t(std_vector_BUFFER_HANDLE vector, size_t pos, BUFFER_HANDLE *returnValue) {
    return eustd_vector_BUFFER_HANDLE_atFs(vector, pos, returnValue);
}
static inline int std_vector_BUFFER_HANDLE_create(std_vector_BUFFER_HANDLE *vector) {
    return eustd_vector_BUFFER_HANDLE_create(vector);
}
static inline int std_vector_BUFFER_HANDLE_destroy(std_vector_BUFFER_HANDLE vector) {
    return eustd_vector_BUFFER_HANDLE_destroy(vector);
}
static inline int std_vector_BUFFER_HANDLE_push_back__from__BUFFER_HANDLE(std_vector_BUFFER_HANDLE vector, BUFFER_HANDLE item) {
    return eustd_vector_BH_push_backFBH(vector, item);
}
static inline int std_vector_BUFFER_HANDLE_size(std_vector_BUFFER_HANDLE vector, size_t *returnValue) {
    return eustd_vector_BUFFER_HANDLE_size(vector, returnValue);
}
static inline int std_vector_EURESYS_EVENT_GET_DATA_ENTRY_at__from__size_t(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t pos, EURESYS_EVENT_GET_DATA_ENTRY *returnValue) {
    return eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_atFs(vector, pos, returnValue);
}
static inline int std_vector_EURESYS_EVENT_GET_DATA_ENTRY_create(std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector) {
    return eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_create(vector);
}
static inline int std_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector) {
    return eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy(vector);
}
static inline int std_vector_EURESYS_EVENT_GET_DATA_ENTRY_push_back__from__EURESYS_EVENT_GET_DATA_ENTRY(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, EURESYS_EVENT_GET_DATA_ENTRY item) {
    return eustd_vector_EEGDE_push_backFEEGDE(vector, item);
}
static inline int std_vector_EURESYS_EVENT_GET_DATA_ENTRY_size(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t *returnValue) {
    return eustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_size(vector, returnValue);
}
static inline int std_vector_PORT_HANDLE_at__from__size_t(std_vector_PORT_HANDLE vector, size_t pos, PORT_HANDLE *returnValue) {
    return eustd_vector_PORT_HANDLE_atFs(vector, pos, returnValue);
}
static inline int std_vector_PORT_HANDLE_create(std_vector_PORT_HANDLE *vector) {
    return eustd_vector_PORT_HANDLE_create(vector);
}
static inline int std_vector_PORT_HANDLE_destroy(std_vector_PORT_HANDLE vector) {
    return eustd_vector_PORT_HANDLE_destroy(vector);
}
static inline int std_vector_PORT_HANDLE_push_back__from__PORT_HANDLE(std_vector_PORT_HANDLE vector, PORT_HANDLE item) {
    return eustd_vector_PH_push_backFPH(vector, item);
}
static inline int std_vector_PORT_HANDLE_size(std_vector_PORT_HANDLE vector, size_t *returnValue) {
    return eustd_vector_PORT_HANDLE_size(vector, returnValue);
}
static inline int std_vector_PORT_REGISTER_STACK_ENTRY_at__from__size_t(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t pos, PORT_REGISTER_STACK_ENTRY *returnValue) {
    return eustd_vector_PORT_REGISTER_STACK_ENTRY_atFs(vector, pos, returnValue);
}
static inline int std_vector_PORT_REGISTER_STACK_ENTRY_create(std_vector_PORT_REGISTER_STACK_ENTRY *vector) {
    return eustd_vector_PORT_REGISTER_STACK_ENTRY_create(vector);
}
static inline int std_vector_PORT_REGISTER_STACK_ENTRY_destroy(std_vector_PORT_REGISTER_STACK_ENTRY vector) {
    return eustd_vector_PORT_REGISTER_STACK_ENTRY_destroy(vector);
}
static inline int std_vector_PORT_REGISTER_STACK_ENTRY_push_back__from__PORT_REGISTER_STACK_ENTRY(std_vector_PORT_REGISTER_STACK_ENTRY vector, PORT_REGISTER_STACK_ENTRY item) {
    return eustd_vector_PRSE_push_backFPRSE(vector, item);
}
static inline int std_vector_PORT_REGISTER_STACK_ENTRY_size(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t *returnValue) {
    return eustd_vector_PORT_REGISTER_STACK_ENTRY_size(vector, returnValue);
}
static inline int std_vector_char_at__from__size_t(std_vector_char vector, size_t pos, char *returnValue) {
    return eustd_vector_char_atFs(vector, pos, returnValue);
}
static inline int std_vector_char_create(std_vector_char *vector) {
    return eustd_vector_char_create(vector);
}
static inline int std_vector_char_destroy(std_vector_char vector) {
    return eustd_vector_char_destroy(vector);
}
static inline int std_vector_char_push_back__from__char(std_vector_char vector, char item) {
    return eustd_vector_char_push_backFc(vector, item);
}
static inline int std_vector_char_size(std_vector_char vector, size_t *returnValue) {
    return eustd_vector_char_size(vector, returnValue);
}
static inline int std_vector_std_string_at__from__size_t(std_vector_std_string vector, size_t pos, std_string *returnValue) {
    return eustd_vector_std_string_atFs(vector, pos, returnValue);
}
static inline int std_vector_std_string_create(std_vector_std_string *vector) {
    return eustd_vector_std_string_create(vector);
}
static inline int std_vector_std_string_destroy(std_vector_std_string vector) {
    return eustd_vector_std_string_destroy(vector);
}
static inline int std_vector_std_string_size(std_vector_std_string vector, size_t *returnValue) {
    return eustd_vector_std_string_size(vector, returnValue);
}
static inline int to_box_Eur_EGrabberCameraInfo__from__cEGrabberCameraInfoExt1_p(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1) {
    return euto_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p(info, cInfoExt1);
}
static inline int to_box_Eur_EGrabberInfo__from__cEGrabberInfo(cEGrabberInfo cInfo, Eur_EGrabberInfo *info) {
    return euto_box_EurEGInfoFcEGrabberInfo(cInfo, info);
}
static inline int to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt1_p(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1) {
    return euto_box_EurEGInfoFcEGrabberInfoExt1_p(info, cInfoExt1);
}
static inline int to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt2_p(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2) {
    return euto_box_EurEGInfoFcEGrabberInfoExt2_p(info, cInfoExt2);
}
static inline int to_box_Eur_EGrabberInfo__from__cEGrabberInfoExt3_p(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3) {
    return euto_box_EurEGInfoFcEGrabberInfoExt3_p(info, cInfoExt3);
}
static inline int to_box_Eur_NewBufferData__from__const_struct_Euresys_NewBufferData_s_p(const struct Euresys_NewBufferData_s *data, Eur_NewBufferData *returnValue) {
    return euto_box_Eur_NewBufferDataFcst_NewBufferData_s_p(data, returnValue);
}
static inline int to_box_std_string__from__const_char_p__size_t(const char *data, size_t size, std_string *string) {
    return euto_box_std_stringFccps(data, size, string);
}
static inline int to_box_std_vector_BUFFER_HANDLE__from__const_BUFFER_HANDLE_p__size_t(const BUFFER_HANDLE *data, size_t size, std_vector_BUFFER_HANDLE *vector) {
    return euto_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ps(data, size, vector);
}
static inline int to_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRY__from__const_EURESYS_EVENT_GET_DATA_ENTRY_p__size_t(const EURESYS_EVENT_GET_DATA_ENTRY *data, size_t size, std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector) {
    return euto_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ps(data, size, vector);
}
static inline int to_box_std_vector_PORT_HANDLE__from__const_PORT_HANDLE_p__size_t(const PORT_HANDLE *data, size_t size, std_vector_PORT_HANDLE *vector) {
    return euto_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ps(data, size, vector);
}
static inline int to_box_std_vector_PORT_REGISTER_STACK_ENTRY__from__const_PORT_REGISTER_STACK_ENTRY_p__size_t(const PORT_REGISTER_STACK_ENTRY *data, size_t size, std_vector_PORT_REGISTER_STACK_ENTRY *vector) {
    return euto_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ps(data, size, vector);
}
static inline int to_box_std_vector_char__from__const_char_p__size_t(const char *data, size_t size, std_vector_char *vector) {
    return euto_box_std_vector_charFccps(data, size, vector);
}
#endif

// typedefs for dynamic loading
#ifndef CEGRABBER_IMPL
#define CEGRABBER_API_P(fn) typedef int (*fn)
CEGRABBER_API_P(PeuBufferIndexRange_create)(Eur_BufferIndexRange *bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_createFEur_BufferIndexRange)(Eur_BufferIndexRange ref_range, Eur_BufferIndexRange *bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_createFs)(size_t begin /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_createFss)(size_t begin /* def=0 */, size_t end /* def=0 */, Eur_BufferIndexRange *bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_createFssb8)(size_t begin /* def=0 */, size_t end /* def=0 */, bool8_t reverse /* def=false */, Eur_BufferIndexRange *bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_destroy)(Eur_BufferIndexRange bufferindexrangeBox);
CEGRABBER_API_P(PeuBufferIndexRange_indexAtFs)(Eur_BufferIndexRange bufferindexrangeBox, size_t offset, size_t *returnValue);
CEGRABBER_API_P(PeuBufferIndexRange_size)(Eur_BufferIndexRange bufferindexrangeBox, size_t *returnValue);
CEGRABBER_API_P(PeuBufferInfo_destroy)(Eur_BufferInfo info);
CEGRABBER_API_P(PeuBuffer_createFEur_NewBufferData)(Eur_NewBufferData ref_data, Eur_Buffer *bufferBox);
CEGRABBER_API_P(PeuBuffer_destroy)(Eur_Buffer bufferBox);
CEGRABBER_API_P(PeuBuffer_getInfoASsFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoASv_std_stringFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoASvcFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoA_CINFOFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAb8FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAcptrFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAdFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAfFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAi16FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAi32FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAi64FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAi8FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAsFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAu16FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAu32FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAu64FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAu8FEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAu8pFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoAvptrFEurEGBaseBIC)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuBuffer_getInfoFEurEGBase)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, Eur_BufferInfo *returnValue);
CEGRABBER_API_P(PeuBuffer_getUserPointer)(Eur_Buffer bufferBox, void * *returnValue);
CEGRABBER_API_P(PeuBuffer_pushFEurEGBase)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber);
CEGRABBER_API_P(PeuBuffer_saveToDiskFEurEGBaseccp)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath);
CEGRABBER_API_P(PeuBuffer_saveToDiskFEurEGBaseccpi64)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */);
CEGRABBER_API_P(PeuBuffer_saveToDiskFEurEGBaseccpi64_ISTDP_p)(Eur_Buffer bufferBox, Eur_EGrabberBase ref_grabber, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */);
CEGRABBER_API_P(PeuBusMemory_createFu64s)(uint64_t busAddress, size_t size, Eur_BusMemory *busmemoryBox);
CEGRABBER_API_P(PeuBusMemory_createFu64svp)(uint64_t busAddress, size_t size, void *userPointer /* def=0 */, Eur_BusMemory *busmemoryBox);
CEGRABBER_API_P(PeuBusMemory_destroy)(Eur_BusMemory busmemoryBox);
CEGRABBER_API_P(PeuCicDataACicData)(Eur_CicData data, const struct Euresys_CicData_s * *returnValue);
CEGRABBER_API_P(PeuCicData_create)(Eur_CicData *cicdataBox);
CEGRABBER_API_P(PeuCicData_destroy)(Eur_CicData cicdataBox);
CEGRABBER_API_P(PeuCoaxlink)(std_string *returnValue);
CEGRABBER_API_P(PeuCxpDeviceDataACxpDeviceData)(Eur_CxpDeviceData data, const struct Euresys_CxpDeviceData_s * *returnValue);
CEGRABBER_API_P(PeuCxpDeviceData_create)(Eur_CxpDeviceData *cxpdevicedataBox);
CEGRABBER_API_P(PeuCxpDeviceData_destroy)(Eur_CxpDeviceData cxpdevicedataBox);
CEGRABBER_API_P(PeuCxpInterfaceDataACxpInterfaceData)(Eur_CxpInterfaceData data, const struct Euresys_CxpInterfaceData_s * *returnValue);
CEGRABBER_API_P(PeuCxpInterfaceData_create)(Eur_CxpInterfaceData *cxpinterfacedataBox);
CEGRABBER_API_P(PeuCxpInterfaceData_destroy)(Eur_CxpInterfaceData cxpinterfacedataBox);
CEGRABBER_API_P(PeuDataStreamDataADataStreamData)(Eur_DataStreamData data, const struct Euresys_DataStreamData_s * *returnValue);
CEGRABBER_API_P(PeuDataStreamData_create)(Eur_DataStreamData *datastreamdataBox);
CEGRABBER_API_P(PeuDataStreamData_destroy)(Eur_DataStreamData datastreamdataBox);
CEGRABBER_API_P(PeuDeviceErrorDataADeviceErrorData)(Eur_DeviceErrorData data, const struct Euresys_DeviceErrorData_s * *returnValue);
CEGRABBER_API_P(PeuDeviceErrorData_create)(Eur_DeviceErrorData *deviceerrordataBox);
CEGRABBER_API_P(PeuDeviceErrorData_destroy)(Eur_DeviceErrorData deviceerrordataBox);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadASsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadASv_std_stringFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadASvcFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadA_CINFOFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAb8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAcptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAdFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAfFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAi16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAi32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAi64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAi8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAu16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAu32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAu64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAu8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAu8pFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadAvptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackMultiThreadFEur_NewBufferData)(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandASsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandASv_std_stringFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandASvcFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandA_CINFOFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAb8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAcptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAdFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAfFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAi16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAi32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAi64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAi8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAu16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAu32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAu64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAu8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAu8pFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandAvptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackOnDemandFEur_NewBufferData)(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadASsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadASv_std_stringFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadASvcFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadA_CINFOFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAb8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAcptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAdFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAfFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAi16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAi32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAi64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAi8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAsFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAu16FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAu32FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAu64FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAu8FEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAu8pFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadAvptrFEur_NewBufferDataBIC)(Eur_NewBufferData ref_data, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuECameraBufferGetInfo_CallbackSingleThreadFEur_NewBufferData)(Eur_NewBufferData ref_data, Eur_BufferInfo *returnValue);
CEGRABBER_API_P(PeuECameraBufferPush_CallbackMultiThreadFEur_NewBufferData)(Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuECameraBufferPush_CallbackOnDemandFEur_NewBufferData)(Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuECameraBufferPush_CallbackSingleThreadFEur_NewBufferData)(Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_BusMemory)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_GenTLMemory)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_GenTLMemorys)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_NvidiaRdmaMemory)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_UserMemory)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_UserMemoryArray)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceAndQueueFEur_UserMemoryArrayb8)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceBusBufferFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceBusBufferFu64svp)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceNvidiaRdmaBufferFvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_announceNvidiaRdmaBufferFvpsvp)(Eur_EGrabber_CallbackOnDemand egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_attachEventODeviceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGCOD_attachEventOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGCOD_attachEventORemoteModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGCOD_attachEventOStreamModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGCOD_attachEventOSystemModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGCOD_cancelEventFilterFs)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter);
CEGRABBER_API_P(PeuEGCOD_cancelEventWAny)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelEventWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_cancelPop)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEurEGCameraInfo)(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEurEGCameraInfoDAF)(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEurEGInfo)(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEurEGInfoDAF)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEurEGInfoDAFb8)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTL)(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLTHIHDHDH)(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackOnDemand *egrabber);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLi)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLiii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLiiiDAF)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_createFEur_EGenTLiiiDAFb8)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackOnDemand *egrabberBox);
CEGRABBER_API_P(PeuEGCOD_destroy)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWAll)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_disableEventWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWAll)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_enableEventWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_executeODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGCOD_executeOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGCOD_executeORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGCOD_executeOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGCOD_executeOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGCOD_flushBuffers)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushBuffersFAQT)(Eur_EGrabber_CallbackOnDemand egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */);
CEGRABBER_API_P(PeuEGCOD_flushEventWAll)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_flushEventWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_gcReadPortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcReadPortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcReadPortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcReadPortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcReadPortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcReadPortODeviceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortOInterfaceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortORemoteModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortOStreamModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortOSystemModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortStringODeviceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortStringOInterfaceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortStringORemoteModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortStringOStreamModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortStringOSystemModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASsODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASsOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASsORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASsOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASsOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASv_std_stringODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASv_std_stringOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASv_std_stringORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASv_std_stringOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASv_std_stringOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASvcODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASvcOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASvcORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASvcOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueASvcOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueA_CINFOODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueA_CINFOOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueA_CINFOORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueA_CINFOOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueA_CINFOOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAb8ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAb8OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAb8ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAb8OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAb8OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAcptrODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAcptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAcptrORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAcptrOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAcptrOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAdODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAdOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAdORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAdOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAdOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAfODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAfOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAfORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAfOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAfOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi16ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi16OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi16ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi16OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi16OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi32ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi32OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi32ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi32OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi32OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi64ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi64OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi64ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi64OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi64OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi8ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi8OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi8ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi8OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAi8OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAsODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAsOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAsORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAsOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAsOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu16ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu16OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu16ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu16OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu16OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu32ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu32OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu32ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu32OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu32OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu64ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu64OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu64ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu64OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu64OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8ODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8OInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8ORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8OStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8OSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8pODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8pOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8pORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8pOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAu8pOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAvptrODeviceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAvptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAvptrORemoteModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAvptrOStreamModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcReadPortValueAvptrOSystemModuleFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_gcWritePortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcWritePortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcWritePortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcWritePortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcWritePortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_gcWritePortODeviceModuleFu64Svc)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_gcWritePortOInterfaceModuleFu64Svc)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_gcWritePortORemoteModuleFu64Svc)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_gcWritePortOStreamModuleFu64Svc)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_gcWritePortOSystemModuleFu64Svc)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWdODeviceModuleFu64d)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWdOInterfaceModuleFu64d)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWdORemoteModuleFu64d)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWdOStreamModuleFu64d)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWdOSystemModuleFu64d)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWfODeviceModuleFu64f)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWfOInterfaceModuleFu64f)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWfORemoteModuleFu64f)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWfOStreamModuleFu64f)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWfOSystemModuleFu64f)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi16ODeviceModuleFu64i16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi16OInterfaceModuleFu64i16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi16ORemoteModuleFu64i16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi16OStreamModuleFu64i16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi16OSystemModuleFu64i16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi32ODeviceModuleFu64i32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi32OInterfaceModuleFu64i32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi32ORemoteModuleFu64i32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi32OStreamModuleFu64i32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi32OSystemModuleFu64i32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi64ODeviceModuleFu64i64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi64OInterfaceModuleFu64i64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi64ORemoteModuleFu64i64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi64OStreamModuleFu64i64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi64OSystemModuleFu64i64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi8ODeviceModuleFu64i8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi8OInterfaceModuleFu64i8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi8ORemoteModuleFu64i8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi8OStreamModuleFu64i8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWi8OSystemModuleFu64i8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWsODeviceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWsOInterfaceModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWsORemoteModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWsOStreamModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWsOSystemModuleFu64s)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu16ODeviceModuleFu64u16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu16OInterfaceModuleFu64u16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu16ORemoteModuleFu64u16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu16OStreamModuleFu64u16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu16OSystemModuleFu64u16)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu32ODeviceModuleFu64u32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu32OInterfaceModuleFu64u32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu32ORemoteModuleFu64u32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu32OStreamModuleFu64u32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu32OSystemModuleFu64u32)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu64ODeviceModuleFu64u64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu64OInterfaceModuleFu64u64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu64ORemoteModuleFu64u64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu64OStreamModuleFu64u64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu64OSystemModuleFu64u64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu8ODeviceModuleFu64u8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu8OInterfaceModuleFu64u8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu8ORemoteModuleFu64u8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu8OStreamModuleFu64u8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGCOD_gcWritePortValueWu8OSystemModuleFu64u8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGCOD_getBufferDataFs)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoASsFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoASv_std_stringFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoASvcFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoA_CINFOFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAb8FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAcptrFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAdFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAfFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAi16FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAi32FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAi64FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAi8FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAsFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAu16FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAu32FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAu64FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAu8FsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAu8pFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getBufferInfoAvptrFsBIC)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getDevicePortFi)(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGCOD_getFloatODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getFloatOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getFloatORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getFloatOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getFloatOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getHeight)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASsODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASsOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASsOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASsOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASv_std_stringODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASv_std_stringOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASv_std_stringOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASv_std_stringOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASvcODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASvcOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASvcOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoASvcOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoA_CINFOODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoA_CINFOOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoA_CINFOOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoA_CINFOOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAb8ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAb8OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAb8OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAb8OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAcptrODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAcptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAcptrOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAcptrOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAdODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAdOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAdOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAdOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAfODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAfOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAfOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAfOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi16ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi16OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi16OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi16OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi32ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi32OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi32OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi32OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi64ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi64OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi64OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi64OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi8ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi8OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi8OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAi8OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAsODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAsOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAsOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAsOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu16ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu16OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu16OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu16OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu32ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu32OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu32OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu32OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu64ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu64OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu64OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu64OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8ODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8OInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8OStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8OSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8pODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8pOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8pOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAu8pOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAvptrODeviceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAvptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAvptrOStreamModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInfoAvptrOSystemModuleFi32)(Eur_EGrabber_CallbackOnDemand egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGCOD_getIntegerODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getIntegerOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getIntegerORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getIntegerOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getIntegerOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getInterfacePortFi)(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGCOD_getLastEventGrabberIndex)(Eur_EGrabber_CallbackOnDemand egrabberBox, int *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPayloadSize)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountFilterFs)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWAny)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPendingEventCountWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_getPixelFormat)(Eur_EGrabber_CallbackOnDemand egrabberBox, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_getRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_getRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_getRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_getRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_getRemotePortFi)(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStreamPortFi)(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringDataODeviceModuleFccpSvc)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_getStringDataOInterfaceModuleFccpSvc)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_getStringDataORemoteModuleFccpSvc)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_getStringDataOStreamModuleFccpSvc)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_getStringDataOSystemModuleFccpSvc)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGCOD_getStringListODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringListOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringListORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringListOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringListOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getStringOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGCOD_getSystemPortFi)(Eur_EGrabber_CallbackOnDemand egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGCOD_getWidth)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_interruptScriptFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *scriptId);
CEGRABBER_API_P(PeuEGCOD_invalidateODeviceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGCOD_invalidateOInterfaceModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGCOD_invalidateORemoteModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGCOD_invalidateOStreamModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGCOD_invalidateOSystemModuleFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGCOD_isOpenODeviceModule)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_isOpenOInterfaceModule)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_isOpenORemoteModule)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_isOpenOStreamModule)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_isOpenOSystemModule)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_mementoFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *text);
CEGRABBER_API_P(PeuEGCOD_mementoFucucccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char verbosity, unsigned char kind, const char *text);
CEGRABBER_API_P(PeuEGCOD_mementoWaveDownFucuc)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGCOD_mementoWaveNoValueFucuc)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGCOD_mementoWaveResetFucuc)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGCOD_mementoWaveUpFucuc)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGCOD_mementoWaveValueFucucu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, unsigned char kind, unsigned char id, uint64_t value);
CEGRABBER_API_P(PeuEGCOD_onCicEventFEur_CicData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CicData ref_data);
CEGRABBER_API_P(PeuEGCOD_onCxpDeviceEventFEur_CxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpDeviceData ref_data);
CEGRABBER_API_P(PeuEGCOD_onCxpInterfaceEventFEur_CxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_CxpInterfaceData ref_data);
CEGRABBER_API_P(PeuEGCOD_onDataStreamEventFEur_DataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DataStreamData ref_data);
CEGRABBER_API_P(PeuEGCOD_onDeviceErrorEventFEur_DeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_DeviceErrorData ref_data);
CEGRABBER_API_P(PeuEGCOD_onIoToolboxEventFEur_IoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_IoToolboxData ref_data);
CEGRABBER_API_P(PeuEGCOD_onNewBufferEventFEur_NewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuEGCOD_onRemoteDeviceEventFEur_RemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_RemoteDeviceData ref_data);
CEGRABBER_API_P(PeuEGCOD_onScriptUiCallbackFccpvpSm_std_string_std_stringSs)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue);
CEGRABBER_API_P(PeuEGCOD_pop)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEGCOD_popEventFilterFsu64EurOOAi_p)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, Eur_OneOfAll ref_oneOf, int *position, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_popFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout /* def=GENTL_INFINITE */, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventFilterFs)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventFilterFsu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t eventFilter, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWAny)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWAnyFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCicData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCicDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCxpDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCxpDeviceDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCxpInterfaceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWCxpInterfaceDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWDataStreamData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWDataStreamDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWDeviceErrorData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWDeviceErrorDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWIoToolboxData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWIoToolboxDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWNewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWNewBufferDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWRemoteDeviceData)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_processEventWRemoteDeviceDataFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_pushFEur_NewBufferData)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_NewBufferData ref_buffer);
CEGRABBER_API_P(PeuEGCOD_queueFEur_BufferIndexRange)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGCOD_reallocBuffersFs)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_reallocBuffersFss)(Eur_EGrabber_CallbackOnDemand egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGCOD_resetBufferQueue)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_resetBufferQueueFEur_BufferIndexRange)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGCOD_revokeFEur_BufferIndexRange)(Eur_EGrabber_CallbackOnDemand egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGCOD_runScriptFccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script);
CEGRABBER_API_P(PeuEGCOD_runScriptFccpvp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *script, void *context /* def=0 */);
CEGRABBER_API_P(PeuEGCOD_setCicEventCallbackF_CECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CicEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setCxpDeviceEventCallbackF_CDECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setCxpInterfaceEventCallbackF_CIECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_CxpInterfaceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setDataStreamEventCallbackF_DSECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DataStreamEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setDeviceErrorEventCallbackF_DEECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_DeviceErrorEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setFloatODeviceModuleFccpd)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGCOD_setFloatOInterfaceModuleFccpd)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGCOD_setFloatORemoteModuleFccpd)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGCOD_setFloatOStreamModuleFccpd)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGCOD_setFloatOSystemModuleFccpd)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGCOD_setIntegerODeviceModuleFccpi64)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGCOD_setIntegerOInterfaceModuleFccpi64)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGCOD_setIntegerORemoteModuleFccpi64)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGCOD_setIntegerOStreamModuleFccpi64)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGCOD_setIntegerOSystemModuleFccpi64)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGCOD_setIoToolboxEventCallbackF_ITECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_IoToolboxEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setNewBufferEventCallbackF_NBECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_NewBufferEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_setRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_setRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_setRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_setRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGCOD_setRemoteDeviceEventCallbackF_RDECallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_RemoteDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setScriptUiCallbackFScriptUiCallbackvp)(Eur_EGrabber_CallbackOnDemand egrabber, Euresys_ScriptUiCallback callback, void *context);
CEGRABBER_API_P(PeuEGCOD_setStringODeviceModuleFccpccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGCOD_setStringOInterfaceModuleFccpccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGCOD_setStringORemoteModuleFccpccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGCOD_setStringOStreamModuleFccpccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGCOD_setStringOSystemModuleFccpccp)(Eur_EGrabber_CallbackOnDemand egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGCOD_shouldReallocBuffers)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_shouldReannounceBuffers)(Eur_EGrabber_CallbackOnDemand egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGCOD_shutdown)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_start)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGCOD_startFu64)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */);
CEGRABBER_API_P(PeuEGCOD_startFu64b8)(Eur_EGrabber_CallbackOnDemand egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */);
CEGRABBER_API_P(PeuEGCOD_stop)(Eur_EGrabber_CallbackOnDemand egrabberBox);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_BusMemory)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_GenTLMemory)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_GenTLMemorys)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_NvidiaRdmaMemory)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_UserMemory)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_UserMemoryArray)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceAndQueueFEur_UserMemoryArrayb8)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_announceBusBufferFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_announceBusBufferFu64svp)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_announceNvidiaRdmaBufferFvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_announceNvidiaRdmaBufferFvpsvp)(Eur_EGrabber_CallbackMultiThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_attachEventODeviceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGMT_attachEventOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGMT_attachEventORemoteModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGMT_attachEventOStreamModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGMT_attachEventOSystemModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGMT_createFEurEGCameraInfo)(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEurEGCameraInfoDAF)(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEurEGInfo)(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEurEGInfoDAF)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEurEGInfoDAFb8)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTL)(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLTHIHDHDH)(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackMultiThread *egrabber);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLi)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLiii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLiiiDAF)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_createFEur_EGenTLiiiDAFb8)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackMultiThread *egrabberBox);
CEGRABBER_API_P(PeuEGMT_destroy)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWAll)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWCicData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWCxpDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWCxpInterfaceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWDataStreamData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWDeviceErrorData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWIoToolboxData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWNewBufferData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_disableEventWRemoteDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWAll)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWCicData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWCxpDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWCxpInterfaceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWDataStreamData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWDeviceErrorData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWIoToolboxData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWNewBufferData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_enableEventWRemoteDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_executeODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGMT_executeOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGMT_executeORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGMT_executeOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGMT_executeOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGMT_flushBuffers)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushBuffersFAQT)(Eur_EGrabber_CallbackMultiThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */);
CEGRABBER_API_P(PeuEGMT_flushEventWAll)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWCicData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWCxpDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWCxpInterfaceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWDataStreamData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWDeviceErrorData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWIoToolboxData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWNewBufferData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_flushEventWRemoteDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_gcReadPortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcReadPortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcReadPortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcReadPortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcReadPortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcReadPortODeviceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortOInterfaceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortORemoteModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortOStreamModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortOSystemModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortStringODeviceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortStringOInterfaceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortStringORemoteModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortStringOStreamModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortStringOSystemModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASsODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASsOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASsORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASsOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASsOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASv_std_stringODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASv_std_stringOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASv_std_stringORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASv_std_stringOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASv_std_stringOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASvcODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASvcOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASvcORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASvcOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueASvcOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueA_CINFOODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueA_CINFOOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueA_CINFOORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueA_CINFOOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueA_CINFOOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAb8ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAb8OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAb8ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAb8OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAb8OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAcptrODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAcptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAcptrORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAcptrOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAcptrOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAdODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAdOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAdORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAdOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAdOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAfODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAfOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAfORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAfOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAfOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi16ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi16OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi16ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi16OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi16OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi32ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi32OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi32ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi32OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi32OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi64ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi64OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi64ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi64OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi64OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi8ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi8OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi8ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi8OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAi8OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAsODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAsOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAsORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAsOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAsOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu16ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu16OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu16ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu16OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu16OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu32ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu32OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu32ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu32OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu32OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu64ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu64OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu64ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu64OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu64OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8ODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8OInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8ORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8OStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8OSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8pODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8pOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8pORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8pOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAu8pOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAvptrODeviceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAvptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAvptrORemoteModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAvptrOStreamModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcReadPortValueAvptrOSystemModuleFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_gcWritePortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcWritePortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcWritePortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcWritePortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcWritePortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_gcWritePortODeviceModuleFu64Svc)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_gcWritePortOInterfaceModuleFu64Svc)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_gcWritePortORemoteModuleFu64Svc)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_gcWritePortOStreamModuleFu64Svc)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_gcWritePortOSystemModuleFu64Svc)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWdODeviceModuleFu64d)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWdOInterfaceModuleFu64d)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWdORemoteModuleFu64d)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWdOStreamModuleFu64d)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWdOSystemModuleFu64d)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWfODeviceModuleFu64f)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWfOInterfaceModuleFu64f)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWfORemoteModuleFu64f)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWfOStreamModuleFu64f)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWfOSystemModuleFu64f)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi16ODeviceModuleFu64i16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi16OInterfaceModuleFu64i16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi16ORemoteModuleFu64i16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi16OStreamModuleFu64i16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi16OSystemModuleFu64i16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi32ODeviceModuleFu64i32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi32OInterfaceModuleFu64i32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi32ORemoteModuleFu64i32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi32OStreamModuleFu64i32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi32OSystemModuleFu64i32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi64ODeviceModuleFu64i64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi64OInterfaceModuleFu64i64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi64ORemoteModuleFu64i64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi64OStreamModuleFu64i64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi64OSystemModuleFu64i64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi8ODeviceModuleFu64i8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi8OInterfaceModuleFu64i8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi8ORemoteModuleFu64i8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi8OStreamModuleFu64i8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWi8OSystemModuleFu64i8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWsODeviceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWsOInterfaceModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWsORemoteModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWsOStreamModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWsOSystemModuleFu64s)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu16ODeviceModuleFu64u16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu16OInterfaceModuleFu64u16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu16ORemoteModuleFu64u16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu16OStreamModuleFu64u16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu16OSystemModuleFu64u16)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu32ODeviceModuleFu64u32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu32OInterfaceModuleFu64u32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu32ORemoteModuleFu64u32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu32OStreamModuleFu64u32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu32OSystemModuleFu64u32)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu64ODeviceModuleFu64u64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu64OInterfaceModuleFu64u64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu64ORemoteModuleFu64u64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu64OStreamModuleFu64u64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu64OSystemModuleFu64u64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu8ODeviceModuleFu64u8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu8OInterfaceModuleFu64u8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu8ORemoteModuleFu64u8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu8OStreamModuleFu64u8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGMT_gcWritePortValueWu8OSystemModuleFu64u8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGMT_getBufferDataFs)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoASsFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoASv_std_stringFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoASvcFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoA_CINFOFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAb8FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAcptrFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAdFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAfFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAi16FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAi32FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAi64FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAi8FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAsFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAu16FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAu32FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAu64FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAu8FsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAu8pFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_getBufferInfoAvptrFsBIC)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_getDevicePortFi)(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGMT_getFloatODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getFloatOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getFloatORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getFloatOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getFloatOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getHeight)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASsODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASsOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASsOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASsOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASv_std_stringODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASv_std_stringOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASv_std_stringOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASv_std_stringOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASvcODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASvcOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASvcOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoASvcOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoA_CINFOODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoA_CINFOOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoA_CINFOOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoA_CINFOOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAb8ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAb8OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAb8OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAb8OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAcptrODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAcptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAcptrOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAcptrOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAdODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAdOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAdOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAdOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAfODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAfOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAfOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAfOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi16ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi16OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi16OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi16OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi32ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi32OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi32OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi32OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi64ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi64OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi64OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi64OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi8ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi8OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi8OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAi8OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAsODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAsOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAsOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAsOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu16ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu16OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu16OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu16OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu32ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu32OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu32OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu32OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu64ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu64OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu64OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu64OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8ODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8OInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8OStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8OSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8pODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8pOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8pOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAu8pOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAvptrODeviceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAvptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAvptrOStreamModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_getInfoAvptrOSystemModuleFi32)(Eur_EGrabber_CallbackMultiThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGMT_getIntegerODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getIntegerOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getIntegerORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getIntegerOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getIntegerOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getInterfacePortFi)(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGMT_getLastEventGrabberIndex)(Eur_EGrabber_CallbackMultiThread egrabberBox, int *returnValue);
CEGRABBER_API_P(PeuEGMT_getPayloadSize)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_getPixelFormat)(Eur_EGrabber_CallbackMultiThread egrabberBox, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_getRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_getRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_getRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_getRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_getRemotePortFi)(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGMT_getStreamPortFi)(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringDataODeviceModuleFccpSvc)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_getStringDataOInterfaceModuleFccpSvc)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_getStringDataORemoteModuleFccpSvc)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_getStringDataOStreamModuleFccpSvc)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_getStringDataOSystemModuleFccpSvc)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGMT_getStringListODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringListOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringListORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringListOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringListOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getStringOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGMT_getSystemPortFi)(Eur_EGrabber_CallbackMultiThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGMT_getWidth)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGMT_interruptScriptFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *scriptId);
CEGRABBER_API_P(PeuEGMT_invalidateODeviceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGMT_invalidateOInterfaceModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGMT_invalidateORemoteModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGMT_invalidateOStreamModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGMT_invalidateOSystemModuleFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGMT_isOpenODeviceModule)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_isOpenOInterfaceModule)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_isOpenORemoteModule)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_isOpenOStreamModule)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_isOpenOSystemModule)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_mementoFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *text);
CEGRABBER_API_P(PeuEGMT_mementoFucucccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text);
CEGRABBER_API_P(PeuEGMT_mementoWaveDownFucuc)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGMT_mementoWaveNoValueFucuc)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGMT_mementoWaveResetFucuc)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGMT_mementoWaveUpFucuc)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGMT_mementoWaveValueFucucu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value);
CEGRABBER_API_P(PeuEGMT_onCicEventFEur_CicData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CicData ref_data);
CEGRABBER_API_P(PeuEGMT_onCxpDeviceEventFEur_CxpDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpDeviceData ref_data);
CEGRABBER_API_P(PeuEGMT_onCxpInterfaceEventFEur_CxpInterfaceData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_CxpInterfaceData ref_data);
CEGRABBER_API_P(PeuEGMT_onDataStreamEventFEur_DataStreamData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DataStreamData ref_data);
CEGRABBER_API_P(PeuEGMT_onDeviceErrorEventFEur_DeviceErrorData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_DeviceErrorData ref_data);
CEGRABBER_API_P(PeuEGMT_onIoToolboxEventFEur_IoToolboxData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_IoToolboxData ref_data);
CEGRABBER_API_P(PeuEGMT_onNewBufferEventFEur_NewBufferData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuEGMT_onRemoteDeviceEventFEur_RemoteDeviceData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_RemoteDeviceData ref_data);
CEGRABBER_API_P(PeuEGMT_onScriptUiCallbackFccpvpSm_std_string_std_stringSs)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue);
CEGRABBER_API_P(PeuEGMT_pushFEur_NewBufferData)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_NewBufferData ref_buffer);
CEGRABBER_API_P(PeuEGMT_queueFEur_BufferIndexRange)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGMT_reallocBuffersFs)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_reallocBuffersFss)(Eur_EGrabber_CallbackMultiThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGMT_resetBufferQueue)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_resetBufferQueueFEur_BufferIndexRange)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGMT_revokeFEur_BufferIndexRange)(Eur_EGrabber_CallbackMultiThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGMT_runScriptFccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script);
CEGRABBER_API_P(PeuEGMT_runScriptFccpvp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *script, void *context /* def=0 */);
CEGRABBER_API_P(PeuEGMT_setCicEventCallbackF_CECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CicEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setCxpDeviceEventCallbackF_CDECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setCxpInterfaceEventCallbackF_CIECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setDataStreamEventCallbackF_DSECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DataStreamEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setDeviceErrorEventCallbackF_DEECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setFloatODeviceModuleFccpd)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGMT_setFloatOInterfaceModuleFccpd)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGMT_setFloatORemoteModuleFccpd)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGMT_setFloatOStreamModuleFccpd)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGMT_setFloatOSystemModuleFccpd)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGMT_setIntegerODeviceModuleFccpi64)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGMT_setIntegerOInterfaceModuleFccpi64)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGMT_setIntegerORemoteModuleFccpi64)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGMT_setIntegerOStreamModuleFccpi64)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGMT_setIntegerOSystemModuleFccpi64)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGMT_setIoToolboxEventCallbackF_ITECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_IoToolboxEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setNewBufferEventCallbackF_NBECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_NewBufferEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_setRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_setRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_setRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_setRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGMT_setRemoteDeviceEventCallbackF_RDECallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setScriptUiCallbackFScriptUiCallbackvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ScriptUiCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setStringODeviceModuleFccpccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGMT_setStringOInterfaceModuleFccpccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGMT_setStringORemoteModuleFccpccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGMT_setStringOStreamModuleFccpccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGMT_setStringOSystemModuleFccpccp)(Eur_EGrabber_CallbackMultiThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGMT_setThreadStartCallbackF_TStartCvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStartCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_setThreadStopCallbackF_TStopCvp)(Eur_EGrabber_CallbackMultiThread egrabber, Euresys_ThreadStopCallback callback, void *context);
CEGRABBER_API_P(PeuEGMT_shouldReallocBuffers)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_shouldReannounceBuffers)(Eur_EGrabber_CallbackMultiThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGMT_shutdown)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_start)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGMT_startFu64)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */);
CEGRABBER_API_P(PeuEGMT_startFu64b8)(Eur_EGrabber_CallbackMultiThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */);
CEGRABBER_API_P(PeuEGMT_stop)(Eur_EGrabber_CallbackMultiThread egrabberBox);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_BusMemory)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BusMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_GenTLMemory)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_GenTLMemorys)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_GenTLMemory ref_memory, size_t bufferCount /* def=1 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_NvidiaRdmaMemory)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NvidiaRdmaMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_UserMemory)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemory ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_UserMemoryArray)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceAndQueueFEur_UserMemoryArrayb8)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_UserMemoryArray ref_memory, bool8_t reverse, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_announceBusBufferFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_announceBusBufferFu64svp)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_announceNvidiaRdmaBufferFvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_announceNvidiaRdmaBufferFvpsvp)(Eur_EGrabber_CallbackSingleThread egrabberBox, void *deviceAddress, size_t size, void *userPointer /* def=0 */, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_attachEventODeviceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGST_attachEventOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGST_attachEventORemoteModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGST_attachEventOStreamModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGST_attachEventOSystemModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGST_createFEurEGCameraInfo)(Eur_EGrabberCameraInfo ref_camera, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEurEGCameraInfoDAF)(Eur_EGrabberCameraInfo ref_camera, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEurEGInfo)(Eur_EGrabberInfo ref_grabber, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEurEGInfoDAF)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEurEGInfoDAFb8)(Eur_EGrabberInfo ref_grabber, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTL)(Eur_EGenTL ref_gentl, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLTHIHDHDH)(Eur_EGenTL ref_gentl, TL_HANDLE tlh, IF_HANDLE ifh, DEV_HANDLE devh, DS_HANDLE dsh, Eur_EGrabber_CallbackSingleThread *egrabber);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLi)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLiii)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLiiiDAF)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_createFEur_EGenTLiiiDAFb8)(Eur_EGenTL ref_gentl, int interfaceIndex /* def=0 */, int deviceIndex /* def=0 */, int dataStreamIndex /* def=0 */, DEVICE_ACCESS_FLAGS deviceOpenFlags /* def=defaultDeviceOpenFlags */, bool8_t remoteRequired /* def=true */, Eur_EGrabber_CallbackSingleThread *egrabberBox);
CEGRABBER_API_P(PeuEGST_destroy)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWAll)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWCicData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWCxpDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWCxpInterfaceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWDataStreamData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWDeviceErrorData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWIoToolboxData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWNewBufferData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_disableEventWRemoteDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWAll)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWCicData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWCxpDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWCxpInterfaceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWDataStreamData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWDeviceErrorData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWIoToolboxData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWNewBufferData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_enableEventWRemoteDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_executeODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGST_executeOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGST_executeORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGST_executeOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGST_executeOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *command);
CEGRABBER_API_P(PeuEGST_flushBuffers)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushBuffersFAQT)(Eur_EGrabber_CallbackSingleThread egrabberBox, ACQ_QUEUE_TYPE operation /* def=ACQ_QUEUE_ALL_TO_INPUT */);
CEGRABBER_API_P(PeuEGST_flushEventWAll)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWCicData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWCxpDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWCxpInterfaceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWDataStreamData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWDeviceErrorData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWIoToolboxData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWNewBufferData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_flushEventWRemoteDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_gcReadPortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcReadPortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcReadPortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcReadPortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcReadPortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcReadPortODeviceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortOInterfaceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortORemoteModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortOStreamModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortOSystemModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortStringODeviceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortStringOInterfaceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortStringORemoteModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortStringOStreamModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortStringOSystemModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASsODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASsOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASsORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASsOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASsOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASv_std_stringODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASv_std_stringOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASv_std_stringORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASv_std_stringOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASv_std_stringOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASvcODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASvcOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASvcORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASvcOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueASvcOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueA_CINFOODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueA_CINFOOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueA_CINFOORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueA_CINFOOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueA_CINFOOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAb8ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAb8OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAb8ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAb8OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAb8OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAcptrODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAcptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAcptrORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAcptrOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAcptrOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, char * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAdODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAdOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAdORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAdOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAdOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAfODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAfOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAfORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAfOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAfOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi16ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi16OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi16ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi16OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi16OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi32ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi32OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi32ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi32OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi32OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi64ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi64OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi64ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi64OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi64OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi8ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi8OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi8ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi8OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAi8OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAsODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAsOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAsORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAsOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAsOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu16ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu16OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu16ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu16OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu16OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu32ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu32OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu32ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu32OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu32OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu64ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu64OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu64ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu64OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu64OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8ODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8OInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8ORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8OStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8OSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8pODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8pOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8pORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8pOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAu8pOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAvptrODeviceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAvptrOInterfaceModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAvptrORemoteModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAvptrOStreamModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGST_gcReadPortValueAvptrOSystemModuleFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, void * *returnValue);
CEGRABBER_API_P(PeuEGST_gcWritePortDataODeviceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcWritePortDataOInterfaceModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcWritePortDataORemoteModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcWritePortDataOStreamModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcWritePortDataOSystemModuleFu64vps)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_gcWritePortODeviceModuleFu64Svc)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_gcWritePortOInterfaceModuleFu64Svc)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_gcWritePortORemoteModuleFu64Svc)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_gcWritePortOStreamModuleFu64Svc)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_gcWritePortOSystemModuleFu64Svc)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWdODeviceModuleFu64d)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWdOInterfaceModuleFu64d)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWdORemoteModuleFu64d)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWdOStreamModuleFu64d)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWdOSystemModuleFu64d)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, double value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWfODeviceModuleFu64f)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWfOInterfaceModuleFu64f)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWfORemoteModuleFu64f)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWfOStreamModuleFu64f)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWfOSystemModuleFu64f)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, float value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi16ODeviceModuleFu64i16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi16OInterfaceModuleFu64i16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi16ORemoteModuleFu64i16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi16OStreamModuleFu64i16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi16OSystemModuleFu64i16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi32ODeviceModuleFu64i32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi32OInterfaceModuleFu64i32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi32ORemoteModuleFu64i32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi32OStreamModuleFu64i32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi32OSystemModuleFu64i32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi64ODeviceModuleFu64i64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi64OInterfaceModuleFu64i64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi64ORemoteModuleFu64i64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi64OStreamModuleFu64i64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi64OSystemModuleFu64i64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi8ODeviceModuleFu64i8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi8OInterfaceModuleFu64i8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi8ORemoteModuleFu64i8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi8OStreamModuleFu64i8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWi8OSystemModuleFu64i8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, int8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWsODeviceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWsOInterfaceModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWsORemoteModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWsOStreamModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWsOSystemModuleFu64s)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, size_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu16ODeviceModuleFu64u16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu16OInterfaceModuleFu64u16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu16ORemoteModuleFu64u16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu16OStreamModuleFu64u16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu16OSystemModuleFu64u16)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint16_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu32ODeviceModuleFu64u32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu32OInterfaceModuleFu64u32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu32ORemoteModuleFu64u32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu32OStreamModuleFu64u32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu32OSystemModuleFu64u32)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint32_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu64ODeviceModuleFu64u64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu64OInterfaceModuleFu64u64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu64ORemoteModuleFu64u64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu64OStreamModuleFu64u64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu64OSystemModuleFu64u64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint64_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu8ODeviceModuleFu64u8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu8OInterfaceModuleFu64u8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu8ORemoteModuleFu64u8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu8OStreamModuleFu64u8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGST_gcWritePortValueWu8OSystemModuleFu64u8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t address, uint8_t value);
CEGRABBER_API_P(PeuEGST_getBufferDataFs)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoASsFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoASv_std_stringFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoASvcFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoA_CINFOFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAb8FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAcptrFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAdFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAfFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAi16FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAi32FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAi64FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAi8FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAsFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAu16FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAu32FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAu64FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAu8FsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAu8pFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_getBufferInfoAvptrFsBIC)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferIndex, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGST_getDevicePortFi)(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGST_getFloatODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGST_getFloatOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGST_getFloatORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGST_getFloatOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGST_getFloatOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGST_getHeight)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASsODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASsOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASsOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASsOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASv_std_stringODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASv_std_stringOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASv_std_stringOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASv_std_stringOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASvcODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASvcOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASvcOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoASvcOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoA_CINFOODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoA_CINFOOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoA_CINFOOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoA_CINFOOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAb8ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAb8OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAb8OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAb8OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAcptrODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAcptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAcptrOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAcptrOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAdODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAdOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAdOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAdOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, double *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAfODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAfOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAfOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAfOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, float *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi16ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi16OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi16OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi16OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi32ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi32OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi32OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi32OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi64ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi64OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi64OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi64OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi8ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi8OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi8OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAi8OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAsODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAsOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAsOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAsOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu16ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu16OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu16OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu16OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu32ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu32OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu32OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu32OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu64ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu64OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu64OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu64OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8ODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8OInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8OStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8OSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8pODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8pOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8pOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAu8pOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAvptrODeviceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAvptrOInterfaceModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAvptrOStreamModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGST_getInfoAvptrOSystemModuleFi32)(Eur_EGrabber_CallbackSingleThread egrabberBox, int32_t cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGST_getIntegerODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getIntegerOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getIntegerORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getIntegerOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getIntegerOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGST_getInterfacePortFi)(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGST_getLastEventGrabberIndex)(Eur_EGrabber_CallbackSingleThread egrabberBox, int *returnValue);
CEGRABBER_API_P(PeuEGST_getPayloadSize)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_getPixelFormat)(Eur_EGrabber_CallbackSingleThread egrabberBox, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_getRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_getRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_getRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_getRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGST_getRemotePortFi)(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGST_getStreamPortFi)(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGST_getStringDataODeviceModuleFccpSvc)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_getStringDataOInterfaceModuleFccpSvc)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_getStringDataORemoteModuleFccpSvc)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_getStringDataOStreamModuleFccpSvc)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_getStringDataOSystemModuleFccpSvc)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGST_getStringListODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringListOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringListORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringListOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringListOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getStringOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGST_getSystemPortFi)(Eur_EGrabber_CallbackSingleThread egrabberBox, int ix, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGST_getWidth)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t *returnValue);
CEGRABBER_API_P(PeuEGST_interruptScriptFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *scriptId);
CEGRABBER_API_P(PeuEGST_invalidateODeviceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGST_invalidateOInterfaceModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGST_invalidateORemoteModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGST_invalidateOStreamModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGST_invalidateOSystemModuleFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature);
CEGRABBER_API_P(PeuEGST_isOpenODeviceModule)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_isOpenOInterfaceModule)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_isOpenORemoteModule)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_isOpenOStreamModule)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_isOpenOSystemModule)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_mementoFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *text);
CEGRABBER_API_P(PeuEGST_mementoFucucccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char verbosity, unsigned char kind, const char *text);
CEGRABBER_API_P(PeuEGST_mementoWaveDownFucuc)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGST_mementoWaveNoValueFucuc)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGST_mementoWaveResetFucuc)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGST_mementoWaveUpFucuc)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGST_mementoWaveValueFucucu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, unsigned char kind, unsigned char id, uint64_t value);
CEGRABBER_API_P(PeuEGST_onCicEventFEur_CicData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CicData ref_data);
CEGRABBER_API_P(PeuEGST_onCxpDeviceEventFEur_CxpDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpDeviceData ref_data);
CEGRABBER_API_P(PeuEGST_onCxpInterfaceEventFEur_CxpInterfaceData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_CxpInterfaceData ref_data);
CEGRABBER_API_P(PeuEGST_onDataStreamEventFEur_DataStreamData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DataStreamData ref_data);
CEGRABBER_API_P(PeuEGST_onDeviceErrorEventFEur_DeviceErrorData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_DeviceErrorData ref_data);
CEGRABBER_API_P(PeuEGST_onIoToolboxEventFEur_IoToolboxData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_IoToolboxData ref_data);
CEGRABBER_API_P(PeuEGST_onNewBufferEventFEur_NewBufferData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_data);
CEGRABBER_API_P(PeuEGST_onRemoteDeviceEventFEur_RemoteDeviceData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_RemoteDeviceData ref_data);
CEGRABBER_API_P(PeuEGST_onScriptUiCallbackFccpvpSm_std_string_std_stringSs)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *operation, void *context, std_map_std_string_std_string ref_args, std_string ref_value, GENAPI_UI_CALLBACK_RET_CODE *returnValue);
CEGRABBER_API_P(PeuEGST_pushFEur_NewBufferData)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_NewBufferData ref_buffer);
CEGRABBER_API_P(PeuEGST_queueFEur_BufferIndexRange)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGST_reallocBuffersFs)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_reallocBuffersFss)(Eur_EGrabber_CallbackSingleThread egrabberBox, size_t bufferCount, size_t bufferSize /* def=0 */, Eur_BufferIndexRange *returnValue);
CEGRABBER_API_P(PeuEGST_resetBufferQueue)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_resetBufferQueueFEur_BufferIndexRange)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGST_revokeFEur_BufferIndexRange)(Eur_EGrabber_CallbackSingleThread egrabberBox, Eur_BufferIndexRange ref_range);
CEGRABBER_API_P(PeuEGST_runScriptFccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script);
CEGRABBER_API_P(PeuEGST_runScriptFccpvp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *script, void *context /* def=0 */);
CEGRABBER_API_P(PeuEGST_setCicEventCallbackF_CECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CicEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setCxpDeviceEventCallbackF_CDECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setCxpInterfaceEventCallbackF_CIECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_CxpInterfaceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setDataStreamEventCallbackF_DSECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DataStreamEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setDeviceErrorEventCallbackF_DEECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_DeviceErrorEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setFloatODeviceModuleFccpd)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGST_setFloatOInterfaceModuleFccpd)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGST_setFloatORemoteModuleFccpd)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGST_setFloatOStreamModuleFccpd)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGST_setFloatOSystemModuleFccpd)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, double value);
CEGRABBER_API_P(PeuEGST_setIntegerODeviceModuleFccpi64)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGST_setIntegerOInterfaceModuleFccpi64)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGST_setIntegerORemoteModuleFccpi64)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGST_setIntegerOStreamModuleFccpi64)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGST_setIntegerOSystemModuleFccpi64)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGST_setIoToolboxEventCallbackF_ITECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_IoToolboxEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setNewBufferEventCallbackF_NBECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_NewBufferEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setRegisterODeviceModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_setRegisterOInterfaceModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_setRegisterORemoteModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_setRegisterOStreamModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_setRegisterOSystemModuleFccpvps)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGST_setRemoteDeviceEventCallbackF_RDECallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_RemoteDeviceEventCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setScriptUiCallbackFScriptUiCallbackvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ScriptUiCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setStringODeviceModuleFccpccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGST_setStringOInterfaceModuleFccpccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGST_setStringORemoteModuleFccpccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGST_setStringOStreamModuleFccpccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGST_setStringOSystemModuleFccpccp)(Eur_EGrabber_CallbackSingleThread egrabberBox, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGST_setThreadStartCallbackF_TStartCvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStartCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_setThreadStopCallbackF_TStopCvp)(Eur_EGrabber_CallbackSingleThread egrabber, Euresys_ThreadStopCallback callback, void *context);
CEGRABBER_API_P(PeuEGST_shouldReallocBuffers)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_shouldReannounceBuffers)(Eur_EGrabber_CallbackSingleThread egrabberBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGST_shutdown)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_start)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGST_startFu64)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */);
CEGRABBER_API_P(PeuEGST_startFu64b8)(Eur_EGrabber_CallbackSingleThread egrabberBox, uint64_t frameCount /* def=GENTL_INFINITE */, bool8_t controlRemoteDevice /* def=true */);
CEGRABBER_API_P(PeuEGST_stop)(Eur_EGrabber_CallbackSingleThread egrabberBox);
CEGRABBER_API_P(PeuEGenTL_create)(Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFb8)(bool8_t shared, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFb8ccp)(bool8_t shared, const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFccp)(const char *path /* def=getEuresysCtiPath() */, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFccpb8)(const char *path /* def=getEuresysCtiPath() */, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFcp)(const char *path, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_createFcpb8)(const char *path, bool8_t shared /* def=true */, Eur_EGenTL *egentlBox);
CEGRABBER_API_P(PeuEGenTL_destroy)(Eur_EGenTL egentlBox);
CEGRABBER_API_P(PeuEGenTL_devCloseFDH)(Eur_EGenTL egentlBox, DEV_HANDLE devh);
CEGRABBER_API_P(PeuEGenTL_devGetDataStreamIDFDHu32)(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t index, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoASsFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoASv_std_stringFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoASvcFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoA_CINFOFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAb8FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAcptrFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAdFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAfFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAi16FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAi32FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAi64FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAi8FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAsFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAu16FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAu32FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAu64FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAu8FDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAu8pFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetInfoAvptrFDHDIC)(Eur_EGenTL egentlBox, DEV_HANDLE devh, DEVICE_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetNumDataStreamsFDH)(Eur_EGenTL egentlBox, DEV_HANDLE devh, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetParentFDH)(Eur_EGenTL egentlBox, DEV_HANDLE devh, IF_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_devGetPortFDH)(Eur_EGenTL egentlBox, DEV_HANDLE devh, PORT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_devOpenDataStreamFDHccp)(Eur_EGenTL egentlBox, DEV_HANDLE devh, const char *dsID, DS_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAllocAndAnnounceBufferFDHs)(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAllocAndAnnounceBufferFDHsvp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAllocAndAnnounceBuffersFDHsSv_BH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, size_t size, std_vector_BUFFER_HANDLE ref_buffers);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceBufferFDHvps)(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceBufferFDHvpsvp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *buffer, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceBusBufferFDHu64s)(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceBusBufferFDHu64svp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint64_t busAddress, size_t size, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceDeviceBufferFDHvpsMT)(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsAnnounceDeviceBufferFDHvpsMTvp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, void *deviceAddress, size_t size, MEMORY_TYPE memoryType, void *userPointer /* def=0 */, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsCloseFDH)(Eur_EGenTL egentlBox, DS_HANDLE dsh);
CEGRABBER_API_P(PeuEGenTL_dsFlushQueueFDHAQT)(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_QUEUE_TYPE operation);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferIDFDHu32)(Eur_EGenTL egentlBox, DS_HANDLE dsh, uint32_t index, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoASsFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoASv_std_stringFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoASvcFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoA_CINFOFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAb8FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAcptrFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAdFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAfFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAi16FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAi32FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAi64FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAi8FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAsFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAu16FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAu32FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAu64FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAu8FDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAu8pFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoAvptrFDHBHBIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, BUFFER_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferInfoFDHBH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, Eur_BufferInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoASsFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoASv_std_stringFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoASvcFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoA_CINFOFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAb8FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAcptrFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAdFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAfFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAi16FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAi32FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAi64FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAi8FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAsFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAu16FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAu32FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAu64FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAu8FDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAu8pFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetBufferPartInfoAvptrFDHBHu32BPIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t index, BUFFER_PART_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoASsFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoASv_std_stringFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoASvcFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoA_CINFOFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAb8FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAcptrFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAdFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAfFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAi16FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAi32FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAi64FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAi8FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAsFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAu16FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAu32FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAu64FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAu8FDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAu8pFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetInfoAvptrFDHSIC)(Eur_EGenTL egentlBox, DS_HANDLE dsh, STREAM_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetNumBufferPartsFDHBH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsGetParentFDH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, DEV_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_dsQueueBufferFDHBH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh);
CEGRABBER_API_P(PeuEGenTL_dsQueueBuffersFDHSv_BH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers);
CEGRABBER_API_P(PeuEGenTL_dsRevokeBufferFDHBH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh);
CEGRABBER_API_P(PeuEGenTL_dsRevokeBufferFDHBHvpp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_dsRevokeBufferFDHBHvppvpp)(Eur_EGenTL egentlBox, DS_HANDLE dsh, BUFFER_HANDLE bh, void **buffer /* def=0 */, void **userPointer /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_dsRevokeBuffersFDHSv_BH)(Eur_EGenTL egentlBox, DS_HANDLE dsh, std_vector_BUFFER_HANDLE ref_buffers);
CEGRABBER_API_P(PeuEGenTL_dsStartAcquisitionFDH)(Eur_EGenTL egentlBox, DS_HANDLE dsh);
CEGRABBER_API_P(PeuEGenTL_dsStartAcquisitionFDHASF)(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */);
CEGRABBER_API_P(PeuEGenTL_dsStartAcquisitionFDHASFu64)(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_START_FLAGS flags /* def=ACQ_START_FLAGS_DEFAULT */, uint64_t count /* def=GENTL_INFINITE */);
CEGRABBER_API_P(PeuEGenTL_dsStopAcquisitionFDH)(Eur_EGenTL egentlBox, DS_HANDLE dsh);
CEGRABBER_API_P(PeuEGenTL_dsStopAcquisitionFDHASF)(Eur_EGenTL egentlBox, DS_HANDLE dsh, ACQ_STOP_FLAGS flags /* def=ACQ_STOP_FLAGS_DEFAULT */);
CEGRABBER_API_P(PeuEGenTL_eventFlushFEH)(Eur_EGenTL egentlBox, EVENT_HANDLE eh);
CEGRABBER_API_P(PeuEGenTL_eventGetDataFEHvpsu64)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, void *buffer, size_t size, uint64_t timeout, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoASsFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoASv_std_stringFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoASvcFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoA_CINFOFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAb8FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAcptrFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAdFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAfFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAi16FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAi32FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAi64FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAi8FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAsFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAu16FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAu32FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAu64FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAu8FEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAu8pFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetDataInfoAvptrFEHvpsEDIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, const void *buffer, size_t size, EVENT_DATA_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoASsFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoASv_std_stringFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoASvcFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoA_CINFOFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAb8FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAcptrFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAdFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAfFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAi16FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAi32FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAi64FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAi8FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAsFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAu16FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAu32FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAu64FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAu8FEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAu8pFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventGetInfoAvptrFEHEIC)(Eur_EGenTL egentlBox, EVENT_HANDLE eh, EVENT_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_eventKillFEH)(Eur_EGenTL egentlBox, EVENT_HANDLE eh);
CEGRABBER_API_P(PeuEGenTL_eventKillQuietFEH)(Eur_EGenTL egentlBox, EVENT_HANDLE eh);
CEGRABBER_API_P(PeuEGenTL_eventsGetDataFSv_EEGDEu64p)(Eur_EGenTL egentlBox, std_vector_EURESYS_EVENT_GET_DATA_ENTRY ref_entries, uint64_t *timeout);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoASsFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoASv_std_stringFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoASvcFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoA_CINFOFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAb8FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAcptrFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAdFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAfFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAi16FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAi32FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAi64FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAi8FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAsFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAu16FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAu32FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAu64FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAu8FTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAu8pFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetInfoAvptrFTIC)(Eur_EGenTL egentlBox, TL_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetNumPortURLsFPH)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoASsFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoASv_std_stringFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoASvcFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoA_CINFOFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAb8FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAcptrFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAdFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAfFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAi16FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAi32FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAi64FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAi8FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAsFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAu16FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAu32FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAu64FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAu8FPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAu8pFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortInfoAvptrFPHPIC)(Eur_EGenTL egentlBox, PORT_HANDLE ph, PORT_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLFPH)(Eur_EGenTL egentlBox, PORT_HANDLE ph, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoASsFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoASv_std_stringFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoASvcFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoA_CINFOFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAb8FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAcptrFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAdFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAfFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAi16FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAi32FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAi64FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAi8FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAsFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAu16FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAu32FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAu64FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAu8FPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAu8pFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcGetPortURLInfoAvptrFPHu32UIC)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint32_t index, URL_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcReadPortDataFPHu64vps)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, void *data, size_t size);
CEGRABBER_API_P(PeuEGenTL_gcReadPortFPHu64)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcReadPortFPHu64Svc)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGenTL_gcReadPortStackedFPHSv_PRSE)(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries);
CEGRABBER_API_P(PeuEGenTL_gcReadPortStringFPHu64s)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, size_t size, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcRegisterEventFEHET)(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event, EVENT_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_gcUnregisterEventFEHET)(Eur_EGenTL egentlBox, EVENTSRC_HANDLE h, EVENT_TYPE event);
CEGRABBER_API_P(PeuEGenTL_gcWritePortDataFPHu64vps)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, const void *data, size_t size);
CEGRABBER_API_P(PeuEGenTL_gcWritePortFPHu64Svc)(Eur_EGenTL egentlBox, PORT_HANDLE ph, uint64_t address, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGenTL_gcWritePortStackedFPHSv_PRSE)(Eur_EGenTL egentlBox, PORT_HANDLE h, std_vector_PORT_REGISTER_STACK_ENTRY ref_entries);
CEGRABBER_API_P(PeuEGenTL_genapiAttachEventFPHu64vps)(Eur_EGenTL egentlBox, PORT_HANDLE h, uint64_t eventId, const void *buffer, size_t size);
CEGRABBER_API_P(PeuEGenTL_genapiExecuteCommandFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature);
CEGRABBER_API_P(PeuEGenTL_genapiGetFloatFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiGetFloatWithDefaultFPHccpd)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double defaultValue, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiGetIntegerFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiGetIntegerWithDefaultFPHccpi64)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t defaultValue, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiGetRegisterFPHccpvps)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, void *data, size_t size);
CEGRABBER_API_P(PeuEGenTL_genapiGetStringDataFPHccpSvc)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_vector_char ref_data);
CEGRABBER_API_P(PeuEGenTL_genapiGetStringFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiGetStringListFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *what, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_genapiInterruptScriptFccp)(Eur_EGenTL egentlBox, const char *scriptId);
CEGRABBER_API_P(PeuEGenTL_genapiInvalidateFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature);
CEGRABBER_API_P(PeuEGenTL_genapiRunScriptFPHccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script);
CEGRABBER_API_P(PeuEGenTL_genapiRunScriptFPHccpGENAPI_UI_SCRIPT_CONTEXT_p)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_genapiRunScriptFSv_PHccp)(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script);
CEGRABBER_API_P(PeuEGenTL_genapiRunScriptFSv_PHccpGENAPI_UI_SCRIPT_CONTEXT_p)(Eur_EGenTL egentlBox, std_vector_PORT_HANDLE ref_handles, const char *script, GENAPI_UI_SCRIPT_CONTEXT *context /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_genapiSetFloatFPHccpd)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, double value);
CEGRABBER_API_P(PeuEGenTL_genapiSetIntegerFPHccpi64)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, int64_t value);
CEGRABBER_API_P(PeuEGenTL_genapiSetRegisterFPHccpvps)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const void *data, size_t size);
CEGRABBER_API_P(PeuEGenTL_genapiSetStringFPHccpccp)(Eur_EGenTL egentlBox, PORT_HANDLE h, const char *feature, const char *value);
CEGRABBER_API_P(PeuEGenTL_getTimestampUs)(Eur_EGenTL egentlBox, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifCloseFIH)(Eur_EGenTL egentlBox, IF_HANDLE ifh);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceIDFIHu32)(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t index, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoASsFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoASv_std_stringFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoASvcFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoA_CINFOFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAb8FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAcptrFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAdFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAfFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAi16FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAi32FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAi64FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAi8FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAsFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAu16FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAu32FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAu64FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAu8FIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAu8pFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetDeviceInfoAvptrFIHccpIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, INTERFACE_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoASsFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoASv_std_stringFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoASvcFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoA_CINFOFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAb8FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAcptrFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAdFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAfFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAi16FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAi32FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAi64FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAi8FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAsFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAu16FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAu32FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAu64FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAu8FIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAu8pFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetInfoAvptrFIHIIC)(Eur_EGenTL egentlBox, IF_HANDLE ifh, INTERFACE_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetNumDevicesFIH)(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifGetParentFIH)(Eur_EGenTL egentlBox, IF_HANDLE ifh, TL_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifOpenDeviceFIHccp)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEV_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifOpenDeviceFIHccpDAF)(Eur_EGenTL egentlBox, IF_HANDLE ifh, const char *devID, DEVICE_ACCESS_FLAGS flags /* def=defaultDeviceOpenFlags */, DEV_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifUpdateDeviceListFIH)(Eur_EGenTL egentlBox, IF_HANDLE ifh, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_ifUpdateDeviceListFIHu64)(Eur_EGenTL egentlBox, IF_HANDLE ifh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageConvertF_ICI_p_ICO_p)(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output);
CEGRABBER_API_P(PeuEGenTL_imageConvertF_ICI_p_ICO_pImageConvertROI_p)(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const ImageConvertOutput *ref_output, const ImageConvertROI *roi /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_imageGetBitsPerPixelFccp)(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageGetBytesPerPixelFccp)(Eur_EGenTL egentlBox, const char *format, unsigned int *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageGetFImageId)(Eur_EGenTL egentlBox, ImageId id, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageGetFImageIdsp)(Eur_EGenTL egentlBox, ImageId id, size_t *outSize /* def=0 */, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageGetPixelFormatFu64)(Eur_EGenTL egentlBox, uint64_t format, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_imageGetPixelFormatValueFccpui)(Eur_EGenTL egentlBox, const char *format, unsigned int ns, unsigned int *returnValue);
CEGRABBER_API_P(PeuEGenTL_imagePrepareBuffersFss)(Eur_EGenTL egentlBox, size_t bufferSize, size_t count);
CEGRABBER_API_P(PeuEGenTL_imageReleaseFImageId)(Eur_EGenTL egentlBox, ImageId id);
CEGRABBER_API_P(PeuEGenTL_imageSaveToDiskF_ICI_pccp)(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath);
CEGRABBER_API_P(PeuEGenTL_imageSaveToDiskF_ICI_pccpi64)(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */);
CEGRABBER_API_P(PeuEGenTL_imageSaveToDiskF_ICI_pccpi64_ISTDP_p)(Eur_EGenTL egentlBox, const ImageConvertInput *ref_input, const char *filepath, int64_t index /* def=-1 */, const ImageSaveToDiskParams *params /* def=0 */);
CEGRABBER_API_P(PeuEGenTL_imageTrimBuffers)(Eur_EGenTL egentlBox);
CEGRABBER_API_P(PeuEGenTL_isShared)(Eur_EGenTL egentlBox, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_lockUpdates)(Eur_EGenTL egentlBox);
CEGRABBER_API_P(PeuEGenTL_mementoFccp)(Eur_EGenTL egentlBox, const char *text);
CEGRABBER_API_P(PeuEGenTL_mementoFucucccp)(Eur_EGenTL egentlBox, unsigned char verbosity, unsigned char kind, const char *text);
CEGRABBER_API_P(PeuEGenTL_mementoWaveDownFucuc)(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGenTL_mementoWaveNoValueFucuc)(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGenTL_mementoWaveResetFucuc)(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGenTL_mementoWaveUpFucuc)(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id);
CEGRABBER_API_P(PeuEGenTL_mementoWaveValueFucucu64)(Eur_EGenTL egentlBox, unsigned char kind, unsigned char id, uint64_t value);
CEGRABBER_API_P(PeuEGenTL_tlCloseFTH)(Eur_EGenTL egentlBox, TL_HANDLE tlh);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoASsFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoASv_std_stringFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoASvcFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoA_CINFOFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAb8FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAcptrFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAdFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAfFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAi16FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAi32FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAi64FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAi8FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAsFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAu16FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAu32FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAu64FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAu8FTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAu8pFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInfoAvptrFTHTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, TL_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceIDFTHu32)(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t index, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoASsFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoASv_std_stringFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_std_string *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoASvcFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, std_vector_char *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoA_CINFOFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, Eur_InfoCommandInfo *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAb8FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAcptrFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, char * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAdFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, double *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAfFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, float *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAi16FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAi32FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAi64FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAi8FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, int8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAsFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, size_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAu16FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint16_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAu32FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAu64FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint64_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAu8FTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAu8pFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, uint8_t * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetInterfaceInfoAvptrFTHccpTIC)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, TL_INFO_CMD cmd, void * *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlGetNumInterfacesFTH)(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint32_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlOpen)(Eur_EGenTL egentlBox, TL_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlOpenInterfaceFTHccp)(Eur_EGenTL egentlBox, TL_HANDLE tlh, const char *ifID, IF_HANDLE *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlUpdateInterfaceListFTH)(Eur_EGenTL egentlBox, TL_HANDLE tlh, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_tlUpdateInterfaceListFTHu64)(Eur_EGenTL egentlBox, TL_HANDLE tlh, uint64_t timeout /* def=GENTL_INFINITE */, bool8_t *returnValue);
CEGRABBER_API_P(PeuEGenTL_unlockUpdates)(Eur_EGenTL egentlBox);
CEGRABBER_API_P(PeuEurCINFO_destroy)(Eur_InfoCommandInfo info);
CEGRABBER_API_P(PeuEurCINFO_get_dataSize)(Eur_InfoCommandInfo info, size_t *returnValue);
CEGRABBER_API_P(PeuEurCINFO_get_dataType)(Eur_InfoCommandInfo info, int *returnValue);
CEGRABBER_API_P(PeuEurEGCameraInfo_create)(Eur_EGrabberCameraInfo *egrabbercamerainfoBox);
CEGRABBER_API_P(PeuEurEGCameraInfo_destroy)(Eur_EGrabberCameraInfo egrabbercamerainfoBox);
CEGRABBER_API_P(PeuEurEGCameraInfo_get_script)(Eur_EGrabberCameraInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGCameraInfo_grabber_atFs)(Eur_EGrabberCameraInfo info, size_t index, Eur_EGrabberInfo *returnValue);
CEGRABBER_API_P(PeuEurEGCameraInfo_grabber_count)(Eur_EGrabberCameraInfo info, size_t *returnValue);
CEGRABBER_API_P(PeuEurEGCameraInfo_grabbers_push_backFEurEGInfo)(Eur_EGrabberCameraInfo info, Eur_EGrabberInfo ref_grabber);
CEGRABBER_API_P(PeuEurEGDiscovery_cameraCount)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_camerasFccp)(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, Eur_EGrabberCameraInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_camerasFccpi)(Eur_EGrabberDiscovery egrabberdiscoveryBox, const char *deviceUserID, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_camerasFi)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberCameraInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_camerasFii)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, int streamIndex /* def=0 */, Eur_EGrabberCameraInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_createFEur_EGenTL)(Eur_EGenTL ref_gentl, Eur_EGrabberDiscovery *egrabberdiscoveryBox);
CEGRABBER_API_P(PeuEurEGDiscovery_destroy)(Eur_EGrabberDiscovery egrabberdiscoveryBox);
CEGRABBER_API_P(PeuEurEGDiscovery_deviceCountFi)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_deviceInfoFii)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, Eur_EGrabberInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_discover)(Eur_EGrabberDiscovery egrabberdiscoveryBox);
CEGRABBER_API_P(PeuEurEGDiscovery_discoverFb8)(Eur_EGrabberDiscovery egrabberdiscoveryBox, bool8_t findCameras /* def=true */);
CEGRABBER_API_P(PeuEurEGDiscovery_egrabberCount)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_egrabbersFi)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int index, Eur_EGrabberInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_interfaceCount)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_interfaceInfoFi)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, Eur_EGrabberInfo *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_streamCountFii)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int *returnValue);
CEGRABBER_API_P(PeuEurEGDiscovery_streamInfoFiii)(Eur_EGrabberDiscovery egrabberdiscoveryBox, int interfaceIndex, int deviceIndex, int streamIndex, Eur_EGrabberInfo *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_create)(Eur_EGrabberInfo *egrabberinfoBox);
CEGRABBER_API_P(PeuEurEGInfo_destroy)(Eur_EGrabberInfo egrabberinfoBox);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceDescription)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceID)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceIndex)(Eur_EGrabberInfo info, int *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceLicenseStatus)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceModelName)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceSerialNumber)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceUserID)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_deviceVendorName)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_fanStatus)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_firmwareStatus)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_interfaceID)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_interfaceIndex)(Eur_EGrabberInfo info, int *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_isDeviceReadOnly)(Eur_EGrabberInfo info, bool8_t *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_isRemoteAvailable)(Eur_EGrabberInfo info, bool8_t *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_licenseStatus)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_streamDescription)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_streamID)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_streamIndex)(Eur_EGrabberInfo info, int *returnValue);
CEGRABBER_API_P(PeuEurEGInfo_get_tlType)(Eur_EGrabberInfo info, std_string *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_1)(Eur_OneOfAll oneofall, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_2)(Eur_OneOfAll oneofall, Eur_IoToolboxData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_3)(Eur_OneOfAll oneofall, Eur_CicData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_4)(Eur_OneOfAll oneofall, Eur_DataStreamData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_5)(Eur_OneOfAll oneofall, Eur_CxpInterfaceData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_6)(Eur_OneOfAll oneofall, Eur_DeviceErrorData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_7)(Eur_OneOfAll oneofall, Eur_CxpDeviceData *returnValue);
CEGRABBER_API_P(PeuEurOOA_at_position_8)(Eur_OneOfAll oneofall, Eur_RemoteDeviceData *returnValue);
CEGRABBER_API_P(PeuEurOOA_create)(Eur_OneOfAll *oneofall);
CEGRABBER_API_P(PeuEurOOA_destroy)(Eur_OneOfAll oneofall);
CEGRABBER_API_P(PeuGenTLMemory_create)(Eur_GenTLMemory *gentlmemoryBox);
CEGRABBER_API_P(PeuGenTLMemory_createFs)(size_t bufferSize /* def=0 */, Eur_GenTLMemory *gentlmemoryBox);
CEGRABBER_API_P(PeuGenTLMemory_createFsvp)(size_t bufferSize /* def=0 */, void *userPointer /* def=0 */, Eur_GenTLMemory *gentlmemoryBox);
CEGRABBER_API_P(PeuGenTLMemory_destroy)(Eur_GenTLMemory gentlmemoryBox);
CEGRABBER_API_P(PeuGigelink)(std_string *returnValue);
CEGRABBER_API_P(PeuGrablink)(std_string *returnValue);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setCallbackCriticalError)();
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_client_error)(Eur_client_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_cti_loading_error)(Eur_cti_loading_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_genapi_error)(Eur_genapi_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_gentl_error)(Eur_gentl_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_internal_error)(Eur_internal_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_missing_gentl_symbol)(Eur_missing_gentl_symbol ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_not_allowed)(Eur_not_allowed ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_thread_error)(Eur_thread_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_unexpected_data_size)(Eur_unexpected_data_size ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFEur_unexpected_data_type)(Eur_unexpected_data_type ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFstd_exception)(std_exception ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFstd_logic_error)(std_logic_error ref_error);
CEGRABBER_API_P(PeuInternal_lastCallbackError_setFstd_runtime_error)(std_runtime_error ref_error);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_client_error)(Eur_client_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_cti_loading_error)(Eur_cti_loading_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_genapi_error)(Eur_genapi_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_gentl_error)(Eur_gentl_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_internal_error)(Eur_internal_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_missing_gentl_symbol)(Eur_missing_gentl_symbol *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_not_allowed)(Eur_not_allowed *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_thread_error)(Eur_thread_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_unexpected_data_size)(Eur_unexpected_data_size *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAEur_unexpected_data_type)(Eur_unexpected_data_type *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAstd_exception)(std_exception *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAstd_logic_error)(std_logic_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getAstd_runtime_error)(std_runtime_error *returnValue);
CEGRABBER_API_P(PeuInternal_lastError_getCode)(CEGRABBER_ERROR *returnValue);
CEGRABBER_API_P(PeuIoToolboxDataAIoToolboxData)(Eur_IoToolboxData data, const struct Euresys_IoToolboxData_s * *returnValue);
CEGRABBER_API_P(PeuIoToolboxData_create)(Eur_IoToolboxData *iotoolboxdataBox);
CEGRABBER_API_P(PeuIoToolboxData_destroy)(Eur_IoToolboxData iotoolboxdataBox);
CEGRABBER_API_P(PeuNewBufferDataANewBufferData)(Eur_NewBufferData data, const struct Euresys_NewBufferData_s * *returnValue);
CEGRABBER_API_P(PeuNewBufferData_create)(Eur_NewBufferData *newbufferdataBox);
CEGRABBER_API_P(PeuNewBufferData_destroy)(Eur_NewBufferData newbufferdataBox);
CEGRABBER_API_P(PeuNvidiaRdmaMemory_createFvps)(void *deviceAddress, size_t size, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox);
CEGRABBER_API_P(PeuNvidiaRdmaMemory_createFvpsvp)(void *deviceAddress, size_t size, void *userPointer /* def=0 */, Eur_NvidiaRdmaMemory *nvidiardmamemoryBox);
CEGRABBER_API_P(PeuNvidiaRdmaMemory_destroy)(Eur_NvidiaRdmaMemory nvidiardmamemoryBox);
CEGRABBER_API_P(PeuPlaylink)(std_string *returnValue);
CEGRABBER_API_P(PeuRemoteDeviceDataARemoteDeviceData)(Eur_RemoteDeviceData data, const struct Euresys_RemoteDeviceData_s * *returnValue);
CEGRABBER_API_P(PeuRemoteDeviceData_create)(Eur_RemoteDeviceData *remotedevicedataBox);
CEGRABBER_API_P(PeuRemoteDeviceData_destroy)(Eur_RemoteDeviceData remotedevicedataBox);
CEGRABBER_API_P(PeuUserMemoryArray_createFEur_UserMemorys)(Eur_UserMemory ref_memory, size_t bufferSize, Eur_UserMemoryArray *usermemoryarrayBox);
CEGRABBER_API_P(PeuUserMemoryArray_destroy)(Eur_UserMemoryArray usermemoryarrayBox);
CEGRABBER_API_P(PeuUserMemory_createFvps)(void *base, size_t size, Eur_UserMemory *usermemoryBox);
CEGRABBER_API_P(PeuUserMemory_createFvpsvp)(void *base, size_t size, void *userPointer /* def=0 */, Eur_UserMemory *usermemoryBox);
CEGRABBER_API_P(PeuUserMemory_destroy)(Eur_UserMemory usermemoryBox);
CEGRABBER_API_P(Peuaction_GenApiActionBuilder_destroy)(Eur_action_GenApiActionBuilder action);
CEGRABBER_API_P(Peuaction_GenApiActionBuilder_string)(Eur_action_GenApiActionBuilder action, std_string *returnValue);
CEGRABBER_API_P(Peuaction_GenApiActionyBuilder_destroy)(Eur_action_GenApiActionBuilder action);
CEGRABBER_API_P(Peuaction_declareFloat)(Eur_action_GenApiActionBuilder *returnValue);
CEGRABBER_API_P(Peuaction_declareInteger)(Eur_action_GenApiActionBuilder *returnValue);
CEGRABBER_API_P(Peuaction_declareString)(Eur_action_GenApiActionBuilder *returnValue);
CEGRABBER_API_P(Peuaction_undeclare)(Eur_action_GenApiActionBuilder *returnValue);
CEGRABBER_API_P(PeucheckAllBoxedTypeCount)();
CEGRABBER_API_P(Peuclient_error_createFccp)(const char *msg, Eur_client_error *client_errorBox);
CEGRABBER_API_P(Peuclient_error_destroy)(Eur_client_error client_errorBox);
CEGRABBER_API_P(Peucti_loading_error_createFccp)(const char *path, Eur_cti_loading_error *cti_loading_errorBox);
CEGRABBER_API_P(Peucti_loading_error_destroy)(Eur_cti_loading_error cti_loading_errorBox);
CEGRABBER_API_P(Peufrom_box_EurCINFOFcInfoCommandInfo_p)(Eur_InfoCommandInfo info, cInfoCommandInfo *cInfo);
CEGRABBER_API_P(Peufrom_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p)(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1);
CEGRABBER_API_P(Peufrom_box_EurEGInfoFcEGrabberInfoExt1_p)(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1);
CEGRABBER_API_P(Peufrom_box_EurEGInfoFcEGrabberInfoExt2_p)(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2);
CEGRABBER_API_P(Peufrom_box_EurEGInfoFcEGrabberInfoExt3_p)(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3);
CEGRABBER_API_P(Peufrom_box_EurEGInfoFcEGrabberInfo_p)(Eur_EGrabberInfo info, cEGrabberInfo *cInfo);
CEGRABBER_API_P(Peufrom_box_Eur_BufferIndexRangeFspspb8_p)(Eur_BufferIndexRange range, size_t *begin, size_t *end, bool8_t *reverse);
CEGRABBER_API_P(Peufrom_box_Eur_BufferInfoFcBufferInfo_p)(Eur_BufferInfo info, cBufferInfo *cInfo);
CEGRABBER_API_P(Peufrom_box_Eur_cti_loading_error_path)(Eur_cti_loading_error error, std_string *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_genapi_error)(Eur_genapi_error error, GENAPI_ERROR_CODE *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_gentl_error_description)(Eur_gentl_error error, std_string *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_gentl_error_gc_err)(Eur_gentl_error error, GC_ERROR *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_missing_gentl_symbol_path)(Eur_missing_gentl_symbol error, std_string *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_missing_gentl_symbol_symbol)(Eur_missing_gentl_symbol error, std_string *returnValue);
CEGRABBER_API_P(Peufrom_box_Eur_unexpected_data_sizeFspsp)(Eur_unexpected_data_size error, size_t *expected, size_t *returned);
CEGRABBER_API_P(Peufrom_box_Eur_unexpected_data_type)(Eur_unexpected_data_type error, INFO_DATATYPE *returnValue);
CEGRABBER_API_P(Peufrom_box_std_stringFccppsp)(std_string string, const char **data, size_t *size);
CEGRABBER_API_P(Peufrom_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ppsp)(std_vector_BUFFER_HANDLE vector, const BUFFER_HANDLE **data, size_t *size);
CEGRABBER_API_P(Peufrom_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ppsp)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, const EURESYS_EVENT_GET_DATA_ENTRY **data, size_t *size);
CEGRABBER_API_P(Peufrom_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ppsp)(std_vector_PORT_HANDLE vector, const PORT_HANDLE **data, size_t *size);
CEGRABBER_API_P(Peufrom_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ppsp)(std_vector_PORT_REGISTER_STACK_ENTRY vector, const PORT_REGISTER_STACK_ENTRY **data, size_t *size);
CEGRABBER_API_P(Peufrom_box_std_vector_charFccppsp)(std_vector_char vector, const char **data, size_t *size);
CEGRABBER_API_P(Peugenapi_error_add_float_parameterFd)(Eur_genapi_error genapi_errorBox, double p);
CEGRABBER_API_P(Peugenapi_error_add_integer_parameterFi64)(Eur_genapi_error genapi_errorBox, int64_t p);
CEGRABBER_API_P(Peugenapi_error_add_string_parameterFcp)(Eur_genapi_error genapi_errorBox, const char *p);
CEGRABBER_API_P(Peugenapi_error_createFGEC)(GENAPI_ERROR_CODE code, Eur_genapi_error *genapi_errorBox);
CEGRABBER_API_P(Peugenapi_error_destroy)(Eur_genapi_error genapi_errorBox);
CEGRABBER_API_P(Peugenapi_error_float_parameterFs)(Eur_genapi_error genapi_errorBox, size_t index, double *returnValue);
CEGRABBER_API_P(Peugenapi_error_integer_parameterFs)(Eur_genapi_error genapi_errorBox, size_t index, int64_t *returnValue);
CEGRABBER_API_P(Peugenapi_error_parameter_count)(Eur_genapi_error genapi_errorBox, size_t *returnValue);
CEGRABBER_API_P(Peugenapi_error_parameter_typeFs)(Eur_genapi_error genapi_errorBox, size_t index, GENAPI_ERROR_PARAMETER_TYPE *returnValue);
CEGRABBER_API_P(Peugenapi_error_string_parameterASsFs)(Eur_genapi_error error, size_t index, std_string *returnValue);
CEGRABBER_API_P(Peugenapi_error_string_parameterFs)(Eur_genapi_error genapi_errorBox, size_t index, std_const_string *returnValue);
CEGRABBER_API_P(Peugentl_error_createFGE)(GC_ERROR err, Eur_gentl_error *gentl_errorBox);
CEGRABBER_API_P(Peugentl_error_createFGEccp)(GC_ERROR err, const char *description, Eur_gentl_error *gentl_errorBox);
CEGRABBER_API_P(Peugentl_error_destroy)(Eur_gentl_error gentl_errorBox);
CEGRABBER_API_P(PeugetEuresysCtiPath)(std_string *returnValue);
CEGRABBER_API_P(PeugetEventDescriptionFEDNC)(EVENT_DATA_NUMID_CUSTOM numid, std_string *returnValue);
CEGRABBER_API_P(PeugetEventFilterOCicData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterOCxpDeviceData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterOCxpInterfaceData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterODataStreamData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterODeviceErrorData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterOIoToolboxData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterONewBufferData)(size_t *returnValue);
CEGRABBER_API_P(PeugetEventFilterORemoteDeviceData)(size_t *returnValue);
CEGRABBER_API_P(Peuinternal_error_create)(Eur_internal_error *internal_errorBox);
CEGRABBER_API_P(Peuinternal_error_destroy)(Eur_internal_error internal_errorBox);
CEGRABBER_API_P(Peumissing_gentl_symbol_createFccpccp)(const char *path, const char *symbol, Eur_missing_gentl_symbol *missing_gentl_symbolBox);
CEGRABBER_API_P(Peumissing_gentl_symbol_destroy)(Eur_missing_gentl_symbol missing_gentl_symbolBox);
CEGRABBER_API_P(Peunot_allowed_create)(Eur_not_allowed *not_allowedBox);
CEGRABBER_API_P(Peunot_allowed_destroy)(Eur_not_allowed not_allowedBox);
CEGRABBER_API_P(Peuquery_GenApiQueryBuilder_destroy)(Eur_query_GenApiQueryBuilder query);
CEGRABBER_API_P(Peuquery_GenApiQueryBuilder_globFccp)(Eur_query_GenApiQueryBuilder query, const char *glob, std_string *returnValue);
CEGRABBER_API_P(Peuquery_GenApiQueryBuilder_regexFccp)(Eur_query_GenApiQueryBuilder query, const char *re, std_string *returnValue);
CEGRABBER_API_P(Peuquery_GenApiQueryBuilder_string)(Eur_query_GenApiQueryBuilder query, std_string *returnValue);
CEGRABBER_API_P(Peuquery_attributes)(Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_availableFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_categories)(Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_categoriesFb8)(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_categoriesOfFccp)(const char *category, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_categoriesOfFccpb8)(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_commandFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_declared)(Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_doneFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_enumEntriesFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_enumEntriesFccpb8)(const char *feature, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_features)(Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_featuresFb8)(bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_featuresOfFccp)(const char *category, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_featuresOfFccpb8)(const char *category, bool8_t availableOnly /* def=true */, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_implementedFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_infoFccpccp)(const char *feature, const char *what, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_interfacesFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_readableFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_sourceFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_writeableFccp)(const char *feature, Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peuquery_xml)(Eur_query_GenApiQueryBuilder *returnValue);
CEGRABBER_API_P(Peustd_const_string_create)(std_const_string *string);
CEGRABBER_API_P(Peustd_const_string_destroy)(std_const_string string);
CEGRABBER_API_P(Peustd_exception_createFccp)(const char *what, std_exception *error);
CEGRABBER_API_P(Peustd_exception_destroy)(std_exception error);
CEGRABBER_API_P(Peustd_exception_what)(std_exception error, const char * *returnValue);
CEGRABBER_API_P(Peustd_logic_error_createFccp)(const char *what, std_logic_error *error);
CEGRABBER_API_P(Peustd_logic_error_destroy)(std_logic_error error);
CEGRABBER_API_P(Peustd_logic_error_what)(std_logic_error error, const char * *returnValue);
CEGRABBER_API_P(Peustd_map_std_string_std_string_atFSm_std_string_std_stringSs)(std_map_std_string_std_string map, std_string key, std_string *returnValue);
CEGRABBER_API_P(Peustd_map_std_string_std_string_atFSs)(std_map_std_string_std_string map, std_string ref_key, std_string *returnValue);
CEGRABBER_API_P(Peustd_map_std_string_std_string_atFsSs_pSs_p)(std_map_std_string_std_string map, size_t index, std_string *returnKey, std_string *returnValue);
CEGRABBER_API_P(Peustd_map_std_string_std_string_create)(std_map_std_string_std_string *map);
CEGRABBER_API_P(Peustd_map_std_string_std_string_destroy)(std_map_std_string_std_string map);
CEGRABBER_API_P(Peustd_map_std_string_std_string_size)(std_map_std_string_std_string map, size_t *returnValue);
CEGRABBER_API_P(Peustd_runtime_error_createFccp)(const char *what, std_runtime_error *error);
CEGRABBER_API_P(Peustd_runtime_error_destroy)(std_runtime_error error);
CEGRABBER_API_P(Peustd_runtime_error_what)(std_runtime_error error, const char * *returnValue);
CEGRABBER_API_P(Peustd_string_assignFccp)(std_string string, const char *str);
CEGRABBER_API_P(Peustd_string_assign_operatorFSs)(std_string string, std_string str);
CEGRABBER_API_P(Peustd_string_c_str)(std_string string, const char * *returnValue);
CEGRABBER_API_P(Peustd_string_create)(std_string *string);
CEGRABBER_API_P(Peustd_string_destroy)(std_string string);
CEGRABBER_API_P(Peustd_vector_BH_push_backFBH)(std_vector_BUFFER_HANDLE vector, BUFFER_HANDLE item);
CEGRABBER_API_P(Peustd_vector_BUFFER_HANDLE_atFs)(std_vector_BUFFER_HANDLE vector, size_t pos, BUFFER_HANDLE *returnValue);
CEGRABBER_API_P(Peustd_vector_BUFFER_HANDLE_create)(std_vector_BUFFER_HANDLE *vector);
CEGRABBER_API_P(Peustd_vector_BUFFER_HANDLE_destroy)(std_vector_BUFFER_HANDLE vector);
CEGRABBER_API_P(Peustd_vector_BUFFER_HANDLE_size)(std_vector_BUFFER_HANDLE vector, size_t *returnValue);
CEGRABBER_API_P(Peustd_vector_EEGDE_push_backFEEGDE)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, EURESYS_EVENT_GET_DATA_ENTRY item);
CEGRABBER_API_P(Peustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_atFs)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t pos, EURESYS_EVENT_GET_DATA_ENTRY *returnValue);
CEGRABBER_API_P(Peustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_create)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector);
CEGRABBER_API_P(Peustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_destroy)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector);
CEGRABBER_API_P(Peustd_vector_EURESYS_EVENT_GET_DATA_ENTRY_size)(std_vector_EURESYS_EVENT_GET_DATA_ENTRY vector, size_t *returnValue);
CEGRABBER_API_P(Peustd_vector_PH_push_backFPH)(std_vector_PORT_HANDLE vector, PORT_HANDLE item);
CEGRABBER_API_P(Peustd_vector_PORT_HANDLE_atFs)(std_vector_PORT_HANDLE vector, size_t pos, PORT_HANDLE *returnValue);
CEGRABBER_API_P(Peustd_vector_PORT_HANDLE_create)(std_vector_PORT_HANDLE *vector);
CEGRABBER_API_P(Peustd_vector_PORT_HANDLE_destroy)(std_vector_PORT_HANDLE vector);
CEGRABBER_API_P(Peustd_vector_PORT_HANDLE_size)(std_vector_PORT_HANDLE vector, size_t *returnValue);
CEGRABBER_API_P(Peustd_vector_PORT_REGISTER_STACK_ENTRY_atFs)(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t pos, PORT_REGISTER_STACK_ENTRY *returnValue);
CEGRABBER_API_P(Peustd_vector_PORT_REGISTER_STACK_ENTRY_create)(std_vector_PORT_REGISTER_STACK_ENTRY *vector);
CEGRABBER_API_P(Peustd_vector_PORT_REGISTER_STACK_ENTRY_destroy)(std_vector_PORT_REGISTER_STACK_ENTRY vector);
CEGRABBER_API_P(Peustd_vector_PORT_REGISTER_STACK_ENTRY_size)(std_vector_PORT_REGISTER_STACK_ENTRY vector, size_t *returnValue);
CEGRABBER_API_P(Peustd_vector_PRSE_push_backFPRSE)(std_vector_PORT_REGISTER_STACK_ENTRY vector, PORT_REGISTER_STACK_ENTRY item);
CEGRABBER_API_P(Peustd_vector_char_atFs)(std_vector_char vector, size_t pos, char *returnValue);
CEGRABBER_API_P(Peustd_vector_char_create)(std_vector_char *vector);
CEGRABBER_API_P(Peustd_vector_char_destroy)(std_vector_char vector);
CEGRABBER_API_P(Peustd_vector_char_push_backFc)(std_vector_char vector, char item);
CEGRABBER_API_P(Peustd_vector_char_size)(std_vector_char vector, size_t *returnValue);
CEGRABBER_API_P(Peustd_vector_std_string_atFs)(std_vector_std_string vector, size_t pos, std_string *returnValue);
CEGRABBER_API_P(Peustd_vector_std_string_create)(std_vector_std_string *vector);
CEGRABBER_API_P(Peustd_vector_std_string_destroy)(std_vector_std_string vector);
CEGRABBER_API_P(Peustd_vector_std_string_size)(std_vector_std_string vector, size_t *returnValue);
CEGRABBER_API_P(Peuthread_error_createFccp)(const char *msg, Eur_thread_error *thread_errorBox);
CEGRABBER_API_P(Peuthread_error_destroy)(Eur_thread_error thread_errorBox);
CEGRABBER_API_P(Peuto_box_EurEGCameraInfoFcEGrabberCameraInfoExt1_p)(Eur_EGrabberCameraInfo info, cEGrabberCameraInfoExt1 *cInfoExt1);
CEGRABBER_API_P(Peuto_box_EurEGInfoFcEGrabberInfo)(cEGrabberInfo cInfo, Eur_EGrabberInfo *info);
CEGRABBER_API_P(Peuto_box_EurEGInfoFcEGrabberInfoExt1_p)(Eur_EGrabberInfo info, cEGrabberInfoExt1 *cInfoExt1);
CEGRABBER_API_P(Peuto_box_EurEGInfoFcEGrabberInfoExt2_p)(Eur_EGrabberInfo info, cEGrabberInfoExt2 *cInfoExt2);
CEGRABBER_API_P(Peuto_box_EurEGInfoFcEGrabberInfoExt3_p)(Eur_EGrabberInfo info, cEGrabberInfoExt3 *cInfoExt3);
CEGRABBER_API_P(Peuto_box_Eur_NewBufferDataFcst_NewBufferData_s_p)(const struct Euresys_NewBufferData_s *data, Eur_NewBufferData *returnValue);
CEGRABBER_API_P(Peuto_box_std_stringFccps)(const char *data, size_t size, std_string *string);
CEGRABBER_API_P(Peuto_box_std_vector_BUFFER_HANDLEFconst_BUFFER_HANDLE_ps)(const BUFFER_HANDLE *data, size_t size, std_vector_BUFFER_HANDLE *vector);
CEGRABBER_API_P(Peuto_box_std_vector_EURESYS_EVENT_GET_DATA_ENTRYFconst_EURESYS_EVENT_GET_DATA_ENTRY_ps)(const EURESYS_EVENT_GET_DATA_ENTRY *data, size_t size, std_vector_EURESYS_EVENT_GET_DATA_ENTRY *vector);
CEGRABBER_API_P(Peuto_box_std_vector_PORT_HANDLEFconst_PORT_HANDLE_ps)(const PORT_HANDLE *data, size_t size, std_vector_PORT_HANDLE *vector);
CEGRABBER_API_P(Peuto_box_std_vector_PORT_REGISTER_STACK_ENTRYFconst_PORT_REGISTER_STACK_ENTRY_ps)(const PORT_REGISTER_STACK_ENTRY *data, size_t size, std_vector_PORT_REGISTER_STACK_ENTRY *vector);
CEGRABBER_API_P(Peuto_box_std_vector_charFccps)(const char *data, size_t size, std_vector_char *vector);
CEGRABBER_API_P(Peuunexpected_data_size_createFss)(size_t expected, size_t returned, Eur_unexpected_data_size *unexpected_data_sizeBox);
CEGRABBER_API_P(Peuunexpected_data_size_destroy)(Eur_unexpected_data_size unexpected_data_sizeBox);
CEGRABBER_API_P(Peuunexpected_data_type_createFID)(INFO_DATATYPE type, Eur_unexpected_data_type *unexpected_data_typeBox);
CEGRABBER_API_P(Peuunexpected_data_type_destroy)(Eur_unexpected_data_type unexpected_data_typeBox);
#endif

#ifdef __cplusplus
} // extern "C"
} // namespace cEGrabber
} // namespace Internal
} // namespace EURESYS_NAMESPACE
#endif

#endif
