namespace EURESYS_NAMESPACE {
inline std::string getEventDescription(ge::EVENT_DATA_NUMID_CUSTOM numid) {
    switch (numid) {
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN1: return "Line Input Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN2: return "Line Input Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN3: return "Line Input Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN4: return "Line Input Tool 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN5: return "Line Input Tool 5";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN6: return "Line Input Tool 6";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN7: return "Line Input Tool 7";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_LIN8: return "Line Input Tool 8";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC1: return "Quadrature Decoder Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC1_DIR: return "Quadrature Decoder Tool 1 Changed Direction";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC2: return "Quadrature Decoder Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC2_DIR: return "Quadrature Decoder Tool 2 Changed Direction";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC3: return "Quadrature Decoder Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC3_DIR: return "Quadrature Decoder Tool 3 Changed Direction";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC4: return "Quadrature Decoder Tool 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_QDC4_DIR: return "Quadrature Decoder Tool 4 Changed Direction";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DIV1: return "Divider Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DIV2: return "Divider Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DIV3: return "Divider Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DIV4: return "Divider Tool 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_MDV1: return "Multiplier/Divider Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_MDV2: return "Multiplier/Divider Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_MDV3: return "Multiplier/Divider Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_MDV4: return "Multiplier/Divider Tool 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL1_1: return "Delay Tool 1 Output 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL1_2: return "Delay Tool 1 Output 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL2_1: return "Delay Tool 2 Output 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL2_2: return "Delay Tool 2 Output 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL3_1: return "Delay Tool 3 Output 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL3_2: return "Delay Tool 3 Output 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL4_1: return "Delay Tool 4 Output 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DEL4_2: return "Delay Tool 4 Output 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_USER_EVENT_1: return "User Event 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_USER_EVENT_2: return "User Event 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_USER_EVENT_3: return "User Event 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_USER_EVENT_4: return "User Event 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_C2C1: return "C2C-Link Synchronization Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_C2C2: return "C2C-Link Synchronization Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_C2C3: return "C2C-Link Synchronization Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_EIN1: return "Event Input Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_EIN2: return "Event Input Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT1: return "Device Link Trigger Tool 1";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT2: return "Device Link Trigger Tool 2";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT3: return "Device Link Trigger Tool 3";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT4: return "Device Link Trigger Tool 4";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT5: return "Device Link Trigger Tool 5";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT6: return "Device Link Trigger Tool 6";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT7: return "Device Link Trigger Tool 7";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT8: return "Device Link Trigger Tool 8";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT9: return "Device Link Trigger Tool 9";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT10: return "Device Link Trigger Tool 10";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT11: return "Device Link Trigger Tool 11";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT12: return "Device Link Trigger Tool 12";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT13: return "Device Link Trigger Tool 13";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT14: return "Device Link Trigger Tool 14";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT15: return "Device Link Trigger Tool 15";
        case ge::EVENT_DATA_NUMID_IO_TOOLBOX_DLT16: return "Device Link Trigger Tool 16";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_A: return "Detected CRC error on CXP connector A";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_B: return "Detected CRC error on CXP connector B";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_C: return "Detected CRC error on CXP connector C";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_D: return "Detected CRC error on CXP connector D";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_E: return "Detected CRC error on CXP connector E";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_F: return "Detected CRC error on CXP connector F";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_G: return "Detected CRC error on CXP connector G";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CRC_ERROR_CXP_H: return "Detected CRC error on CXP connector H";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_A: return "Low level connection lock achieved on CXP connector A";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_B: return "Low level connection lock achieved on CXP connector B";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_C: return "Low level connection lock achieved on CXP connector C";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_D: return "Low level connection lock achieved on CXP connector D";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_E: return "Low level connection lock achieved on CXP connector E";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_F: return "Low level connection lock achieved on CXP connector F";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_G: return "Low level connection lock achieved on CXP connector G";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_DETECTED_CXP_H: return "Low level connection lock achieved on CXP connector H";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_A: return "Low level connection lock lost on CXP connector A";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_B: return "Low level connection lock lost on CXP connector B";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_C: return "Low level connection lock lost on CXP connector C";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_D: return "Low level connection lock lost on CXP connector D";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_E: return "Low level connection lock lost on CXP connector E";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_F: return "Low level connection lock lost on CXP connector F";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_G: return "Low level connection lock lost on CXP connector G";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_CONNECTION_UNDETECTED_CXP_H: return "Low level connection lock lost on CXP connector H";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_0_READY: return "CoaXPress link configuration done for Device 0";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_1_READY: return "CoaXPress link configuration done for Device 1";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_2_READY: return "CoaXPress link configuration done for Device 2";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_3_READY: return "CoaXPress link configuration done for Device 3";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_4_READY: return "CoaXPress link configuration done for Device 4";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_5_READY: return "CoaXPress link configuration done for Device 5";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_6_READY: return "CoaXPress link configuration done for Device 6";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_7_READY: return "CoaXPress link configuration done for Device 7";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_0_LOST: return "Device 0 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_1_LOST: return "Device 1 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_2_LOST: return "Device 2 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_3_LOST: return "Device 3 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_4_LOST: return "Device 4 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_5_LOST: return "Device 5 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_6_LOST: return "Device 6 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_7_LOST: return "Device 7 disconnected";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_0_CONFIGURING: return "CoaXPress link configuration in progress for Device 0";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_1_CONFIGURING: return "CoaXPress link configuration in progress for Device 1";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_2_CONFIGURING: return "CoaXPress link configuration in progress for Device 2";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_3_CONFIGURING: return "CoaXPress link configuration in progress for Device 3";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_4_CONFIGURING: return "CoaXPress link configuration in progress for Device 4";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_5_CONFIGURING: return "CoaXPress link configuration in progress for Device 5";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_6_CONFIGURING: return "CoaXPress link configuration in progress for Device 6";
        case ge::EVENT_DATA_NUMID_CXP_INTERFACE_DEVICE_7_CONFIGURING: return "CoaXPress link configuration in progress for Device 7";
        case ge::EVENT_DATA_NUMID_CIC_CAMERA_TRIGGER_RISING_EDGE: return "Start of camera trigger";
        case ge::EVENT_DATA_NUMID_CIC_CAMERA_TRIGGER_FALLING_EDGE: return "End of camera trigger";
        case ge::EVENT_DATA_NUMID_CIC_STROBE_RISING_EDGE: return "Start of light strobe";
        case ge::EVENT_DATA_NUMID_CIC_STROBE_FALLING_EDGE: return "End of light strobe";
        case ge::EVENT_DATA_NUMID_CIC_ALLOW_NEXT_CYCLE: return "CIC is ready for next camera cycle";
        case ge::EVENT_DATA_NUMID_CIC_DISCARDED_CIC_TRIGGER: return "Ignored CIC trigger because CIC is not ready for next camera cycle";
        case ge::EVENT_DATA_NUMID_CIC_PENDING_CIC_TRIGGER: return "Delayed CIC trigger until CIC is ready for next camera cycle";
        case ge::EVENT_DATA_NUMID_CIC_CXP_TRIGGER_ACK: return "Received acknowledgement for previous CXP trigger message";
        case ge::EVENT_DATA_NUMID_CIC_CXP_TRIGGER_RESEND: return "Resent CXP trigger message (acknowledgement to previous CXP trigger message not received)";
        case ge::EVENT_DATA_NUMID_CIC_TRIGGER: return "CIC trigger";
        case ge::EVENT_DATA_NUMID_CXP_DEVICE_LINK_TRIGGER: return "LinkTrigger<N> received from CoaXPress device";
        case ge::EVENT_DATA_NUMID_DATASTREAM_START_OF_CAMERA_READOUT: return "Starts acquiring data of a new image frame (area-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_END_OF_CAMERA_READOUT: return "Stops acquiring data of an image frame (area-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_START_OF_SCAN: return "Starts acquiring data of a new image scan (line-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_END_OF_SCAN: return "Stops acquiring data of an image scan (line-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_REJECTED_FRAME: return "Dropped image frame data (area-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_REJECTED_SCAN: return "Dropped image scan data (line-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_TRIGGER_TO_CAMERA_READOUT_TIMEOUT: return "Trigger to camera readout timeout";
        case ge::EVENT_DATA_NUMID_DATASTREAM_CAMERA_READOUT_TIMEOUT: return "Camera readout timeout";
        case ge::EVENT_DATA_NUMID_DATASTREAM_BROKEN_FRAME: return "Broken frame due to frame store overflow (area-scan only)";
        case ge::EVENT_DATA_NUMID_DATASTREAM_LOST_FRAMES: return "Frames never received. Cause unknown";
        case ge::EVENT_DATA_NUMID_DATASTREAM_CANCELLED_FRAMES: return "Frames never sent by the camera";
        case ge::EVENT_DATA_NUMID_DATASTREAM_INCOMPLETE_FRAME: return "Frames delivered while there are still missing packets";
        case ge::EVENT_DATA_NUMID_DATASTREAM_FAILURE: return "Fatal error that terminated acquisition";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_STREAM_PACKET_SIZE_ERROR: return "Stream packet size error";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_STREAM_PACKET_FIFO_OVERFLOW: return "Stream packet FIFO overflow";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_CAMERA_TRIGGER_OVERRUN: return "New trigger sent to remote device even though readout of previous frame has not started yet";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_DID_NOT_RECEIVE_TRIGGER_ACK: return "Trigger ignored because ACK to previous trigger has not been received yet";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_TRIGGER_PACKET_RETRY_ERROR: return "Trigger packet resend not successful";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_INPUT_STREAM_FIFO_HALF_FULL: return "Input stream FIFO half full";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_INPUT_STREAM_FIFO_FULL: return "Input stream FIFO full";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_IMAGE_HEADER_ERROR: return "Image header error";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_MIG_AXI_WRITE_ERROR: return "MIG AXI write error";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_MIG_AXI_READ_ERROR: return "MIG AXI read error";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_PACKET_WITH_UNEXPECTED_TAG: return "Received a CXP packet with unexpected tag";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_FILL_LEVEL_ABOVE_IL_SOS_REJECTED: return "Start of scan skipped (caused by internal exception: frame store almost full)";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_FILL_LEVEL_ABOVE_AF_EARLY_EOS: return "End of scan (caused by internal exception: frame store almost full)";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_EXTERNAL_TRIGGER_REQS_TOO_CLOSE: return "External trigger requests too close together";
        case ge::EVENT_DATA_NUMID_DEVICE_ERROR_STREAM_PACKET_ARBITER_ERROR: return "Stream packet arbiter error";
        default: return "unknown event";
    }
}
} // namespace EURESYS_NAMESPACE
